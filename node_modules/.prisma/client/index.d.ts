
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model client
 * 
 */
export type client = $Result.DefaultSelection<Prisma.$clientPayload>
/**
 * Model commandefournisseur
 * 
 */
export type commandefournisseur = $Result.DefaultSelection<Prisma.$commandefournisseurPayload>
/**
 * Model entreprise
 * 
 */
export type entreprise = $Result.DefaultSelection<Prisma.$entreprisePayload>
/**
 * Model facture
 * 
 */
export type facture = $Result.DefaultSelection<Prisma.$facturePayload>
/**
 * Model fournisseur
 * 
 */
export type fournisseur = $Result.DefaultSelection<Prisma.$fournisseurPayload>
/**
 * Model lignefacture
 * 
 */
export type lignefacture = $Result.DefaultSelection<Prisma.$lignefacturePayload>
/**
 * Model produit
 * 
 */
export type produit = $Result.DefaultSelection<Prisma.$produitPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clients
 * const clients = await prisma.client.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clients
   * const clients = await prisma.client.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.client`: Exposes CRUD operations for the **client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.clientDelegate<ExtArgs>;

  /**
   * `prisma.commandefournisseur`: Exposes CRUD operations for the **commandefournisseur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Commandefournisseurs
    * const commandefournisseurs = await prisma.commandefournisseur.findMany()
    * ```
    */
  get commandefournisseur(): Prisma.commandefournisseurDelegate<ExtArgs>;

  /**
   * `prisma.entreprise`: Exposes CRUD operations for the **entreprise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Entreprises
    * const entreprises = await prisma.entreprise.findMany()
    * ```
    */
  get entreprise(): Prisma.entrepriseDelegate<ExtArgs>;

  /**
   * `prisma.facture`: Exposes CRUD operations for the **facture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Factures
    * const factures = await prisma.facture.findMany()
    * ```
    */
  get facture(): Prisma.factureDelegate<ExtArgs>;

  /**
   * `prisma.fournisseur`: Exposes CRUD operations for the **fournisseur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fournisseurs
    * const fournisseurs = await prisma.fournisseur.findMany()
    * ```
    */
  get fournisseur(): Prisma.fournisseurDelegate<ExtArgs>;

  /**
   * `prisma.lignefacture`: Exposes CRUD operations for the **lignefacture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lignefactures
    * const lignefactures = await prisma.lignefacture.findMany()
    * ```
    */
  get lignefacture(): Prisma.lignefactureDelegate<ExtArgs>;

  /**
   * `prisma.produit`: Exposes CRUD operations for the **produit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produits
    * const produits = await prisma.produit.findMany()
    * ```
    */
  get produit(): Prisma.produitDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    client: 'client',
    commandefournisseur: 'commandefournisseur',
    entreprise: 'entreprise',
    facture: 'facture',
    fournisseur: 'fournisseur',
    lignefacture: 'lignefacture',
    produit: 'produit'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'client' | 'commandefournisseur' | 'entreprise' | 'facture' | 'fournisseur' | 'lignefacture' | 'produit'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      client: {
        payload: Prisma.$clientPayload<ExtArgs>
        fields: Prisma.clientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.clientFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.clientFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          findFirst: {
            args: Prisma.clientFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.clientFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          findMany: {
            args: Prisma.clientFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientPayload>[]
          }
          create: {
            args: Prisma.clientCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          createMany: {
            args: Prisma.clientCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.clientDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          update: {
            args: Prisma.clientUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          deleteMany: {
            args: Prisma.clientDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.clientUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.clientUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.clientGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.clientCountArgs<ExtArgs>,
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      commandefournisseur: {
        payload: Prisma.$commandefournisseurPayload<ExtArgs>
        fields: Prisma.commandefournisseurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.commandefournisseurFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandefournisseurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.commandefournisseurFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandefournisseurPayload>
          }
          findFirst: {
            args: Prisma.commandefournisseurFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandefournisseurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.commandefournisseurFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandefournisseurPayload>
          }
          findMany: {
            args: Prisma.commandefournisseurFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandefournisseurPayload>[]
          }
          create: {
            args: Prisma.commandefournisseurCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandefournisseurPayload>
          }
          createMany: {
            args: Prisma.commandefournisseurCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.commandefournisseurDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandefournisseurPayload>
          }
          update: {
            args: Prisma.commandefournisseurUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandefournisseurPayload>
          }
          deleteMany: {
            args: Prisma.commandefournisseurDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.commandefournisseurUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.commandefournisseurUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandefournisseurPayload>
          }
          aggregate: {
            args: Prisma.CommandefournisseurAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCommandefournisseur>
          }
          groupBy: {
            args: Prisma.commandefournisseurGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommandefournisseurGroupByOutputType>[]
          }
          count: {
            args: Prisma.commandefournisseurCountArgs<ExtArgs>,
            result: $Utils.Optional<CommandefournisseurCountAggregateOutputType> | number
          }
        }
      }
      entreprise: {
        payload: Prisma.$entreprisePayload<ExtArgs>
        fields: Prisma.entrepriseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.entrepriseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$entreprisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.entrepriseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$entreprisePayload>
          }
          findFirst: {
            args: Prisma.entrepriseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$entreprisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.entrepriseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$entreprisePayload>
          }
          findMany: {
            args: Prisma.entrepriseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$entreprisePayload>[]
          }
          create: {
            args: Prisma.entrepriseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$entreprisePayload>
          }
          createMany: {
            args: Prisma.entrepriseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.entrepriseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$entreprisePayload>
          }
          update: {
            args: Prisma.entrepriseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$entreprisePayload>
          }
          deleteMany: {
            args: Prisma.entrepriseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.entrepriseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.entrepriseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$entreprisePayload>
          }
          aggregate: {
            args: Prisma.EntrepriseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEntreprise>
          }
          groupBy: {
            args: Prisma.entrepriseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EntrepriseGroupByOutputType>[]
          }
          count: {
            args: Prisma.entrepriseCountArgs<ExtArgs>,
            result: $Utils.Optional<EntrepriseCountAggregateOutputType> | number
          }
        }
      }
      facture: {
        payload: Prisma.$facturePayload<ExtArgs>
        fields: Prisma.factureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.factureFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.factureFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturePayload>
          }
          findFirst: {
            args: Prisma.factureFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.factureFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturePayload>
          }
          findMany: {
            args: Prisma.factureFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturePayload>[]
          }
          create: {
            args: Prisma.factureCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturePayload>
          }
          createMany: {
            args: Prisma.factureCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.factureDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturePayload>
          }
          update: {
            args: Prisma.factureUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturePayload>
          }
          deleteMany: {
            args: Prisma.factureDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.factureUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.factureUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturePayload>
          }
          aggregate: {
            args: Prisma.FactureAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFacture>
          }
          groupBy: {
            args: Prisma.factureGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FactureGroupByOutputType>[]
          }
          count: {
            args: Prisma.factureCountArgs<ExtArgs>,
            result: $Utils.Optional<FactureCountAggregateOutputType> | number
          }
        }
      }
      fournisseur: {
        payload: Prisma.$fournisseurPayload<ExtArgs>
        fields: Prisma.fournisseurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.fournisseurFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fournisseurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.fournisseurFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fournisseurPayload>
          }
          findFirst: {
            args: Prisma.fournisseurFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fournisseurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.fournisseurFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fournisseurPayload>
          }
          findMany: {
            args: Prisma.fournisseurFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fournisseurPayload>[]
          }
          create: {
            args: Prisma.fournisseurCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fournisseurPayload>
          }
          createMany: {
            args: Prisma.fournisseurCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.fournisseurDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fournisseurPayload>
          }
          update: {
            args: Prisma.fournisseurUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fournisseurPayload>
          }
          deleteMany: {
            args: Prisma.fournisseurDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.fournisseurUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.fournisseurUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fournisseurPayload>
          }
          aggregate: {
            args: Prisma.FournisseurAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFournisseur>
          }
          groupBy: {
            args: Prisma.fournisseurGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FournisseurGroupByOutputType>[]
          }
          count: {
            args: Prisma.fournisseurCountArgs<ExtArgs>,
            result: $Utils.Optional<FournisseurCountAggregateOutputType> | number
          }
        }
      }
      lignefacture: {
        payload: Prisma.$lignefacturePayload<ExtArgs>
        fields: Prisma.lignefactureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.lignefactureFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lignefacturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.lignefactureFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lignefacturePayload>
          }
          findFirst: {
            args: Prisma.lignefactureFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lignefacturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.lignefactureFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lignefacturePayload>
          }
          findMany: {
            args: Prisma.lignefactureFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lignefacturePayload>[]
          }
          create: {
            args: Prisma.lignefactureCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lignefacturePayload>
          }
          createMany: {
            args: Prisma.lignefactureCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.lignefactureDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lignefacturePayload>
          }
          update: {
            args: Prisma.lignefactureUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lignefacturePayload>
          }
          deleteMany: {
            args: Prisma.lignefactureDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.lignefactureUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.lignefactureUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lignefacturePayload>
          }
          aggregate: {
            args: Prisma.LignefactureAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLignefacture>
          }
          groupBy: {
            args: Prisma.lignefactureGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LignefactureGroupByOutputType>[]
          }
          count: {
            args: Prisma.lignefactureCountArgs<ExtArgs>,
            result: $Utils.Optional<LignefactureCountAggregateOutputType> | number
          }
        }
      }
      produit: {
        payload: Prisma.$produitPayload<ExtArgs>
        fields: Prisma.produitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.produitFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.produitFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produitPayload>
          }
          findFirst: {
            args: Prisma.produitFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.produitFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produitPayload>
          }
          findMany: {
            args: Prisma.produitFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produitPayload>[]
          }
          create: {
            args: Prisma.produitCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produitPayload>
          }
          createMany: {
            args: Prisma.produitCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.produitDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produitPayload>
          }
          update: {
            args: Prisma.produitUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produitPayload>
          }
          deleteMany: {
            args: Prisma.produitDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.produitUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.produitUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produitPayload>
          }
          aggregate: {
            args: Prisma.ProduitAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduit>
          }
          groupBy: {
            args: Prisma.produitGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProduitGroupByOutputType>[]
          }
          count: {
            args: Prisma.produitCountArgs<ExtArgs>,
            result: $Utils.Optional<ProduitCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    facture: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facture?: boolean | ClientCountOutputTypeCountFactureArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountFactureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: factureWhereInput
  }


  /**
   * Count Type FactureCountOutputType
   */

  export type FactureCountOutputType = {
    lignefacture: number
  }

  export type FactureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lignefacture?: boolean | FactureCountOutputTypeCountLignefactureArgs
  }

  // Custom InputTypes
  /**
   * FactureCountOutputType without action
   */
  export type FactureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureCountOutputType
     */
    select?: FactureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FactureCountOutputType without action
   */
  export type FactureCountOutputTypeCountLignefactureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: lignefactureWhereInput
  }


  /**
   * Count Type FournisseurCountOutputType
   */

  export type FournisseurCountOutputType = {
    commandefournisseur: number
  }

  export type FournisseurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commandefournisseur?: boolean | FournisseurCountOutputTypeCountCommandefournisseurArgs
  }

  // Custom InputTypes
  /**
   * FournisseurCountOutputType without action
   */
  export type FournisseurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FournisseurCountOutputType
     */
    select?: FournisseurCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FournisseurCountOutputType without action
   */
  export type FournisseurCountOutputTypeCountCommandefournisseurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commandefournisseurWhereInput
  }


  /**
   * Count Type ProduitCountOutputType
   */

  export type ProduitCountOutputType = {
    lignefacture: number
  }

  export type ProduitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lignefacture?: boolean | ProduitCountOutputTypeCountLignefactureArgs
  }

  // Custom InputTypes
  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProduitCountOutputType
     */
    select?: ProduitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeCountLignefactureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: lignefactureWhereInput
  }


  /**
   * Models
   */

  /**
   * Model client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientSumAggregateOutputType = {
    id: number | null
  }

  export type ClientMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    adresse: string | null
    ville: string | null
    numeroTelephone: string | null
    email: string | null
  }

  export type ClientMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    adresse: string | null
    ville: string | null
    numeroTelephone: string | null
    email: string | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    nom: number
    prenom: number
    adresse: number
    ville: number
    numeroTelephone: number
    email: number
    _all: number
  }


  export type ClientAvgAggregateInputType = {
    id?: true
  }

  export type ClientSumAggregateInputType = {
    id?: true
  }

  export type ClientMinAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    adresse?: true
    ville?: true
    numeroTelephone?: true
    email?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    adresse?: true
    ville?: true
    numeroTelephone?: true
    email?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    adresse?: true
    ville?: true
    numeroTelephone?: true
    email?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which client to aggregate.
     */
    where?: clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientOrderByWithRelationInput | clientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type clientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: clientWhereInput
    orderBy?: clientOrderByWithAggregationInput | clientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: clientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _avg?: ClientAvgAggregateInputType
    _sum?: ClientSumAggregateInputType
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: number
    nom: string
    prenom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends clientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type clientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    adresse?: boolean
    ville?: boolean
    numeroTelephone?: boolean
    email?: boolean
    facture?: boolean | client$factureArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type clientSelectScalar = {
    id?: boolean
    nom?: boolean
    prenom?: boolean
    adresse?: boolean
    ville?: boolean
    numeroTelephone?: boolean
    email?: boolean
  }


  export type clientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facture?: boolean | client$factureArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $clientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "client"
    objects: {
      facture: Prisma.$facturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      prenom: string
      adresse: string
      ville: string
      numeroTelephone: string
      email: string
    }, ExtArgs["result"]["client"]>
    composites: {}
  }


  type clientGetPayload<S extends boolean | null | undefined | clientDefaultArgs> = $Result.GetResult<Prisma.$clientPayload, S>

  type clientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<clientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface clientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['client'], meta: { name: 'client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {clientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends clientFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, clientFindUniqueArgs<ExtArgs>>
    ): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Client that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {clientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends clientFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, clientFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends clientFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, clientFindFirstArgs<ExtArgs>>
    ): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends clientFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, clientFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends clientFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, clientFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Client.
     * @param {clientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
    **/
    create<T extends clientCreateArgs<ExtArgs>>(
      args: SelectSubset<T, clientCreateArgs<ExtArgs>>
    ): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Clients.
     * @param {clientCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends clientCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, clientCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Client.
     * @param {clientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
    **/
    delete<T extends clientDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, clientDeleteArgs<ExtArgs>>
    ): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Client.
     * @param {clientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends clientUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, clientUpdateArgs<ExtArgs>>
    ): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Clients.
     * @param {clientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends clientDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, clientDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends clientUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, clientUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {clientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
    **/
    upsert<T extends clientUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, clientUpsertArgs<ExtArgs>>
    ): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends clientCountArgs>(
      args?: Subset<T, clientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends clientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: clientGroupByArgs['orderBy'] }
        : { orderBy?: clientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, clientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the client model
   */
  readonly fields: clientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__clientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    facture<T extends client$factureArgs<ExtArgs> = {}>(args?: Subset<T, client$factureArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$facturePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the client model
   */ 
  interface clientFieldRefs {
    readonly id: FieldRef<"client", 'Int'>
    readonly nom: FieldRef<"client", 'String'>
    readonly prenom: FieldRef<"client", 'String'>
    readonly adresse: FieldRef<"client", 'String'>
    readonly ville: FieldRef<"client", 'String'>
    readonly numeroTelephone: FieldRef<"client", 'String'>
    readonly email: FieldRef<"client", 'String'>
  }
    

  // Custom InputTypes
  /**
   * client findUnique
   */
  export type clientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which client to fetch.
     */
    where: clientWhereUniqueInput
  }

  /**
   * client findUniqueOrThrow
   */
  export type clientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which client to fetch.
     */
    where: clientWhereUniqueInput
  }

  /**
   * client findFirst
   */
  export type clientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which client to fetch.
     */
    where?: clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientOrderByWithRelationInput | clientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clients.
     */
    cursor?: clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * client findFirstOrThrow
   */
  export type clientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which client to fetch.
     */
    where?: clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientOrderByWithRelationInput | clientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clients.
     */
    cursor?: clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * client findMany
   */
  export type clientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which clients to fetch.
     */
    where?: clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientOrderByWithRelationInput | clientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clients.
     */
    cursor?: clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * client create
   */
  export type clientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * The data needed to create a client.
     */
    data: XOR<clientCreateInput, clientUncheckedCreateInput>
  }

  /**
   * client createMany
   */
  export type clientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many clients.
     */
    data: clientCreateManyInput | clientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * client update
   */
  export type clientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * The data needed to update a client.
     */
    data: XOR<clientUpdateInput, clientUncheckedUpdateInput>
    /**
     * Choose, which client to update.
     */
    where: clientWhereUniqueInput
  }

  /**
   * client updateMany
   */
  export type clientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update clients.
     */
    data: XOR<clientUpdateManyMutationInput, clientUncheckedUpdateManyInput>
    /**
     * Filter which clients to update
     */
    where?: clientWhereInput
  }

  /**
   * client upsert
   */
  export type clientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * The filter to search for the client to update in case it exists.
     */
    where: clientWhereUniqueInput
    /**
     * In case the client found by the `where` argument doesn't exist, create a new client with this data.
     */
    create: XOR<clientCreateInput, clientUncheckedCreateInput>
    /**
     * In case the client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clientUpdateInput, clientUncheckedUpdateInput>
  }

  /**
   * client delete
   */
  export type clientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter which client to delete.
     */
    where: clientWhereUniqueInput
  }

  /**
   * client deleteMany
   */
  export type clientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clients to delete
     */
    where?: clientWhereInput
  }

  /**
   * client.facture
   */
  export type client$factureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facture
     */
    select?: factureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: factureInclude<ExtArgs> | null
    where?: factureWhereInput
    orderBy?: factureOrderByWithRelationInput | factureOrderByWithRelationInput[]
    cursor?: factureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FactureScalarFieldEnum | FactureScalarFieldEnum[]
  }

  /**
   * client without action
   */
  export type clientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
  }


  /**
   * Model commandefournisseur
   */

  export type AggregateCommandefournisseur = {
    _count: CommandefournisseurCountAggregateOutputType | null
    _avg: CommandefournisseurAvgAggregateOutputType | null
    _sum: CommandefournisseurSumAggregateOutputType | null
    _min: CommandefournisseurMinAggregateOutputType | null
    _max: CommandefournisseurMaxAggregateOutputType | null
  }

  export type CommandefournisseurAvgAggregateOutputType = {
    id: number | null
    fournisseurId: number | null
  }

  export type CommandefournisseurSumAggregateOutputType = {
    id: number | null
    fournisseurId: number | null
  }

  export type CommandefournisseurMinAggregateOutputType = {
    id: number | null
    fournisseurId: number | null
    date: Date | null
    statut: string | null
  }

  export type CommandefournisseurMaxAggregateOutputType = {
    id: number | null
    fournisseurId: number | null
    date: Date | null
    statut: string | null
  }

  export type CommandefournisseurCountAggregateOutputType = {
    id: number
    fournisseurId: number
    date: number
    statut: number
    _all: number
  }


  export type CommandefournisseurAvgAggregateInputType = {
    id?: true
    fournisseurId?: true
  }

  export type CommandefournisseurSumAggregateInputType = {
    id?: true
    fournisseurId?: true
  }

  export type CommandefournisseurMinAggregateInputType = {
    id?: true
    fournisseurId?: true
    date?: true
    statut?: true
  }

  export type CommandefournisseurMaxAggregateInputType = {
    id?: true
    fournisseurId?: true
    date?: true
    statut?: true
  }

  export type CommandefournisseurCountAggregateInputType = {
    id?: true
    fournisseurId?: true
    date?: true
    statut?: true
    _all?: true
  }

  export type CommandefournisseurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which commandefournisseur to aggregate.
     */
    where?: commandefournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commandefournisseurs to fetch.
     */
    orderBy?: commandefournisseurOrderByWithRelationInput | commandefournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: commandefournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commandefournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commandefournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned commandefournisseurs
    **/
    _count?: true | CommandefournisseurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommandefournisseurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommandefournisseurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommandefournisseurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommandefournisseurMaxAggregateInputType
  }

  export type GetCommandefournisseurAggregateType<T extends CommandefournisseurAggregateArgs> = {
        [P in keyof T & keyof AggregateCommandefournisseur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommandefournisseur[P]>
      : GetScalarType<T[P], AggregateCommandefournisseur[P]>
  }




  export type commandefournisseurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commandefournisseurWhereInput
    orderBy?: commandefournisseurOrderByWithAggregationInput | commandefournisseurOrderByWithAggregationInput[]
    by: CommandefournisseurScalarFieldEnum[] | CommandefournisseurScalarFieldEnum
    having?: commandefournisseurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommandefournisseurCountAggregateInputType | true
    _avg?: CommandefournisseurAvgAggregateInputType
    _sum?: CommandefournisseurSumAggregateInputType
    _min?: CommandefournisseurMinAggregateInputType
    _max?: CommandefournisseurMaxAggregateInputType
  }

  export type CommandefournisseurGroupByOutputType = {
    id: number
    fournisseurId: number
    date: Date
    statut: string
    _count: CommandefournisseurCountAggregateOutputType | null
    _avg: CommandefournisseurAvgAggregateOutputType | null
    _sum: CommandefournisseurSumAggregateOutputType | null
    _min: CommandefournisseurMinAggregateOutputType | null
    _max: CommandefournisseurMaxAggregateOutputType | null
  }

  type GetCommandefournisseurGroupByPayload<T extends commandefournisseurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommandefournisseurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommandefournisseurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommandefournisseurGroupByOutputType[P]>
            : GetScalarType<T[P], CommandefournisseurGroupByOutputType[P]>
        }
      >
    >


  export type commandefournisseurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fournisseurId?: boolean
    date?: boolean
    statut?: boolean
    fournisseur?: boolean | fournisseurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commandefournisseur"]>

  export type commandefournisseurSelectScalar = {
    id?: boolean
    fournisseurId?: boolean
    date?: boolean
    statut?: boolean
  }


  export type commandefournisseurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fournisseur?: boolean | fournisseurDefaultArgs<ExtArgs>
  }


  export type $commandefournisseurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "commandefournisseur"
    objects: {
      fournisseur: Prisma.$fournisseurPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fournisseurId: number
      date: Date
      statut: string
    }, ExtArgs["result"]["commandefournisseur"]>
    composites: {}
  }


  type commandefournisseurGetPayload<S extends boolean | null | undefined | commandefournisseurDefaultArgs> = $Result.GetResult<Prisma.$commandefournisseurPayload, S>

  type commandefournisseurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<commandefournisseurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommandefournisseurCountAggregateInputType | true
    }

  export interface commandefournisseurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['commandefournisseur'], meta: { name: 'commandefournisseur' } }
    /**
     * Find zero or one Commandefournisseur that matches the filter.
     * @param {commandefournisseurFindUniqueArgs} args - Arguments to find a Commandefournisseur
     * @example
     * // Get one Commandefournisseur
     * const commandefournisseur = await prisma.commandefournisseur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends commandefournisseurFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, commandefournisseurFindUniqueArgs<ExtArgs>>
    ): Prisma__commandefournisseurClient<$Result.GetResult<Prisma.$commandefournisseurPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Commandefournisseur that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {commandefournisseurFindUniqueOrThrowArgs} args - Arguments to find a Commandefournisseur
     * @example
     * // Get one Commandefournisseur
     * const commandefournisseur = await prisma.commandefournisseur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends commandefournisseurFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, commandefournisseurFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__commandefournisseurClient<$Result.GetResult<Prisma.$commandefournisseurPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Commandefournisseur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commandefournisseurFindFirstArgs} args - Arguments to find a Commandefournisseur
     * @example
     * // Get one Commandefournisseur
     * const commandefournisseur = await prisma.commandefournisseur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends commandefournisseurFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, commandefournisseurFindFirstArgs<ExtArgs>>
    ): Prisma__commandefournisseurClient<$Result.GetResult<Prisma.$commandefournisseurPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Commandefournisseur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commandefournisseurFindFirstOrThrowArgs} args - Arguments to find a Commandefournisseur
     * @example
     * // Get one Commandefournisseur
     * const commandefournisseur = await prisma.commandefournisseur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends commandefournisseurFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, commandefournisseurFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__commandefournisseurClient<$Result.GetResult<Prisma.$commandefournisseurPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Commandefournisseurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commandefournisseurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Commandefournisseurs
     * const commandefournisseurs = await prisma.commandefournisseur.findMany()
     * 
     * // Get first 10 Commandefournisseurs
     * const commandefournisseurs = await prisma.commandefournisseur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commandefournisseurWithIdOnly = await prisma.commandefournisseur.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends commandefournisseurFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commandefournisseurFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commandefournisseurPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Commandefournisseur.
     * @param {commandefournisseurCreateArgs} args - Arguments to create a Commandefournisseur.
     * @example
     * // Create one Commandefournisseur
     * const Commandefournisseur = await prisma.commandefournisseur.create({
     *   data: {
     *     // ... data to create a Commandefournisseur
     *   }
     * })
     * 
    **/
    create<T extends commandefournisseurCreateArgs<ExtArgs>>(
      args: SelectSubset<T, commandefournisseurCreateArgs<ExtArgs>>
    ): Prisma__commandefournisseurClient<$Result.GetResult<Prisma.$commandefournisseurPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Commandefournisseurs.
     * @param {commandefournisseurCreateManyArgs} args - Arguments to create many Commandefournisseurs.
     * @example
     * // Create many Commandefournisseurs
     * const commandefournisseur = await prisma.commandefournisseur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends commandefournisseurCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commandefournisseurCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Commandefournisseur.
     * @param {commandefournisseurDeleteArgs} args - Arguments to delete one Commandefournisseur.
     * @example
     * // Delete one Commandefournisseur
     * const Commandefournisseur = await prisma.commandefournisseur.delete({
     *   where: {
     *     // ... filter to delete one Commandefournisseur
     *   }
     * })
     * 
    **/
    delete<T extends commandefournisseurDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, commandefournisseurDeleteArgs<ExtArgs>>
    ): Prisma__commandefournisseurClient<$Result.GetResult<Prisma.$commandefournisseurPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Commandefournisseur.
     * @param {commandefournisseurUpdateArgs} args - Arguments to update one Commandefournisseur.
     * @example
     * // Update one Commandefournisseur
     * const commandefournisseur = await prisma.commandefournisseur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commandefournisseurUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, commandefournisseurUpdateArgs<ExtArgs>>
    ): Prisma__commandefournisseurClient<$Result.GetResult<Prisma.$commandefournisseurPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Commandefournisseurs.
     * @param {commandefournisseurDeleteManyArgs} args - Arguments to filter Commandefournisseurs to delete.
     * @example
     * // Delete a few Commandefournisseurs
     * const { count } = await prisma.commandefournisseur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commandefournisseurDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commandefournisseurDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Commandefournisseurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commandefournisseurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Commandefournisseurs
     * const commandefournisseur = await prisma.commandefournisseur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commandefournisseurUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, commandefournisseurUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Commandefournisseur.
     * @param {commandefournisseurUpsertArgs} args - Arguments to update or create a Commandefournisseur.
     * @example
     * // Update or create a Commandefournisseur
     * const commandefournisseur = await prisma.commandefournisseur.upsert({
     *   create: {
     *     // ... data to create a Commandefournisseur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Commandefournisseur we want to update
     *   }
     * })
    **/
    upsert<T extends commandefournisseurUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, commandefournisseurUpsertArgs<ExtArgs>>
    ): Prisma__commandefournisseurClient<$Result.GetResult<Prisma.$commandefournisseurPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Commandefournisseurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commandefournisseurCountArgs} args - Arguments to filter Commandefournisseurs to count.
     * @example
     * // Count the number of Commandefournisseurs
     * const count = await prisma.commandefournisseur.count({
     *   where: {
     *     // ... the filter for the Commandefournisseurs we want to count
     *   }
     * })
    **/
    count<T extends commandefournisseurCountArgs>(
      args?: Subset<T, commandefournisseurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommandefournisseurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Commandefournisseur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandefournisseurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommandefournisseurAggregateArgs>(args: Subset<T, CommandefournisseurAggregateArgs>): Prisma.PrismaPromise<GetCommandefournisseurAggregateType<T>>

    /**
     * Group by Commandefournisseur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commandefournisseurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends commandefournisseurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: commandefournisseurGroupByArgs['orderBy'] }
        : { orderBy?: commandefournisseurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, commandefournisseurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommandefournisseurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the commandefournisseur model
   */
  readonly fields: commandefournisseurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for commandefournisseur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__commandefournisseurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    fournisseur<T extends fournisseurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, fournisseurDefaultArgs<ExtArgs>>): Prisma__fournisseurClient<$Result.GetResult<Prisma.$fournisseurPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the commandefournisseur model
   */ 
  interface commandefournisseurFieldRefs {
    readonly id: FieldRef<"commandefournisseur", 'Int'>
    readonly fournisseurId: FieldRef<"commandefournisseur", 'Int'>
    readonly date: FieldRef<"commandefournisseur", 'DateTime'>
    readonly statut: FieldRef<"commandefournisseur", 'String'>
  }
    

  // Custom InputTypes
  /**
   * commandefournisseur findUnique
   */
  export type commandefournisseurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commandefournisseur
     */
    select?: commandefournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commandefournisseurInclude<ExtArgs> | null
    /**
     * Filter, which commandefournisseur to fetch.
     */
    where: commandefournisseurWhereUniqueInput
  }

  /**
   * commandefournisseur findUniqueOrThrow
   */
  export type commandefournisseurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commandefournisseur
     */
    select?: commandefournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commandefournisseurInclude<ExtArgs> | null
    /**
     * Filter, which commandefournisseur to fetch.
     */
    where: commandefournisseurWhereUniqueInput
  }

  /**
   * commandefournisseur findFirst
   */
  export type commandefournisseurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commandefournisseur
     */
    select?: commandefournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commandefournisseurInclude<ExtArgs> | null
    /**
     * Filter, which commandefournisseur to fetch.
     */
    where?: commandefournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commandefournisseurs to fetch.
     */
    orderBy?: commandefournisseurOrderByWithRelationInput | commandefournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commandefournisseurs.
     */
    cursor?: commandefournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commandefournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commandefournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commandefournisseurs.
     */
    distinct?: CommandefournisseurScalarFieldEnum | CommandefournisseurScalarFieldEnum[]
  }

  /**
   * commandefournisseur findFirstOrThrow
   */
  export type commandefournisseurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commandefournisseur
     */
    select?: commandefournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commandefournisseurInclude<ExtArgs> | null
    /**
     * Filter, which commandefournisseur to fetch.
     */
    where?: commandefournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commandefournisseurs to fetch.
     */
    orderBy?: commandefournisseurOrderByWithRelationInput | commandefournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commandefournisseurs.
     */
    cursor?: commandefournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commandefournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commandefournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commandefournisseurs.
     */
    distinct?: CommandefournisseurScalarFieldEnum | CommandefournisseurScalarFieldEnum[]
  }

  /**
   * commandefournisseur findMany
   */
  export type commandefournisseurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commandefournisseur
     */
    select?: commandefournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commandefournisseurInclude<ExtArgs> | null
    /**
     * Filter, which commandefournisseurs to fetch.
     */
    where?: commandefournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commandefournisseurs to fetch.
     */
    orderBy?: commandefournisseurOrderByWithRelationInput | commandefournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing commandefournisseurs.
     */
    cursor?: commandefournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commandefournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commandefournisseurs.
     */
    skip?: number
    distinct?: CommandefournisseurScalarFieldEnum | CommandefournisseurScalarFieldEnum[]
  }

  /**
   * commandefournisseur create
   */
  export type commandefournisseurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commandefournisseur
     */
    select?: commandefournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commandefournisseurInclude<ExtArgs> | null
    /**
     * The data needed to create a commandefournisseur.
     */
    data: XOR<commandefournisseurCreateInput, commandefournisseurUncheckedCreateInput>
  }

  /**
   * commandefournisseur createMany
   */
  export type commandefournisseurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many commandefournisseurs.
     */
    data: commandefournisseurCreateManyInput | commandefournisseurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * commandefournisseur update
   */
  export type commandefournisseurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commandefournisseur
     */
    select?: commandefournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commandefournisseurInclude<ExtArgs> | null
    /**
     * The data needed to update a commandefournisseur.
     */
    data: XOR<commandefournisseurUpdateInput, commandefournisseurUncheckedUpdateInput>
    /**
     * Choose, which commandefournisseur to update.
     */
    where: commandefournisseurWhereUniqueInput
  }

  /**
   * commandefournisseur updateMany
   */
  export type commandefournisseurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update commandefournisseurs.
     */
    data: XOR<commandefournisseurUpdateManyMutationInput, commandefournisseurUncheckedUpdateManyInput>
    /**
     * Filter which commandefournisseurs to update
     */
    where?: commandefournisseurWhereInput
  }

  /**
   * commandefournisseur upsert
   */
  export type commandefournisseurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commandefournisseur
     */
    select?: commandefournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commandefournisseurInclude<ExtArgs> | null
    /**
     * The filter to search for the commandefournisseur to update in case it exists.
     */
    where: commandefournisseurWhereUniqueInput
    /**
     * In case the commandefournisseur found by the `where` argument doesn't exist, create a new commandefournisseur with this data.
     */
    create: XOR<commandefournisseurCreateInput, commandefournisseurUncheckedCreateInput>
    /**
     * In case the commandefournisseur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<commandefournisseurUpdateInput, commandefournisseurUncheckedUpdateInput>
  }

  /**
   * commandefournisseur delete
   */
  export type commandefournisseurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commandefournisseur
     */
    select?: commandefournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commandefournisseurInclude<ExtArgs> | null
    /**
     * Filter which commandefournisseur to delete.
     */
    where: commandefournisseurWhereUniqueInput
  }

  /**
   * commandefournisseur deleteMany
   */
  export type commandefournisseurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which commandefournisseurs to delete
     */
    where?: commandefournisseurWhereInput
  }

  /**
   * commandefournisseur without action
   */
  export type commandefournisseurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commandefournisseur
     */
    select?: commandefournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commandefournisseurInclude<ExtArgs> | null
  }


  /**
   * Model entreprise
   */

  export type AggregateEntreprise = {
    _count: EntrepriseCountAggregateOutputType | null
    _avg: EntrepriseAvgAggregateOutputType | null
    _sum: EntrepriseSumAggregateOutputType | null
    _min: EntrepriseMinAggregateOutputType | null
    _max: EntrepriseMaxAggregateOutputType | null
  }

  export type EntrepriseAvgAggregateOutputType = {
    id: number | null
    capital: number | null
    nombreEmployes: number | null
  }

  export type EntrepriseSumAggregateOutputType = {
    id: number | null
    capital: number | null
    nombreEmployes: number | null
  }

  export type EntrepriseMinAggregateOutputType = {
    id: number | null
    nom: string | null
    siegeSocial: string | null
    dateCreation: Date | null
    identifiantFiscal: string | null
    capital: number | null
    nombreEmployes: number | null
    ville: string | null
    responsable: string | null
    numeroTelephone: string | null
    email: string | null
  }

  export type EntrepriseMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    siegeSocial: string | null
    dateCreation: Date | null
    identifiantFiscal: string | null
    capital: number | null
    nombreEmployes: number | null
    ville: string | null
    responsable: string | null
    numeroTelephone: string | null
    email: string | null
  }

  export type EntrepriseCountAggregateOutputType = {
    id: number
    nom: number
    siegeSocial: number
    dateCreation: number
    identifiantFiscal: number
    capital: number
    nombreEmployes: number
    ville: number
    responsable: number
    numeroTelephone: number
    email: number
    _all: number
  }


  export type EntrepriseAvgAggregateInputType = {
    id?: true
    capital?: true
    nombreEmployes?: true
  }

  export type EntrepriseSumAggregateInputType = {
    id?: true
    capital?: true
    nombreEmployes?: true
  }

  export type EntrepriseMinAggregateInputType = {
    id?: true
    nom?: true
    siegeSocial?: true
    dateCreation?: true
    identifiantFiscal?: true
    capital?: true
    nombreEmployes?: true
    ville?: true
    responsable?: true
    numeroTelephone?: true
    email?: true
  }

  export type EntrepriseMaxAggregateInputType = {
    id?: true
    nom?: true
    siegeSocial?: true
    dateCreation?: true
    identifiantFiscal?: true
    capital?: true
    nombreEmployes?: true
    ville?: true
    responsable?: true
    numeroTelephone?: true
    email?: true
  }

  export type EntrepriseCountAggregateInputType = {
    id?: true
    nom?: true
    siegeSocial?: true
    dateCreation?: true
    identifiantFiscal?: true
    capital?: true
    nombreEmployes?: true
    ville?: true
    responsable?: true
    numeroTelephone?: true
    email?: true
    _all?: true
  }

  export type EntrepriseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which entreprise to aggregate.
     */
    where?: entrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of entreprises to fetch.
     */
    orderBy?: entrepriseOrderByWithRelationInput | entrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: entrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` entreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned entreprises
    **/
    _count?: true | EntrepriseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EntrepriseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EntrepriseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EntrepriseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EntrepriseMaxAggregateInputType
  }

  export type GetEntrepriseAggregateType<T extends EntrepriseAggregateArgs> = {
        [P in keyof T & keyof AggregateEntreprise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEntreprise[P]>
      : GetScalarType<T[P], AggregateEntreprise[P]>
  }




  export type entrepriseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: entrepriseWhereInput
    orderBy?: entrepriseOrderByWithAggregationInput | entrepriseOrderByWithAggregationInput[]
    by: EntrepriseScalarFieldEnum[] | EntrepriseScalarFieldEnum
    having?: entrepriseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EntrepriseCountAggregateInputType | true
    _avg?: EntrepriseAvgAggregateInputType
    _sum?: EntrepriseSumAggregateInputType
    _min?: EntrepriseMinAggregateInputType
    _max?: EntrepriseMaxAggregateInputType
  }

  export type EntrepriseGroupByOutputType = {
    id: number
    nom: string
    siegeSocial: string
    dateCreation: Date
    identifiantFiscal: string
    capital: number
    nombreEmployes: number
    ville: string
    responsable: string
    numeroTelephone: string
    email: string
    _count: EntrepriseCountAggregateOutputType | null
    _avg: EntrepriseAvgAggregateOutputType | null
    _sum: EntrepriseSumAggregateOutputType | null
    _min: EntrepriseMinAggregateOutputType | null
    _max: EntrepriseMaxAggregateOutputType | null
  }

  type GetEntrepriseGroupByPayload<T extends entrepriseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EntrepriseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EntrepriseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EntrepriseGroupByOutputType[P]>
            : GetScalarType<T[P], EntrepriseGroupByOutputType[P]>
        }
      >
    >


  export type entrepriseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    siegeSocial?: boolean
    dateCreation?: boolean
    identifiantFiscal?: boolean
    capital?: boolean
    nombreEmployes?: boolean
    ville?: boolean
    responsable?: boolean
    numeroTelephone?: boolean
    email?: boolean
  }, ExtArgs["result"]["entreprise"]>

  export type entrepriseSelectScalar = {
    id?: boolean
    nom?: boolean
    siegeSocial?: boolean
    dateCreation?: boolean
    identifiantFiscal?: boolean
    capital?: boolean
    nombreEmployes?: boolean
    ville?: boolean
    responsable?: boolean
    numeroTelephone?: boolean
    email?: boolean
  }



  export type $entreprisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "entreprise"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      siegeSocial: string
      dateCreation: Date
      identifiantFiscal: string
      capital: number
      nombreEmployes: number
      ville: string
      responsable: string
      numeroTelephone: string
      email: string
    }, ExtArgs["result"]["entreprise"]>
    composites: {}
  }


  type entrepriseGetPayload<S extends boolean | null | undefined | entrepriseDefaultArgs> = $Result.GetResult<Prisma.$entreprisePayload, S>

  type entrepriseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<entrepriseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EntrepriseCountAggregateInputType | true
    }

  export interface entrepriseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['entreprise'], meta: { name: 'entreprise' } }
    /**
     * Find zero or one Entreprise that matches the filter.
     * @param {entrepriseFindUniqueArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends entrepriseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, entrepriseFindUniqueArgs<ExtArgs>>
    ): Prisma__entrepriseClient<$Result.GetResult<Prisma.$entreprisePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Entreprise that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {entrepriseFindUniqueOrThrowArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends entrepriseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, entrepriseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__entrepriseClient<$Result.GetResult<Prisma.$entreprisePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Entreprise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entrepriseFindFirstArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends entrepriseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, entrepriseFindFirstArgs<ExtArgs>>
    ): Prisma__entrepriseClient<$Result.GetResult<Prisma.$entreprisePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Entreprise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entrepriseFindFirstOrThrowArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends entrepriseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, entrepriseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__entrepriseClient<$Result.GetResult<Prisma.$entreprisePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Entreprises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entrepriseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Entreprises
     * const entreprises = await prisma.entreprise.findMany()
     * 
     * // Get first 10 Entreprises
     * const entreprises = await prisma.entreprise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const entrepriseWithIdOnly = await prisma.entreprise.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends entrepriseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, entrepriseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$entreprisePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Entreprise.
     * @param {entrepriseCreateArgs} args - Arguments to create a Entreprise.
     * @example
     * // Create one Entreprise
     * const Entreprise = await prisma.entreprise.create({
     *   data: {
     *     // ... data to create a Entreprise
     *   }
     * })
     * 
    **/
    create<T extends entrepriseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, entrepriseCreateArgs<ExtArgs>>
    ): Prisma__entrepriseClient<$Result.GetResult<Prisma.$entreprisePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Entreprises.
     * @param {entrepriseCreateManyArgs} args - Arguments to create many Entreprises.
     * @example
     * // Create many Entreprises
     * const entreprise = await prisma.entreprise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends entrepriseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, entrepriseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Entreprise.
     * @param {entrepriseDeleteArgs} args - Arguments to delete one Entreprise.
     * @example
     * // Delete one Entreprise
     * const Entreprise = await prisma.entreprise.delete({
     *   where: {
     *     // ... filter to delete one Entreprise
     *   }
     * })
     * 
    **/
    delete<T extends entrepriseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, entrepriseDeleteArgs<ExtArgs>>
    ): Prisma__entrepriseClient<$Result.GetResult<Prisma.$entreprisePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Entreprise.
     * @param {entrepriseUpdateArgs} args - Arguments to update one Entreprise.
     * @example
     * // Update one Entreprise
     * const entreprise = await prisma.entreprise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends entrepriseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, entrepriseUpdateArgs<ExtArgs>>
    ): Prisma__entrepriseClient<$Result.GetResult<Prisma.$entreprisePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Entreprises.
     * @param {entrepriseDeleteManyArgs} args - Arguments to filter Entreprises to delete.
     * @example
     * // Delete a few Entreprises
     * const { count } = await prisma.entreprise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends entrepriseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, entrepriseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Entreprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entrepriseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Entreprises
     * const entreprise = await prisma.entreprise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends entrepriseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, entrepriseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Entreprise.
     * @param {entrepriseUpsertArgs} args - Arguments to update or create a Entreprise.
     * @example
     * // Update or create a Entreprise
     * const entreprise = await prisma.entreprise.upsert({
     *   create: {
     *     // ... data to create a Entreprise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Entreprise we want to update
     *   }
     * })
    **/
    upsert<T extends entrepriseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, entrepriseUpsertArgs<ExtArgs>>
    ): Prisma__entrepriseClient<$Result.GetResult<Prisma.$entreprisePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Entreprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entrepriseCountArgs} args - Arguments to filter Entreprises to count.
     * @example
     * // Count the number of Entreprises
     * const count = await prisma.entreprise.count({
     *   where: {
     *     // ... the filter for the Entreprises we want to count
     *   }
     * })
    **/
    count<T extends entrepriseCountArgs>(
      args?: Subset<T, entrepriseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EntrepriseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Entreprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EntrepriseAggregateArgs>(args: Subset<T, EntrepriseAggregateArgs>): Prisma.PrismaPromise<GetEntrepriseAggregateType<T>>

    /**
     * Group by Entreprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entrepriseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends entrepriseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: entrepriseGroupByArgs['orderBy'] }
        : { orderBy?: entrepriseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, entrepriseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntrepriseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the entreprise model
   */
  readonly fields: entrepriseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for entreprise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__entrepriseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the entreprise model
   */ 
  interface entrepriseFieldRefs {
    readonly id: FieldRef<"entreprise", 'Int'>
    readonly nom: FieldRef<"entreprise", 'String'>
    readonly siegeSocial: FieldRef<"entreprise", 'String'>
    readonly dateCreation: FieldRef<"entreprise", 'DateTime'>
    readonly identifiantFiscal: FieldRef<"entreprise", 'String'>
    readonly capital: FieldRef<"entreprise", 'Float'>
    readonly nombreEmployes: FieldRef<"entreprise", 'Int'>
    readonly ville: FieldRef<"entreprise", 'String'>
    readonly responsable: FieldRef<"entreprise", 'String'>
    readonly numeroTelephone: FieldRef<"entreprise", 'String'>
    readonly email: FieldRef<"entreprise", 'String'>
  }
    

  // Custom InputTypes
  /**
   * entreprise findUnique
   */
  export type entrepriseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entreprise
     */
    select?: entrepriseSelect<ExtArgs> | null
    /**
     * Filter, which entreprise to fetch.
     */
    where: entrepriseWhereUniqueInput
  }

  /**
   * entreprise findUniqueOrThrow
   */
  export type entrepriseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entreprise
     */
    select?: entrepriseSelect<ExtArgs> | null
    /**
     * Filter, which entreprise to fetch.
     */
    where: entrepriseWhereUniqueInput
  }

  /**
   * entreprise findFirst
   */
  export type entrepriseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entreprise
     */
    select?: entrepriseSelect<ExtArgs> | null
    /**
     * Filter, which entreprise to fetch.
     */
    where?: entrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of entreprises to fetch.
     */
    orderBy?: entrepriseOrderByWithRelationInput | entrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for entreprises.
     */
    cursor?: entrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` entreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of entreprises.
     */
    distinct?: EntrepriseScalarFieldEnum | EntrepriseScalarFieldEnum[]
  }

  /**
   * entreprise findFirstOrThrow
   */
  export type entrepriseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entreprise
     */
    select?: entrepriseSelect<ExtArgs> | null
    /**
     * Filter, which entreprise to fetch.
     */
    where?: entrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of entreprises to fetch.
     */
    orderBy?: entrepriseOrderByWithRelationInput | entrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for entreprises.
     */
    cursor?: entrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` entreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of entreprises.
     */
    distinct?: EntrepriseScalarFieldEnum | EntrepriseScalarFieldEnum[]
  }

  /**
   * entreprise findMany
   */
  export type entrepriseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entreprise
     */
    select?: entrepriseSelect<ExtArgs> | null
    /**
     * Filter, which entreprises to fetch.
     */
    where?: entrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of entreprises to fetch.
     */
    orderBy?: entrepriseOrderByWithRelationInput | entrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing entreprises.
     */
    cursor?: entrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` entreprises.
     */
    skip?: number
    distinct?: EntrepriseScalarFieldEnum | EntrepriseScalarFieldEnum[]
  }

  /**
   * entreprise create
   */
  export type entrepriseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entreprise
     */
    select?: entrepriseSelect<ExtArgs> | null
    /**
     * The data needed to create a entreprise.
     */
    data: XOR<entrepriseCreateInput, entrepriseUncheckedCreateInput>
  }

  /**
   * entreprise createMany
   */
  export type entrepriseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many entreprises.
     */
    data: entrepriseCreateManyInput | entrepriseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * entreprise update
   */
  export type entrepriseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entreprise
     */
    select?: entrepriseSelect<ExtArgs> | null
    /**
     * The data needed to update a entreprise.
     */
    data: XOR<entrepriseUpdateInput, entrepriseUncheckedUpdateInput>
    /**
     * Choose, which entreprise to update.
     */
    where: entrepriseWhereUniqueInput
  }

  /**
   * entreprise updateMany
   */
  export type entrepriseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update entreprises.
     */
    data: XOR<entrepriseUpdateManyMutationInput, entrepriseUncheckedUpdateManyInput>
    /**
     * Filter which entreprises to update
     */
    where?: entrepriseWhereInput
  }

  /**
   * entreprise upsert
   */
  export type entrepriseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entreprise
     */
    select?: entrepriseSelect<ExtArgs> | null
    /**
     * The filter to search for the entreprise to update in case it exists.
     */
    where: entrepriseWhereUniqueInput
    /**
     * In case the entreprise found by the `where` argument doesn't exist, create a new entreprise with this data.
     */
    create: XOR<entrepriseCreateInput, entrepriseUncheckedCreateInput>
    /**
     * In case the entreprise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<entrepriseUpdateInput, entrepriseUncheckedUpdateInput>
  }

  /**
   * entreprise delete
   */
  export type entrepriseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entreprise
     */
    select?: entrepriseSelect<ExtArgs> | null
    /**
     * Filter which entreprise to delete.
     */
    where: entrepriseWhereUniqueInput
  }

  /**
   * entreprise deleteMany
   */
  export type entrepriseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which entreprises to delete
     */
    where?: entrepriseWhereInput
  }

  /**
   * entreprise without action
   */
  export type entrepriseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entreprise
     */
    select?: entrepriseSelect<ExtArgs> | null
  }


  /**
   * Model facture
   */

  export type AggregateFacture = {
    _count: FactureCountAggregateOutputType | null
    _avg: FactureAvgAggregateOutputType | null
    _sum: FactureSumAggregateOutputType | null
    _min: FactureMinAggregateOutputType | null
    _max: FactureMaxAggregateOutputType | null
  }

  export type FactureAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
    montantTotal: number | null
  }

  export type FactureSumAggregateOutputType = {
    id: number | null
    clientId: number | null
    montantTotal: number | null
  }

  export type FactureMinAggregateOutputType = {
    id: number | null
    clientId: number | null
    date: Date | null
    montantTotal: number | null
  }

  export type FactureMaxAggregateOutputType = {
    id: number | null
    clientId: number | null
    date: Date | null
    montantTotal: number | null
  }

  export type FactureCountAggregateOutputType = {
    id: number
    clientId: number
    date: number
    montantTotal: number
    _all: number
  }


  export type FactureAvgAggregateInputType = {
    id?: true
    clientId?: true
    montantTotal?: true
  }

  export type FactureSumAggregateInputType = {
    id?: true
    clientId?: true
    montantTotal?: true
  }

  export type FactureMinAggregateInputType = {
    id?: true
    clientId?: true
    date?: true
    montantTotal?: true
  }

  export type FactureMaxAggregateInputType = {
    id?: true
    clientId?: true
    date?: true
    montantTotal?: true
  }

  export type FactureCountAggregateInputType = {
    id?: true
    clientId?: true
    date?: true
    montantTotal?: true
    _all?: true
  }

  export type FactureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which facture to aggregate.
     */
    where?: factureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of factures to fetch.
     */
    orderBy?: factureOrderByWithRelationInput | factureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: factureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` factures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` factures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned factures
    **/
    _count?: true | FactureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FactureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FactureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FactureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FactureMaxAggregateInputType
  }

  export type GetFactureAggregateType<T extends FactureAggregateArgs> = {
        [P in keyof T & keyof AggregateFacture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacture[P]>
      : GetScalarType<T[P], AggregateFacture[P]>
  }




  export type factureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: factureWhereInput
    orderBy?: factureOrderByWithAggregationInput | factureOrderByWithAggregationInput[]
    by: FactureScalarFieldEnum[] | FactureScalarFieldEnum
    having?: factureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FactureCountAggregateInputType | true
    _avg?: FactureAvgAggregateInputType
    _sum?: FactureSumAggregateInputType
    _min?: FactureMinAggregateInputType
    _max?: FactureMaxAggregateInputType
  }

  export type FactureGroupByOutputType = {
    id: number
    clientId: number
    date: Date
    montantTotal: number
    _count: FactureCountAggregateOutputType | null
    _avg: FactureAvgAggregateOutputType | null
    _sum: FactureSumAggregateOutputType | null
    _min: FactureMinAggregateOutputType | null
    _max: FactureMaxAggregateOutputType | null
  }

  type GetFactureGroupByPayload<T extends factureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FactureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FactureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FactureGroupByOutputType[P]>
            : GetScalarType<T[P], FactureGroupByOutputType[P]>
        }
      >
    >


  export type factureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    date?: boolean
    montantTotal?: boolean
    client?: boolean | clientDefaultArgs<ExtArgs>
    lignefacture?: boolean | facture$lignefactureArgs<ExtArgs>
    _count?: boolean | FactureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["facture"]>

  export type factureSelectScalar = {
    id?: boolean
    clientId?: boolean
    date?: boolean
    montantTotal?: boolean
  }


  export type factureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | clientDefaultArgs<ExtArgs>
    lignefacture?: boolean | facture$lignefactureArgs<ExtArgs>
    _count?: boolean | FactureCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $facturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "facture"
    objects: {
      client: Prisma.$clientPayload<ExtArgs>
      lignefacture: Prisma.$lignefacturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clientId: number
      date: Date
      montantTotal: number
    }, ExtArgs["result"]["facture"]>
    composites: {}
  }


  type factureGetPayload<S extends boolean | null | undefined | factureDefaultArgs> = $Result.GetResult<Prisma.$facturePayload, S>

  type factureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<factureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FactureCountAggregateInputType | true
    }

  export interface factureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['facture'], meta: { name: 'facture' } }
    /**
     * Find zero or one Facture that matches the filter.
     * @param {factureFindUniqueArgs} args - Arguments to find a Facture
     * @example
     * // Get one Facture
     * const facture = await prisma.facture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends factureFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, factureFindUniqueArgs<ExtArgs>>
    ): Prisma__factureClient<$Result.GetResult<Prisma.$facturePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Facture that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {factureFindUniqueOrThrowArgs} args - Arguments to find a Facture
     * @example
     * // Get one Facture
     * const facture = await prisma.facture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends factureFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, factureFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__factureClient<$Result.GetResult<Prisma.$facturePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Facture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {factureFindFirstArgs} args - Arguments to find a Facture
     * @example
     * // Get one Facture
     * const facture = await prisma.facture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends factureFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, factureFindFirstArgs<ExtArgs>>
    ): Prisma__factureClient<$Result.GetResult<Prisma.$facturePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Facture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {factureFindFirstOrThrowArgs} args - Arguments to find a Facture
     * @example
     * // Get one Facture
     * const facture = await prisma.facture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends factureFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, factureFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__factureClient<$Result.GetResult<Prisma.$facturePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Factures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {factureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Factures
     * const factures = await prisma.facture.findMany()
     * 
     * // Get first 10 Factures
     * const factures = await prisma.facture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const factureWithIdOnly = await prisma.facture.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends factureFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, factureFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$facturePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Facture.
     * @param {factureCreateArgs} args - Arguments to create a Facture.
     * @example
     * // Create one Facture
     * const Facture = await prisma.facture.create({
     *   data: {
     *     // ... data to create a Facture
     *   }
     * })
     * 
    **/
    create<T extends factureCreateArgs<ExtArgs>>(
      args: SelectSubset<T, factureCreateArgs<ExtArgs>>
    ): Prisma__factureClient<$Result.GetResult<Prisma.$facturePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Factures.
     * @param {factureCreateManyArgs} args - Arguments to create many Factures.
     * @example
     * // Create many Factures
     * const facture = await prisma.facture.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends factureCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, factureCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Facture.
     * @param {factureDeleteArgs} args - Arguments to delete one Facture.
     * @example
     * // Delete one Facture
     * const Facture = await prisma.facture.delete({
     *   where: {
     *     // ... filter to delete one Facture
     *   }
     * })
     * 
    **/
    delete<T extends factureDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, factureDeleteArgs<ExtArgs>>
    ): Prisma__factureClient<$Result.GetResult<Prisma.$facturePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Facture.
     * @param {factureUpdateArgs} args - Arguments to update one Facture.
     * @example
     * // Update one Facture
     * const facture = await prisma.facture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends factureUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, factureUpdateArgs<ExtArgs>>
    ): Prisma__factureClient<$Result.GetResult<Prisma.$facturePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Factures.
     * @param {factureDeleteManyArgs} args - Arguments to filter Factures to delete.
     * @example
     * // Delete a few Factures
     * const { count } = await prisma.facture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends factureDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, factureDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Factures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {factureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Factures
     * const facture = await prisma.facture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends factureUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, factureUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Facture.
     * @param {factureUpsertArgs} args - Arguments to update or create a Facture.
     * @example
     * // Update or create a Facture
     * const facture = await prisma.facture.upsert({
     *   create: {
     *     // ... data to create a Facture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Facture we want to update
     *   }
     * })
    **/
    upsert<T extends factureUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, factureUpsertArgs<ExtArgs>>
    ): Prisma__factureClient<$Result.GetResult<Prisma.$facturePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Factures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {factureCountArgs} args - Arguments to filter Factures to count.
     * @example
     * // Count the number of Factures
     * const count = await prisma.facture.count({
     *   where: {
     *     // ... the filter for the Factures we want to count
     *   }
     * })
    **/
    count<T extends factureCountArgs>(
      args?: Subset<T, factureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FactureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Facture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FactureAggregateArgs>(args: Subset<T, FactureAggregateArgs>): Prisma.PrismaPromise<GetFactureAggregateType<T>>

    /**
     * Group by Facture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {factureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends factureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: factureGroupByArgs['orderBy'] }
        : { orderBy?: factureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, factureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFactureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the facture model
   */
  readonly fields: factureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for facture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__factureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    client<T extends clientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, clientDefaultArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    lignefacture<T extends facture$lignefactureArgs<ExtArgs> = {}>(args?: Subset<T, facture$lignefactureArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lignefacturePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the facture model
   */ 
  interface factureFieldRefs {
    readonly id: FieldRef<"facture", 'Int'>
    readonly clientId: FieldRef<"facture", 'Int'>
    readonly date: FieldRef<"facture", 'DateTime'>
    readonly montantTotal: FieldRef<"facture", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * facture findUnique
   */
  export type factureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facture
     */
    select?: factureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: factureInclude<ExtArgs> | null
    /**
     * Filter, which facture to fetch.
     */
    where: factureWhereUniqueInput
  }

  /**
   * facture findUniqueOrThrow
   */
  export type factureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facture
     */
    select?: factureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: factureInclude<ExtArgs> | null
    /**
     * Filter, which facture to fetch.
     */
    where: factureWhereUniqueInput
  }

  /**
   * facture findFirst
   */
  export type factureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facture
     */
    select?: factureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: factureInclude<ExtArgs> | null
    /**
     * Filter, which facture to fetch.
     */
    where?: factureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of factures to fetch.
     */
    orderBy?: factureOrderByWithRelationInput | factureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for factures.
     */
    cursor?: factureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` factures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` factures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of factures.
     */
    distinct?: FactureScalarFieldEnum | FactureScalarFieldEnum[]
  }

  /**
   * facture findFirstOrThrow
   */
  export type factureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facture
     */
    select?: factureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: factureInclude<ExtArgs> | null
    /**
     * Filter, which facture to fetch.
     */
    where?: factureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of factures to fetch.
     */
    orderBy?: factureOrderByWithRelationInput | factureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for factures.
     */
    cursor?: factureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` factures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` factures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of factures.
     */
    distinct?: FactureScalarFieldEnum | FactureScalarFieldEnum[]
  }

  /**
   * facture findMany
   */
  export type factureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facture
     */
    select?: factureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: factureInclude<ExtArgs> | null
    /**
     * Filter, which factures to fetch.
     */
    where?: factureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of factures to fetch.
     */
    orderBy?: factureOrderByWithRelationInput | factureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing factures.
     */
    cursor?: factureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` factures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` factures.
     */
    skip?: number
    distinct?: FactureScalarFieldEnum | FactureScalarFieldEnum[]
  }

  /**
   * facture create
   */
  export type factureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facture
     */
    select?: factureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: factureInclude<ExtArgs> | null
    /**
     * The data needed to create a facture.
     */
    data: XOR<factureCreateInput, factureUncheckedCreateInput>
  }

  /**
   * facture createMany
   */
  export type factureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many factures.
     */
    data: factureCreateManyInput | factureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * facture update
   */
  export type factureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facture
     */
    select?: factureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: factureInclude<ExtArgs> | null
    /**
     * The data needed to update a facture.
     */
    data: XOR<factureUpdateInput, factureUncheckedUpdateInput>
    /**
     * Choose, which facture to update.
     */
    where: factureWhereUniqueInput
  }

  /**
   * facture updateMany
   */
  export type factureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update factures.
     */
    data: XOR<factureUpdateManyMutationInput, factureUncheckedUpdateManyInput>
    /**
     * Filter which factures to update
     */
    where?: factureWhereInput
  }

  /**
   * facture upsert
   */
  export type factureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facture
     */
    select?: factureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: factureInclude<ExtArgs> | null
    /**
     * The filter to search for the facture to update in case it exists.
     */
    where: factureWhereUniqueInput
    /**
     * In case the facture found by the `where` argument doesn't exist, create a new facture with this data.
     */
    create: XOR<factureCreateInput, factureUncheckedCreateInput>
    /**
     * In case the facture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<factureUpdateInput, factureUncheckedUpdateInput>
  }

  /**
   * facture delete
   */
  export type factureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facture
     */
    select?: factureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: factureInclude<ExtArgs> | null
    /**
     * Filter which facture to delete.
     */
    where: factureWhereUniqueInput
  }

  /**
   * facture deleteMany
   */
  export type factureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which factures to delete
     */
    where?: factureWhereInput
  }

  /**
   * facture.lignefacture
   */
  export type facture$lignefactureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lignefacture
     */
    select?: lignefactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lignefactureInclude<ExtArgs> | null
    where?: lignefactureWhereInput
    orderBy?: lignefactureOrderByWithRelationInput | lignefactureOrderByWithRelationInput[]
    cursor?: lignefactureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LignefactureScalarFieldEnum | LignefactureScalarFieldEnum[]
  }

  /**
   * facture without action
   */
  export type factureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facture
     */
    select?: factureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: factureInclude<ExtArgs> | null
  }


  /**
   * Model fournisseur
   */

  export type AggregateFournisseur = {
    _count: FournisseurCountAggregateOutputType | null
    _avg: FournisseurAvgAggregateOutputType | null
    _sum: FournisseurSumAggregateOutputType | null
    _min: FournisseurMinAggregateOutputType | null
    _max: FournisseurMaxAggregateOutputType | null
  }

  export type FournisseurAvgAggregateOutputType = {
    id: number | null
  }

  export type FournisseurSumAggregateOutputType = {
    id: number | null
  }

  export type FournisseurMinAggregateOutputType = {
    id: number | null
    nom: string | null
    adresse: string | null
    ville: string | null
    numeroTelephone: string | null
    email: string | null
  }

  export type FournisseurMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    adresse: string | null
    ville: string | null
    numeroTelephone: string | null
    email: string | null
  }

  export type FournisseurCountAggregateOutputType = {
    id: number
    nom: number
    adresse: number
    ville: number
    numeroTelephone: number
    email: number
    _all: number
  }


  export type FournisseurAvgAggregateInputType = {
    id?: true
  }

  export type FournisseurSumAggregateInputType = {
    id?: true
  }

  export type FournisseurMinAggregateInputType = {
    id?: true
    nom?: true
    adresse?: true
    ville?: true
    numeroTelephone?: true
    email?: true
  }

  export type FournisseurMaxAggregateInputType = {
    id?: true
    nom?: true
    adresse?: true
    ville?: true
    numeroTelephone?: true
    email?: true
  }

  export type FournisseurCountAggregateInputType = {
    id?: true
    nom?: true
    adresse?: true
    ville?: true
    numeroTelephone?: true
    email?: true
    _all?: true
  }

  export type FournisseurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which fournisseur to aggregate.
     */
    where?: fournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fournisseurs to fetch.
     */
    orderBy?: fournisseurOrderByWithRelationInput | fournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: fournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned fournisseurs
    **/
    _count?: true | FournisseurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FournisseurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FournisseurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FournisseurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FournisseurMaxAggregateInputType
  }

  export type GetFournisseurAggregateType<T extends FournisseurAggregateArgs> = {
        [P in keyof T & keyof AggregateFournisseur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFournisseur[P]>
      : GetScalarType<T[P], AggregateFournisseur[P]>
  }




  export type fournisseurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: fournisseurWhereInput
    orderBy?: fournisseurOrderByWithAggregationInput | fournisseurOrderByWithAggregationInput[]
    by: FournisseurScalarFieldEnum[] | FournisseurScalarFieldEnum
    having?: fournisseurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FournisseurCountAggregateInputType | true
    _avg?: FournisseurAvgAggregateInputType
    _sum?: FournisseurSumAggregateInputType
    _min?: FournisseurMinAggregateInputType
    _max?: FournisseurMaxAggregateInputType
  }

  export type FournisseurGroupByOutputType = {
    id: number
    nom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
    _count: FournisseurCountAggregateOutputType | null
    _avg: FournisseurAvgAggregateOutputType | null
    _sum: FournisseurSumAggregateOutputType | null
    _min: FournisseurMinAggregateOutputType | null
    _max: FournisseurMaxAggregateOutputType | null
  }

  type GetFournisseurGroupByPayload<T extends fournisseurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FournisseurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FournisseurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FournisseurGroupByOutputType[P]>
            : GetScalarType<T[P], FournisseurGroupByOutputType[P]>
        }
      >
    >


  export type fournisseurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    adresse?: boolean
    ville?: boolean
    numeroTelephone?: boolean
    email?: boolean
    commandefournisseur?: boolean | fournisseur$commandefournisseurArgs<ExtArgs>
    _count?: boolean | FournisseurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fournisseur"]>

  export type fournisseurSelectScalar = {
    id?: boolean
    nom?: boolean
    adresse?: boolean
    ville?: boolean
    numeroTelephone?: boolean
    email?: boolean
  }


  export type fournisseurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commandefournisseur?: boolean | fournisseur$commandefournisseurArgs<ExtArgs>
    _count?: boolean | FournisseurCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $fournisseurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "fournisseur"
    objects: {
      commandefournisseur: Prisma.$commandefournisseurPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      adresse: string
      ville: string
      numeroTelephone: string
      email: string
    }, ExtArgs["result"]["fournisseur"]>
    composites: {}
  }


  type fournisseurGetPayload<S extends boolean | null | undefined | fournisseurDefaultArgs> = $Result.GetResult<Prisma.$fournisseurPayload, S>

  type fournisseurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<fournisseurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FournisseurCountAggregateInputType | true
    }

  export interface fournisseurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['fournisseur'], meta: { name: 'fournisseur' } }
    /**
     * Find zero or one Fournisseur that matches the filter.
     * @param {fournisseurFindUniqueArgs} args - Arguments to find a Fournisseur
     * @example
     * // Get one Fournisseur
     * const fournisseur = await prisma.fournisseur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends fournisseurFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, fournisseurFindUniqueArgs<ExtArgs>>
    ): Prisma__fournisseurClient<$Result.GetResult<Prisma.$fournisseurPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Fournisseur that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {fournisseurFindUniqueOrThrowArgs} args - Arguments to find a Fournisseur
     * @example
     * // Get one Fournisseur
     * const fournisseur = await prisma.fournisseur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends fournisseurFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, fournisseurFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__fournisseurClient<$Result.GetResult<Prisma.$fournisseurPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Fournisseur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fournisseurFindFirstArgs} args - Arguments to find a Fournisseur
     * @example
     * // Get one Fournisseur
     * const fournisseur = await prisma.fournisseur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends fournisseurFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, fournisseurFindFirstArgs<ExtArgs>>
    ): Prisma__fournisseurClient<$Result.GetResult<Prisma.$fournisseurPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Fournisseur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fournisseurFindFirstOrThrowArgs} args - Arguments to find a Fournisseur
     * @example
     * // Get one Fournisseur
     * const fournisseur = await prisma.fournisseur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends fournisseurFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, fournisseurFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__fournisseurClient<$Result.GetResult<Prisma.$fournisseurPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Fournisseurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fournisseurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fournisseurs
     * const fournisseurs = await prisma.fournisseur.findMany()
     * 
     * // Get first 10 Fournisseurs
     * const fournisseurs = await prisma.fournisseur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fournisseurWithIdOnly = await prisma.fournisseur.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends fournisseurFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, fournisseurFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$fournisseurPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Fournisseur.
     * @param {fournisseurCreateArgs} args - Arguments to create a Fournisseur.
     * @example
     * // Create one Fournisseur
     * const Fournisseur = await prisma.fournisseur.create({
     *   data: {
     *     // ... data to create a Fournisseur
     *   }
     * })
     * 
    **/
    create<T extends fournisseurCreateArgs<ExtArgs>>(
      args: SelectSubset<T, fournisseurCreateArgs<ExtArgs>>
    ): Prisma__fournisseurClient<$Result.GetResult<Prisma.$fournisseurPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Fournisseurs.
     * @param {fournisseurCreateManyArgs} args - Arguments to create many Fournisseurs.
     * @example
     * // Create many Fournisseurs
     * const fournisseur = await prisma.fournisseur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends fournisseurCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, fournisseurCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Fournisseur.
     * @param {fournisseurDeleteArgs} args - Arguments to delete one Fournisseur.
     * @example
     * // Delete one Fournisseur
     * const Fournisseur = await prisma.fournisseur.delete({
     *   where: {
     *     // ... filter to delete one Fournisseur
     *   }
     * })
     * 
    **/
    delete<T extends fournisseurDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, fournisseurDeleteArgs<ExtArgs>>
    ): Prisma__fournisseurClient<$Result.GetResult<Prisma.$fournisseurPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Fournisseur.
     * @param {fournisseurUpdateArgs} args - Arguments to update one Fournisseur.
     * @example
     * // Update one Fournisseur
     * const fournisseur = await prisma.fournisseur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends fournisseurUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, fournisseurUpdateArgs<ExtArgs>>
    ): Prisma__fournisseurClient<$Result.GetResult<Prisma.$fournisseurPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Fournisseurs.
     * @param {fournisseurDeleteManyArgs} args - Arguments to filter Fournisseurs to delete.
     * @example
     * // Delete a few Fournisseurs
     * const { count } = await prisma.fournisseur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends fournisseurDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, fournisseurDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fournisseurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fournisseurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fournisseurs
     * const fournisseur = await prisma.fournisseur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends fournisseurUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, fournisseurUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fournisseur.
     * @param {fournisseurUpsertArgs} args - Arguments to update or create a Fournisseur.
     * @example
     * // Update or create a Fournisseur
     * const fournisseur = await prisma.fournisseur.upsert({
     *   create: {
     *     // ... data to create a Fournisseur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fournisseur we want to update
     *   }
     * })
    **/
    upsert<T extends fournisseurUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, fournisseurUpsertArgs<ExtArgs>>
    ): Prisma__fournisseurClient<$Result.GetResult<Prisma.$fournisseurPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Fournisseurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fournisseurCountArgs} args - Arguments to filter Fournisseurs to count.
     * @example
     * // Count the number of Fournisseurs
     * const count = await prisma.fournisseur.count({
     *   where: {
     *     // ... the filter for the Fournisseurs we want to count
     *   }
     * })
    **/
    count<T extends fournisseurCountArgs>(
      args?: Subset<T, fournisseurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FournisseurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fournisseur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FournisseurAggregateArgs>(args: Subset<T, FournisseurAggregateArgs>): Prisma.PrismaPromise<GetFournisseurAggregateType<T>>

    /**
     * Group by Fournisseur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fournisseurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends fournisseurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: fournisseurGroupByArgs['orderBy'] }
        : { orderBy?: fournisseurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, fournisseurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFournisseurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the fournisseur model
   */
  readonly fields: fournisseurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for fournisseur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__fournisseurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    commandefournisseur<T extends fournisseur$commandefournisseurArgs<ExtArgs> = {}>(args?: Subset<T, fournisseur$commandefournisseurArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commandefournisseurPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the fournisseur model
   */ 
  interface fournisseurFieldRefs {
    readonly id: FieldRef<"fournisseur", 'Int'>
    readonly nom: FieldRef<"fournisseur", 'String'>
    readonly adresse: FieldRef<"fournisseur", 'String'>
    readonly ville: FieldRef<"fournisseur", 'String'>
    readonly numeroTelephone: FieldRef<"fournisseur", 'String'>
    readonly email: FieldRef<"fournisseur", 'String'>
  }
    

  // Custom InputTypes
  /**
   * fournisseur findUnique
   */
  export type fournisseurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fournisseur
     */
    select?: fournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fournisseurInclude<ExtArgs> | null
    /**
     * Filter, which fournisseur to fetch.
     */
    where: fournisseurWhereUniqueInput
  }

  /**
   * fournisseur findUniqueOrThrow
   */
  export type fournisseurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fournisseur
     */
    select?: fournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fournisseurInclude<ExtArgs> | null
    /**
     * Filter, which fournisseur to fetch.
     */
    where: fournisseurWhereUniqueInput
  }

  /**
   * fournisseur findFirst
   */
  export type fournisseurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fournisseur
     */
    select?: fournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fournisseurInclude<ExtArgs> | null
    /**
     * Filter, which fournisseur to fetch.
     */
    where?: fournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fournisseurs to fetch.
     */
    orderBy?: fournisseurOrderByWithRelationInput | fournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fournisseurs.
     */
    cursor?: fournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fournisseurs.
     */
    distinct?: FournisseurScalarFieldEnum | FournisseurScalarFieldEnum[]
  }

  /**
   * fournisseur findFirstOrThrow
   */
  export type fournisseurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fournisseur
     */
    select?: fournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fournisseurInclude<ExtArgs> | null
    /**
     * Filter, which fournisseur to fetch.
     */
    where?: fournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fournisseurs to fetch.
     */
    orderBy?: fournisseurOrderByWithRelationInput | fournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fournisseurs.
     */
    cursor?: fournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fournisseurs.
     */
    distinct?: FournisseurScalarFieldEnum | FournisseurScalarFieldEnum[]
  }

  /**
   * fournisseur findMany
   */
  export type fournisseurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fournisseur
     */
    select?: fournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fournisseurInclude<ExtArgs> | null
    /**
     * Filter, which fournisseurs to fetch.
     */
    where?: fournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fournisseurs to fetch.
     */
    orderBy?: fournisseurOrderByWithRelationInput | fournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing fournisseurs.
     */
    cursor?: fournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fournisseurs.
     */
    skip?: number
    distinct?: FournisseurScalarFieldEnum | FournisseurScalarFieldEnum[]
  }

  /**
   * fournisseur create
   */
  export type fournisseurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fournisseur
     */
    select?: fournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fournisseurInclude<ExtArgs> | null
    /**
     * The data needed to create a fournisseur.
     */
    data: XOR<fournisseurCreateInput, fournisseurUncheckedCreateInput>
  }

  /**
   * fournisseur createMany
   */
  export type fournisseurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many fournisseurs.
     */
    data: fournisseurCreateManyInput | fournisseurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * fournisseur update
   */
  export type fournisseurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fournisseur
     */
    select?: fournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fournisseurInclude<ExtArgs> | null
    /**
     * The data needed to update a fournisseur.
     */
    data: XOR<fournisseurUpdateInput, fournisseurUncheckedUpdateInput>
    /**
     * Choose, which fournisseur to update.
     */
    where: fournisseurWhereUniqueInput
  }

  /**
   * fournisseur updateMany
   */
  export type fournisseurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update fournisseurs.
     */
    data: XOR<fournisseurUpdateManyMutationInput, fournisseurUncheckedUpdateManyInput>
    /**
     * Filter which fournisseurs to update
     */
    where?: fournisseurWhereInput
  }

  /**
   * fournisseur upsert
   */
  export type fournisseurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fournisseur
     */
    select?: fournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fournisseurInclude<ExtArgs> | null
    /**
     * The filter to search for the fournisseur to update in case it exists.
     */
    where: fournisseurWhereUniqueInput
    /**
     * In case the fournisseur found by the `where` argument doesn't exist, create a new fournisseur with this data.
     */
    create: XOR<fournisseurCreateInput, fournisseurUncheckedCreateInput>
    /**
     * In case the fournisseur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<fournisseurUpdateInput, fournisseurUncheckedUpdateInput>
  }

  /**
   * fournisseur delete
   */
  export type fournisseurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fournisseur
     */
    select?: fournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fournisseurInclude<ExtArgs> | null
    /**
     * Filter which fournisseur to delete.
     */
    where: fournisseurWhereUniqueInput
  }

  /**
   * fournisseur deleteMany
   */
  export type fournisseurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which fournisseurs to delete
     */
    where?: fournisseurWhereInput
  }

  /**
   * fournisseur.commandefournisseur
   */
  export type fournisseur$commandefournisseurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commandefournisseur
     */
    select?: commandefournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commandefournisseurInclude<ExtArgs> | null
    where?: commandefournisseurWhereInput
    orderBy?: commandefournisseurOrderByWithRelationInput | commandefournisseurOrderByWithRelationInput[]
    cursor?: commandefournisseurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommandefournisseurScalarFieldEnum | CommandefournisseurScalarFieldEnum[]
  }

  /**
   * fournisseur without action
   */
  export type fournisseurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fournisseur
     */
    select?: fournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fournisseurInclude<ExtArgs> | null
  }


  /**
   * Model lignefacture
   */

  export type AggregateLignefacture = {
    _count: LignefactureCountAggregateOutputType | null
    _avg: LignefactureAvgAggregateOutputType | null
    _sum: LignefactureSumAggregateOutputType | null
    _min: LignefactureMinAggregateOutputType | null
    _max: LignefactureMaxAggregateOutputType | null
  }

  export type LignefactureAvgAggregateOutputType = {
    id: number | null
    factureId: number | null
    produitId: number | null
    quantite: number | null
    prixUnitaire: number | null
    sousTotal: number | null
  }

  export type LignefactureSumAggregateOutputType = {
    id: number | null
    factureId: number | null
    produitId: number | null
    quantite: number | null
    prixUnitaire: number | null
    sousTotal: number | null
  }

  export type LignefactureMinAggregateOutputType = {
    id: number | null
    factureId: number | null
    produitId: number | null
    quantite: number | null
    prixUnitaire: number | null
    sousTotal: number | null
  }

  export type LignefactureMaxAggregateOutputType = {
    id: number | null
    factureId: number | null
    produitId: number | null
    quantite: number | null
    prixUnitaire: number | null
    sousTotal: number | null
  }

  export type LignefactureCountAggregateOutputType = {
    id: number
    factureId: number
    produitId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
    _all: number
  }


  export type LignefactureAvgAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
    prixUnitaire?: true
    sousTotal?: true
  }

  export type LignefactureSumAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
    prixUnitaire?: true
    sousTotal?: true
  }

  export type LignefactureMinAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
    prixUnitaire?: true
    sousTotal?: true
  }

  export type LignefactureMaxAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
    prixUnitaire?: true
    sousTotal?: true
  }

  export type LignefactureCountAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
    prixUnitaire?: true
    sousTotal?: true
    _all?: true
  }

  export type LignefactureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lignefacture to aggregate.
     */
    where?: lignefactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lignefactures to fetch.
     */
    orderBy?: lignefactureOrderByWithRelationInput | lignefactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: lignefactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lignefactures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lignefactures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lignefactures
    **/
    _count?: true | LignefactureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LignefactureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LignefactureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LignefactureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LignefactureMaxAggregateInputType
  }

  export type GetLignefactureAggregateType<T extends LignefactureAggregateArgs> = {
        [P in keyof T & keyof AggregateLignefacture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLignefacture[P]>
      : GetScalarType<T[P], AggregateLignefacture[P]>
  }




  export type lignefactureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: lignefactureWhereInput
    orderBy?: lignefactureOrderByWithAggregationInput | lignefactureOrderByWithAggregationInput[]
    by: LignefactureScalarFieldEnum[] | LignefactureScalarFieldEnum
    having?: lignefactureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LignefactureCountAggregateInputType | true
    _avg?: LignefactureAvgAggregateInputType
    _sum?: LignefactureSumAggregateInputType
    _min?: LignefactureMinAggregateInputType
    _max?: LignefactureMaxAggregateInputType
  }

  export type LignefactureGroupByOutputType = {
    id: number
    factureId: number
    produitId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
    _count: LignefactureCountAggregateOutputType | null
    _avg: LignefactureAvgAggregateOutputType | null
    _sum: LignefactureSumAggregateOutputType | null
    _min: LignefactureMinAggregateOutputType | null
    _max: LignefactureMaxAggregateOutputType | null
  }

  type GetLignefactureGroupByPayload<T extends lignefactureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LignefactureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LignefactureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LignefactureGroupByOutputType[P]>
            : GetScalarType<T[P], LignefactureGroupByOutputType[P]>
        }
      >
    >


  export type lignefactureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    factureId?: boolean
    produitId?: boolean
    quantite?: boolean
    prixUnitaire?: boolean
    sousTotal?: boolean
    facture?: boolean | factureDefaultArgs<ExtArgs>
    produit?: boolean | produitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lignefacture"]>

  export type lignefactureSelectScalar = {
    id?: boolean
    factureId?: boolean
    produitId?: boolean
    quantite?: boolean
    prixUnitaire?: boolean
    sousTotal?: boolean
  }


  export type lignefactureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facture?: boolean | factureDefaultArgs<ExtArgs>
    produit?: boolean | produitDefaultArgs<ExtArgs>
  }


  export type $lignefacturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "lignefacture"
    objects: {
      facture: Prisma.$facturePayload<ExtArgs>
      produit: Prisma.$produitPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      factureId: number
      produitId: number
      quantite: number
      prixUnitaire: number
      sousTotal: number
    }, ExtArgs["result"]["lignefacture"]>
    composites: {}
  }


  type lignefactureGetPayload<S extends boolean | null | undefined | lignefactureDefaultArgs> = $Result.GetResult<Prisma.$lignefacturePayload, S>

  type lignefactureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<lignefactureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LignefactureCountAggregateInputType | true
    }

  export interface lignefactureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['lignefacture'], meta: { name: 'lignefacture' } }
    /**
     * Find zero or one Lignefacture that matches the filter.
     * @param {lignefactureFindUniqueArgs} args - Arguments to find a Lignefacture
     * @example
     * // Get one Lignefacture
     * const lignefacture = await prisma.lignefacture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends lignefactureFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, lignefactureFindUniqueArgs<ExtArgs>>
    ): Prisma__lignefactureClient<$Result.GetResult<Prisma.$lignefacturePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Lignefacture that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {lignefactureFindUniqueOrThrowArgs} args - Arguments to find a Lignefacture
     * @example
     * // Get one Lignefacture
     * const lignefacture = await prisma.lignefacture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends lignefactureFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, lignefactureFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__lignefactureClient<$Result.GetResult<Prisma.$lignefacturePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Lignefacture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lignefactureFindFirstArgs} args - Arguments to find a Lignefacture
     * @example
     * // Get one Lignefacture
     * const lignefacture = await prisma.lignefacture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends lignefactureFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, lignefactureFindFirstArgs<ExtArgs>>
    ): Prisma__lignefactureClient<$Result.GetResult<Prisma.$lignefacturePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Lignefacture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lignefactureFindFirstOrThrowArgs} args - Arguments to find a Lignefacture
     * @example
     * // Get one Lignefacture
     * const lignefacture = await prisma.lignefacture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends lignefactureFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, lignefactureFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__lignefactureClient<$Result.GetResult<Prisma.$lignefacturePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Lignefactures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lignefactureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lignefactures
     * const lignefactures = await prisma.lignefacture.findMany()
     * 
     * // Get first 10 Lignefactures
     * const lignefactures = await prisma.lignefacture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lignefactureWithIdOnly = await prisma.lignefacture.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends lignefactureFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, lignefactureFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lignefacturePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Lignefacture.
     * @param {lignefactureCreateArgs} args - Arguments to create a Lignefacture.
     * @example
     * // Create one Lignefacture
     * const Lignefacture = await prisma.lignefacture.create({
     *   data: {
     *     // ... data to create a Lignefacture
     *   }
     * })
     * 
    **/
    create<T extends lignefactureCreateArgs<ExtArgs>>(
      args: SelectSubset<T, lignefactureCreateArgs<ExtArgs>>
    ): Prisma__lignefactureClient<$Result.GetResult<Prisma.$lignefacturePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Lignefactures.
     * @param {lignefactureCreateManyArgs} args - Arguments to create many Lignefactures.
     * @example
     * // Create many Lignefactures
     * const lignefacture = await prisma.lignefacture.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends lignefactureCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, lignefactureCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Lignefacture.
     * @param {lignefactureDeleteArgs} args - Arguments to delete one Lignefacture.
     * @example
     * // Delete one Lignefacture
     * const Lignefacture = await prisma.lignefacture.delete({
     *   where: {
     *     // ... filter to delete one Lignefacture
     *   }
     * })
     * 
    **/
    delete<T extends lignefactureDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, lignefactureDeleteArgs<ExtArgs>>
    ): Prisma__lignefactureClient<$Result.GetResult<Prisma.$lignefacturePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Lignefacture.
     * @param {lignefactureUpdateArgs} args - Arguments to update one Lignefacture.
     * @example
     * // Update one Lignefacture
     * const lignefacture = await prisma.lignefacture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends lignefactureUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, lignefactureUpdateArgs<ExtArgs>>
    ): Prisma__lignefactureClient<$Result.GetResult<Prisma.$lignefacturePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Lignefactures.
     * @param {lignefactureDeleteManyArgs} args - Arguments to filter Lignefactures to delete.
     * @example
     * // Delete a few Lignefactures
     * const { count } = await prisma.lignefacture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends lignefactureDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, lignefactureDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lignefactures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lignefactureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lignefactures
     * const lignefacture = await prisma.lignefacture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends lignefactureUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, lignefactureUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lignefacture.
     * @param {lignefactureUpsertArgs} args - Arguments to update or create a Lignefacture.
     * @example
     * // Update or create a Lignefacture
     * const lignefacture = await prisma.lignefacture.upsert({
     *   create: {
     *     // ... data to create a Lignefacture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lignefacture we want to update
     *   }
     * })
    **/
    upsert<T extends lignefactureUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, lignefactureUpsertArgs<ExtArgs>>
    ): Prisma__lignefactureClient<$Result.GetResult<Prisma.$lignefacturePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Lignefactures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lignefactureCountArgs} args - Arguments to filter Lignefactures to count.
     * @example
     * // Count the number of Lignefactures
     * const count = await prisma.lignefacture.count({
     *   where: {
     *     // ... the filter for the Lignefactures we want to count
     *   }
     * })
    **/
    count<T extends lignefactureCountArgs>(
      args?: Subset<T, lignefactureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LignefactureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lignefacture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LignefactureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LignefactureAggregateArgs>(args: Subset<T, LignefactureAggregateArgs>): Prisma.PrismaPromise<GetLignefactureAggregateType<T>>

    /**
     * Group by Lignefacture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lignefactureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends lignefactureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: lignefactureGroupByArgs['orderBy'] }
        : { orderBy?: lignefactureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, lignefactureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLignefactureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the lignefacture model
   */
  readonly fields: lignefactureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for lignefacture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__lignefactureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    facture<T extends factureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, factureDefaultArgs<ExtArgs>>): Prisma__factureClient<$Result.GetResult<Prisma.$facturePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    produit<T extends produitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, produitDefaultArgs<ExtArgs>>): Prisma__produitClient<$Result.GetResult<Prisma.$produitPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the lignefacture model
   */ 
  interface lignefactureFieldRefs {
    readonly id: FieldRef<"lignefacture", 'Int'>
    readonly factureId: FieldRef<"lignefacture", 'Int'>
    readonly produitId: FieldRef<"lignefacture", 'Int'>
    readonly quantite: FieldRef<"lignefacture", 'Int'>
    readonly prixUnitaire: FieldRef<"lignefacture", 'Float'>
    readonly sousTotal: FieldRef<"lignefacture", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * lignefacture findUnique
   */
  export type lignefactureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lignefacture
     */
    select?: lignefactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lignefactureInclude<ExtArgs> | null
    /**
     * Filter, which lignefacture to fetch.
     */
    where: lignefactureWhereUniqueInput
  }

  /**
   * lignefacture findUniqueOrThrow
   */
  export type lignefactureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lignefacture
     */
    select?: lignefactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lignefactureInclude<ExtArgs> | null
    /**
     * Filter, which lignefacture to fetch.
     */
    where: lignefactureWhereUniqueInput
  }

  /**
   * lignefacture findFirst
   */
  export type lignefactureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lignefacture
     */
    select?: lignefactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lignefactureInclude<ExtArgs> | null
    /**
     * Filter, which lignefacture to fetch.
     */
    where?: lignefactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lignefactures to fetch.
     */
    orderBy?: lignefactureOrderByWithRelationInput | lignefactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lignefactures.
     */
    cursor?: lignefactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lignefactures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lignefactures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lignefactures.
     */
    distinct?: LignefactureScalarFieldEnum | LignefactureScalarFieldEnum[]
  }

  /**
   * lignefacture findFirstOrThrow
   */
  export type lignefactureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lignefacture
     */
    select?: lignefactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lignefactureInclude<ExtArgs> | null
    /**
     * Filter, which lignefacture to fetch.
     */
    where?: lignefactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lignefactures to fetch.
     */
    orderBy?: lignefactureOrderByWithRelationInput | lignefactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lignefactures.
     */
    cursor?: lignefactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lignefactures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lignefactures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lignefactures.
     */
    distinct?: LignefactureScalarFieldEnum | LignefactureScalarFieldEnum[]
  }

  /**
   * lignefacture findMany
   */
  export type lignefactureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lignefacture
     */
    select?: lignefactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lignefactureInclude<ExtArgs> | null
    /**
     * Filter, which lignefactures to fetch.
     */
    where?: lignefactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lignefactures to fetch.
     */
    orderBy?: lignefactureOrderByWithRelationInput | lignefactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lignefactures.
     */
    cursor?: lignefactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lignefactures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lignefactures.
     */
    skip?: number
    distinct?: LignefactureScalarFieldEnum | LignefactureScalarFieldEnum[]
  }

  /**
   * lignefacture create
   */
  export type lignefactureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lignefacture
     */
    select?: lignefactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lignefactureInclude<ExtArgs> | null
    /**
     * The data needed to create a lignefacture.
     */
    data: XOR<lignefactureCreateInput, lignefactureUncheckedCreateInput>
  }

  /**
   * lignefacture createMany
   */
  export type lignefactureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many lignefactures.
     */
    data: lignefactureCreateManyInput | lignefactureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * lignefacture update
   */
  export type lignefactureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lignefacture
     */
    select?: lignefactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lignefactureInclude<ExtArgs> | null
    /**
     * The data needed to update a lignefacture.
     */
    data: XOR<lignefactureUpdateInput, lignefactureUncheckedUpdateInput>
    /**
     * Choose, which lignefacture to update.
     */
    where: lignefactureWhereUniqueInput
  }

  /**
   * lignefacture updateMany
   */
  export type lignefactureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update lignefactures.
     */
    data: XOR<lignefactureUpdateManyMutationInput, lignefactureUncheckedUpdateManyInput>
    /**
     * Filter which lignefactures to update
     */
    where?: lignefactureWhereInput
  }

  /**
   * lignefacture upsert
   */
  export type lignefactureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lignefacture
     */
    select?: lignefactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lignefactureInclude<ExtArgs> | null
    /**
     * The filter to search for the lignefacture to update in case it exists.
     */
    where: lignefactureWhereUniqueInput
    /**
     * In case the lignefacture found by the `where` argument doesn't exist, create a new lignefacture with this data.
     */
    create: XOR<lignefactureCreateInput, lignefactureUncheckedCreateInput>
    /**
     * In case the lignefacture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<lignefactureUpdateInput, lignefactureUncheckedUpdateInput>
  }

  /**
   * lignefacture delete
   */
  export type lignefactureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lignefacture
     */
    select?: lignefactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lignefactureInclude<ExtArgs> | null
    /**
     * Filter which lignefacture to delete.
     */
    where: lignefactureWhereUniqueInput
  }

  /**
   * lignefacture deleteMany
   */
  export type lignefactureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lignefactures to delete
     */
    where?: lignefactureWhereInput
  }

  /**
   * lignefacture without action
   */
  export type lignefactureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lignefacture
     */
    select?: lignefactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lignefactureInclude<ExtArgs> | null
  }


  /**
   * Model produit
   */

  export type AggregateProduit = {
    _count: ProduitCountAggregateOutputType | null
    _avg: ProduitAvgAggregateOutputType | null
    _sum: ProduitSumAggregateOutputType | null
    _min: ProduitMinAggregateOutputType | null
    _max: ProduitMaxAggregateOutputType | null
  }

  export type ProduitAvgAggregateOutputType = {
    id: number | null
    prixAchat: number | null
    prixVente: number | null
    tauxMarge: number | null
  }

  export type ProduitSumAggregateOutputType = {
    id: number | null
    prixAchat: number | null
    prixVente: number | null
    tauxMarge: number | null
  }

  export type ProduitMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prixAchat: number | null
    prixVente: number | null
    tauxMarge: number | null
    dimension: string | null
    taille: string | null
  }

  export type ProduitMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prixAchat: number | null
    prixVente: number | null
    tauxMarge: number | null
    dimension: string | null
    taille: string | null
  }

  export type ProduitCountAggregateOutputType = {
    id: number
    nom: number
    prixAchat: number
    prixVente: number
    tauxMarge: number
    dimension: number
    taille: number
    _all: number
  }


  export type ProduitAvgAggregateInputType = {
    id?: true
    prixAchat?: true
    prixVente?: true
    tauxMarge?: true
  }

  export type ProduitSumAggregateInputType = {
    id?: true
    prixAchat?: true
    prixVente?: true
    tauxMarge?: true
  }

  export type ProduitMinAggregateInputType = {
    id?: true
    nom?: true
    prixAchat?: true
    prixVente?: true
    tauxMarge?: true
    dimension?: true
    taille?: true
  }

  export type ProduitMaxAggregateInputType = {
    id?: true
    nom?: true
    prixAchat?: true
    prixVente?: true
    tauxMarge?: true
    dimension?: true
    taille?: true
  }

  export type ProduitCountAggregateInputType = {
    id?: true
    nom?: true
    prixAchat?: true
    prixVente?: true
    tauxMarge?: true
    dimension?: true
    taille?: true
    _all?: true
  }

  export type ProduitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which produit to aggregate.
     */
    where?: produitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produits to fetch.
     */
    orderBy?: produitOrderByWithRelationInput | produitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: produitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned produits
    **/
    _count?: true | ProduitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProduitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProduitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProduitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProduitMaxAggregateInputType
  }

  export type GetProduitAggregateType<T extends ProduitAggregateArgs> = {
        [P in keyof T & keyof AggregateProduit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduit[P]>
      : GetScalarType<T[P], AggregateProduit[P]>
  }




  export type produitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: produitWhereInput
    orderBy?: produitOrderByWithAggregationInput | produitOrderByWithAggregationInput[]
    by: ProduitScalarFieldEnum[] | ProduitScalarFieldEnum
    having?: produitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProduitCountAggregateInputType | true
    _avg?: ProduitAvgAggregateInputType
    _sum?: ProduitSumAggregateInputType
    _min?: ProduitMinAggregateInputType
    _max?: ProduitMaxAggregateInputType
  }

  export type ProduitGroupByOutputType = {
    id: number
    nom: string
    prixAchat: number
    prixVente: number
    tauxMarge: number
    dimension: string
    taille: string
    _count: ProduitCountAggregateOutputType | null
    _avg: ProduitAvgAggregateOutputType | null
    _sum: ProduitSumAggregateOutputType | null
    _min: ProduitMinAggregateOutputType | null
    _max: ProduitMaxAggregateOutputType | null
  }

  type GetProduitGroupByPayload<T extends produitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProduitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProduitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProduitGroupByOutputType[P]>
            : GetScalarType<T[P], ProduitGroupByOutputType[P]>
        }
      >
    >


  export type produitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prixAchat?: boolean
    prixVente?: boolean
    tauxMarge?: boolean
    dimension?: boolean
    taille?: boolean
    lignefacture?: boolean | produit$lignefactureArgs<ExtArgs>
    _count?: boolean | ProduitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produit"]>

  export type produitSelectScalar = {
    id?: boolean
    nom?: boolean
    prixAchat?: boolean
    prixVente?: boolean
    tauxMarge?: boolean
    dimension?: boolean
    taille?: boolean
  }


  export type produitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lignefacture?: boolean | produit$lignefactureArgs<ExtArgs>
    _count?: boolean | ProduitCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $produitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "produit"
    objects: {
      lignefacture: Prisma.$lignefacturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      prixAchat: number
      prixVente: number
      tauxMarge: number
      dimension: string
      taille: string
    }, ExtArgs["result"]["produit"]>
    composites: {}
  }


  type produitGetPayload<S extends boolean | null | undefined | produitDefaultArgs> = $Result.GetResult<Prisma.$produitPayload, S>

  type produitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<produitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProduitCountAggregateInputType | true
    }

  export interface produitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['produit'], meta: { name: 'produit' } }
    /**
     * Find zero or one Produit that matches the filter.
     * @param {produitFindUniqueArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends produitFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, produitFindUniqueArgs<ExtArgs>>
    ): Prisma__produitClient<$Result.GetResult<Prisma.$produitPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Produit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {produitFindUniqueOrThrowArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends produitFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, produitFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__produitClient<$Result.GetResult<Prisma.$produitPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Produit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produitFindFirstArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends produitFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, produitFindFirstArgs<ExtArgs>>
    ): Prisma__produitClient<$Result.GetResult<Prisma.$produitPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Produit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produitFindFirstOrThrowArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends produitFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, produitFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__produitClient<$Result.GetResult<Prisma.$produitPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Produits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produits
     * const produits = await prisma.produit.findMany()
     * 
     * // Get first 10 Produits
     * const produits = await prisma.produit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produitWithIdOnly = await prisma.produit.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends produitFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, produitFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$produitPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Produit.
     * @param {produitCreateArgs} args - Arguments to create a Produit.
     * @example
     * // Create one Produit
     * const Produit = await prisma.produit.create({
     *   data: {
     *     // ... data to create a Produit
     *   }
     * })
     * 
    **/
    create<T extends produitCreateArgs<ExtArgs>>(
      args: SelectSubset<T, produitCreateArgs<ExtArgs>>
    ): Prisma__produitClient<$Result.GetResult<Prisma.$produitPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Produits.
     * @param {produitCreateManyArgs} args - Arguments to create many Produits.
     * @example
     * // Create many Produits
     * const produit = await prisma.produit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends produitCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, produitCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produit.
     * @param {produitDeleteArgs} args - Arguments to delete one Produit.
     * @example
     * // Delete one Produit
     * const Produit = await prisma.produit.delete({
     *   where: {
     *     // ... filter to delete one Produit
     *   }
     * })
     * 
    **/
    delete<T extends produitDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, produitDeleteArgs<ExtArgs>>
    ): Prisma__produitClient<$Result.GetResult<Prisma.$produitPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Produit.
     * @param {produitUpdateArgs} args - Arguments to update one Produit.
     * @example
     * // Update one Produit
     * const produit = await prisma.produit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends produitUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, produitUpdateArgs<ExtArgs>>
    ): Prisma__produitClient<$Result.GetResult<Prisma.$produitPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Produits.
     * @param {produitDeleteManyArgs} args - Arguments to filter Produits to delete.
     * @example
     * // Delete a few Produits
     * const { count } = await prisma.produit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends produitDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, produitDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produits
     * const produit = await prisma.produit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends produitUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, produitUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produit.
     * @param {produitUpsertArgs} args - Arguments to update or create a Produit.
     * @example
     * // Update or create a Produit
     * const produit = await prisma.produit.upsert({
     *   create: {
     *     // ... data to create a Produit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produit we want to update
     *   }
     * })
    **/
    upsert<T extends produitUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, produitUpsertArgs<ExtArgs>>
    ): Prisma__produitClient<$Result.GetResult<Prisma.$produitPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Produits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produitCountArgs} args - Arguments to filter Produits to count.
     * @example
     * // Count the number of Produits
     * const count = await prisma.produit.count({
     *   where: {
     *     // ... the filter for the Produits we want to count
     *   }
     * })
    **/
    count<T extends produitCountArgs>(
      args?: Subset<T, produitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProduitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProduitAggregateArgs>(args: Subset<T, ProduitAggregateArgs>): Prisma.PrismaPromise<GetProduitAggregateType<T>>

    /**
     * Group by Produit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends produitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: produitGroupByArgs['orderBy'] }
        : { orderBy?: produitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, produitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the produit model
   */
  readonly fields: produitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for produit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__produitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    lignefacture<T extends produit$lignefactureArgs<ExtArgs> = {}>(args?: Subset<T, produit$lignefactureArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lignefacturePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the produit model
   */ 
  interface produitFieldRefs {
    readonly id: FieldRef<"produit", 'Int'>
    readonly nom: FieldRef<"produit", 'String'>
    readonly prixAchat: FieldRef<"produit", 'Float'>
    readonly prixVente: FieldRef<"produit", 'Float'>
    readonly tauxMarge: FieldRef<"produit", 'Float'>
    readonly dimension: FieldRef<"produit", 'String'>
    readonly taille: FieldRef<"produit", 'String'>
  }
    

  // Custom InputTypes
  /**
   * produit findUnique
   */
  export type produitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produit
     */
    select?: produitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: produitInclude<ExtArgs> | null
    /**
     * Filter, which produit to fetch.
     */
    where: produitWhereUniqueInput
  }

  /**
   * produit findUniqueOrThrow
   */
  export type produitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produit
     */
    select?: produitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: produitInclude<ExtArgs> | null
    /**
     * Filter, which produit to fetch.
     */
    where: produitWhereUniqueInput
  }

  /**
   * produit findFirst
   */
  export type produitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produit
     */
    select?: produitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: produitInclude<ExtArgs> | null
    /**
     * Filter, which produit to fetch.
     */
    where?: produitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produits to fetch.
     */
    orderBy?: produitOrderByWithRelationInput | produitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for produits.
     */
    cursor?: produitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of produits.
     */
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * produit findFirstOrThrow
   */
  export type produitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produit
     */
    select?: produitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: produitInclude<ExtArgs> | null
    /**
     * Filter, which produit to fetch.
     */
    where?: produitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produits to fetch.
     */
    orderBy?: produitOrderByWithRelationInput | produitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for produits.
     */
    cursor?: produitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of produits.
     */
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * produit findMany
   */
  export type produitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produit
     */
    select?: produitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: produitInclude<ExtArgs> | null
    /**
     * Filter, which produits to fetch.
     */
    where?: produitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produits to fetch.
     */
    orderBy?: produitOrderByWithRelationInput | produitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing produits.
     */
    cursor?: produitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produits.
     */
    skip?: number
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * produit create
   */
  export type produitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produit
     */
    select?: produitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: produitInclude<ExtArgs> | null
    /**
     * The data needed to create a produit.
     */
    data: XOR<produitCreateInput, produitUncheckedCreateInput>
  }

  /**
   * produit createMany
   */
  export type produitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many produits.
     */
    data: produitCreateManyInput | produitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * produit update
   */
  export type produitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produit
     */
    select?: produitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: produitInclude<ExtArgs> | null
    /**
     * The data needed to update a produit.
     */
    data: XOR<produitUpdateInput, produitUncheckedUpdateInput>
    /**
     * Choose, which produit to update.
     */
    where: produitWhereUniqueInput
  }

  /**
   * produit updateMany
   */
  export type produitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update produits.
     */
    data: XOR<produitUpdateManyMutationInput, produitUncheckedUpdateManyInput>
    /**
     * Filter which produits to update
     */
    where?: produitWhereInput
  }

  /**
   * produit upsert
   */
  export type produitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produit
     */
    select?: produitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: produitInclude<ExtArgs> | null
    /**
     * The filter to search for the produit to update in case it exists.
     */
    where: produitWhereUniqueInput
    /**
     * In case the produit found by the `where` argument doesn't exist, create a new produit with this data.
     */
    create: XOR<produitCreateInput, produitUncheckedCreateInput>
    /**
     * In case the produit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<produitUpdateInput, produitUncheckedUpdateInput>
  }

  /**
   * produit delete
   */
  export type produitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produit
     */
    select?: produitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: produitInclude<ExtArgs> | null
    /**
     * Filter which produit to delete.
     */
    where: produitWhereUniqueInput
  }

  /**
   * produit deleteMany
   */
  export type produitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which produits to delete
     */
    where?: produitWhereInput
  }

  /**
   * produit.lignefacture
   */
  export type produit$lignefactureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lignefacture
     */
    select?: lignefactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lignefactureInclude<ExtArgs> | null
    where?: lignefactureWhereInput
    orderBy?: lignefactureOrderByWithRelationInput | lignefactureOrderByWithRelationInput[]
    cursor?: lignefactureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LignefactureScalarFieldEnum | LignefactureScalarFieldEnum[]
  }

  /**
   * produit without action
   */
  export type produitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produit
     */
    select?: produitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: produitInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClientScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prenom: 'prenom',
    adresse: 'adresse',
    ville: 'ville',
    numeroTelephone: 'numeroTelephone',
    email: 'email'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const CommandefournisseurScalarFieldEnum: {
    id: 'id',
    fournisseurId: 'fournisseurId',
    date: 'date',
    statut: 'statut'
  };

  export type CommandefournisseurScalarFieldEnum = (typeof CommandefournisseurScalarFieldEnum)[keyof typeof CommandefournisseurScalarFieldEnum]


  export const EntrepriseScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    siegeSocial: 'siegeSocial',
    dateCreation: 'dateCreation',
    identifiantFiscal: 'identifiantFiscal',
    capital: 'capital',
    nombreEmployes: 'nombreEmployes',
    ville: 'ville',
    responsable: 'responsable',
    numeroTelephone: 'numeroTelephone',
    email: 'email'
  };

  export type EntrepriseScalarFieldEnum = (typeof EntrepriseScalarFieldEnum)[keyof typeof EntrepriseScalarFieldEnum]


  export const FactureScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    date: 'date',
    montantTotal: 'montantTotal'
  };

  export type FactureScalarFieldEnum = (typeof FactureScalarFieldEnum)[keyof typeof FactureScalarFieldEnum]


  export const FournisseurScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    adresse: 'adresse',
    ville: 'ville',
    numeroTelephone: 'numeroTelephone',
    email: 'email'
  };

  export type FournisseurScalarFieldEnum = (typeof FournisseurScalarFieldEnum)[keyof typeof FournisseurScalarFieldEnum]


  export const LignefactureScalarFieldEnum: {
    id: 'id',
    factureId: 'factureId',
    produitId: 'produitId',
    quantite: 'quantite',
    prixUnitaire: 'prixUnitaire',
    sousTotal: 'sousTotal'
  };

  export type LignefactureScalarFieldEnum = (typeof LignefactureScalarFieldEnum)[keyof typeof LignefactureScalarFieldEnum]


  export const ProduitScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prixAchat: 'prixAchat',
    prixVente: 'prixVente',
    tauxMarge: 'tauxMarge',
    dimension: 'dimension',
    taille: 'taille'
  };

  export type ProduitScalarFieldEnum = (typeof ProduitScalarFieldEnum)[keyof typeof ProduitScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type clientWhereInput = {
    AND?: clientWhereInput | clientWhereInput[]
    OR?: clientWhereInput[]
    NOT?: clientWhereInput | clientWhereInput[]
    id?: IntFilter<"client"> | number
    nom?: StringFilter<"client"> | string
    prenom?: StringFilter<"client"> | string
    adresse?: StringFilter<"client"> | string
    ville?: StringFilter<"client"> | string
    numeroTelephone?: StringFilter<"client"> | string
    email?: StringFilter<"client"> | string
    facture?: FactureListRelationFilter
  }

  export type clientOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
    facture?: factureOrderByRelationAggregateInput
  }

  export type clientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: clientWhereInput | clientWhereInput[]
    OR?: clientWhereInput[]
    NOT?: clientWhereInput | clientWhereInput[]
    nom?: StringFilter<"client"> | string
    prenom?: StringFilter<"client"> | string
    adresse?: StringFilter<"client"> | string
    ville?: StringFilter<"client"> | string
    numeroTelephone?: StringFilter<"client"> | string
    email?: StringFilter<"client"> | string
    facture?: FactureListRelationFilter
  }, "id">

  export type clientOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
    _count?: clientCountOrderByAggregateInput
    _avg?: clientAvgOrderByAggregateInput
    _max?: clientMaxOrderByAggregateInput
    _min?: clientMinOrderByAggregateInput
    _sum?: clientSumOrderByAggregateInput
  }

  export type clientScalarWhereWithAggregatesInput = {
    AND?: clientScalarWhereWithAggregatesInput | clientScalarWhereWithAggregatesInput[]
    OR?: clientScalarWhereWithAggregatesInput[]
    NOT?: clientScalarWhereWithAggregatesInput | clientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"client"> | number
    nom?: StringWithAggregatesFilter<"client"> | string
    prenom?: StringWithAggregatesFilter<"client"> | string
    adresse?: StringWithAggregatesFilter<"client"> | string
    ville?: StringWithAggregatesFilter<"client"> | string
    numeroTelephone?: StringWithAggregatesFilter<"client"> | string
    email?: StringWithAggregatesFilter<"client"> | string
  }

  export type commandefournisseurWhereInput = {
    AND?: commandefournisseurWhereInput | commandefournisseurWhereInput[]
    OR?: commandefournisseurWhereInput[]
    NOT?: commandefournisseurWhereInput | commandefournisseurWhereInput[]
    id?: IntFilter<"commandefournisseur"> | number
    fournisseurId?: IntFilter<"commandefournisseur"> | number
    date?: DateTimeFilter<"commandefournisseur"> | Date | string
    statut?: StringFilter<"commandefournisseur"> | string
    fournisseur?: XOR<FournisseurRelationFilter, fournisseurWhereInput>
  }

  export type commandefournisseurOrderByWithRelationInput = {
    id?: SortOrder
    fournisseurId?: SortOrder
    date?: SortOrder
    statut?: SortOrder
    fournisseur?: fournisseurOrderByWithRelationInput
  }

  export type commandefournisseurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: commandefournisseurWhereInput | commandefournisseurWhereInput[]
    OR?: commandefournisseurWhereInput[]
    NOT?: commandefournisseurWhereInput | commandefournisseurWhereInput[]
    fournisseurId?: IntFilter<"commandefournisseur"> | number
    date?: DateTimeFilter<"commandefournisseur"> | Date | string
    statut?: StringFilter<"commandefournisseur"> | string
    fournisseur?: XOR<FournisseurRelationFilter, fournisseurWhereInput>
  }, "id">

  export type commandefournisseurOrderByWithAggregationInput = {
    id?: SortOrder
    fournisseurId?: SortOrder
    date?: SortOrder
    statut?: SortOrder
    _count?: commandefournisseurCountOrderByAggregateInput
    _avg?: commandefournisseurAvgOrderByAggregateInput
    _max?: commandefournisseurMaxOrderByAggregateInput
    _min?: commandefournisseurMinOrderByAggregateInput
    _sum?: commandefournisseurSumOrderByAggregateInput
  }

  export type commandefournisseurScalarWhereWithAggregatesInput = {
    AND?: commandefournisseurScalarWhereWithAggregatesInput | commandefournisseurScalarWhereWithAggregatesInput[]
    OR?: commandefournisseurScalarWhereWithAggregatesInput[]
    NOT?: commandefournisseurScalarWhereWithAggregatesInput | commandefournisseurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"commandefournisseur"> | number
    fournisseurId?: IntWithAggregatesFilter<"commandefournisseur"> | number
    date?: DateTimeWithAggregatesFilter<"commandefournisseur"> | Date | string
    statut?: StringWithAggregatesFilter<"commandefournisseur"> | string
  }

  export type entrepriseWhereInput = {
    AND?: entrepriseWhereInput | entrepriseWhereInput[]
    OR?: entrepriseWhereInput[]
    NOT?: entrepriseWhereInput | entrepriseWhereInput[]
    id?: IntFilter<"entreprise"> | number
    nom?: StringFilter<"entreprise"> | string
    siegeSocial?: StringFilter<"entreprise"> | string
    dateCreation?: DateTimeFilter<"entreprise"> | Date | string
    identifiantFiscal?: StringFilter<"entreprise"> | string
    capital?: FloatFilter<"entreprise"> | number
    nombreEmployes?: IntFilter<"entreprise"> | number
    ville?: StringFilter<"entreprise"> | string
    responsable?: StringFilter<"entreprise"> | string
    numeroTelephone?: StringFilter<"entreprise"> | string
    email?: StringFilter<"entreprise"> | string
  }

  export type entrepriseOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    siegeSocial?: SortOrder
    dateCreation?: SortOrder
    identifiantFiscal?: SortOrder
    capital?: SortOrder
    nombreEmployes?: SortOrder
    ville?: SortOrder
    responsable?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type entrepriseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: entrepriseWhereInput | entrepriseWhereInput[]
    OR?: entrepriseWhereInput[]
    NOT?: entrepriseWhereInput | entrepriseWhereInput[]
    nom?: StringFilter<"entreprise"> | string
    siegeSocial?: StringFilter<"entreprise"> | string
    dateCreation?: DateTimeFilter<"entreprise"> | Date | string
    identifiantFiscal?: StringFilter<"entreprise"> | string
    capital?: FloatFilter<"entreprise"> | number
    nombreEmployes?: IntFilter<"entreprise"> | number
    ville?: StringFilter<"entreprise"> | string
    responsable?: StringFilter<"entreprise"> | string
    numeroTelephone?: StringFilter<"entreprise"> | string
    email?: StringFilter<"entreprise"> | string
  }, "id">

  export type entrepriseOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    siegeSocial?: SortOrder
    dateCreation?: SortOrder
    identifiantFiscal?: SortOrder
    capital?: SortOrder
    nombreEmployes?: SortOrder
    ville?: SortOrder
    responsable?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
    _count?: entrepriseCountOrderByAggregateInput
    _avg?: entrepriseAvgOrderByAggregateInput
    _max?: entrepriseMaxOrderByAggregateInput
    _min?: entrepriseMinOrderByAggregateInput
    _sum?: entrepriseSumOrderByAggregateInput
  }

  export type entrepriseScalarWhereWithAggregatesInput = {
    AND?: entrepriseScalarWhereWithAggregatesInput | entrepriseScalarWhereWithAggregatesInput[]
    OR?: entrepriseScalarWhereWithAggregatesInput[]
    NOT?: entrepriseScalarWhereWithAggregatesInput | entrepriseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"entreprise"> | number
    nom?: StringWithAggregatesFilter<"entreprise"> | string
    siegeSocial?: StringWithAggregatesFilter<"entreprise"> | string
    dateCreation?: DateTimeWithAggregatesFilter<"entreprise"> | Date | string
    identifiantFiscal?: StringWithAggregatesFilter<"entreprise"> | string
    capital?: FloatWithAggregatesFilter<"entreprise"> | number
    nombreEmployes?: IntWithAggregatesFilter<"entreprise"> | number
    ville?: StringWithAggregatesFilter<"entreprise"> | string
    responsable?: StringWithAggregatesFilter<"entreprise"> | string
    numeroTelephone?: StringWithAggregatesFilter<"entreprise"> | string
    email?: StringWithAggregatesFilter<"entreprise"> | string
  }

  export type factureWhereInput = {
    AND?: factureWhereInput | factureWhereInput[]
    OR?: factureWhereInput[]
    NOT?: factureWhereInput | factureWhereInput[]
    id?: IntFilter<"facture"> | number
    clientId?: IntFilter<"facture"> | number
    date?: DateTimeFilter<"facture"> | Date | string
    montantTotal?: FloatFilter<"facture"> | number
    client?: XOR<ClientRelationFilter, clientWhereInput>
    lignefacture?: LignefactureListRelationFilter
  }

  export type factureOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    date?: SortOrder
    montantTotal?: SortOrder
    client?: clientOrderByWithRelationInput
    lignefacture?: lignefactureOrderByRelationAggregateInput
  }

  export type factureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: factureWhereInput | factureWhereInput[]
    OR?: factureWhereInput[]
    NOT?: factureWhereInput | factureWhereInput[]
    clientId?: IntFilter<"facture"> | number
    date?: DateTimeFilter<"facture"> | Date | string
    montantTotal?: FloatFilter<"facture"> | number
    client?: XOR<ClientRelationFilter, clientWhereInput>
    lignefacture?: LignefactureListRelationFilter
  }, "id">

  export type factureOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    date?: SortOrder
    montantTotal?: SortOrder
    _count?: factureCountOrderByAggregateInput
    _avg?: factureAvgOrderByAggregateInput
    _max?: factureMaxOrderByAggregateInput
    _min?: factureMinOrderByAggregateInput
    _sum?: factureSumOrderByAggregateInput
  }

  export type factureScalarWhereWithAggregatesInput = {
    AND?: factureScalarWhereWithAggregatesInput | factureScalarWhereWithAggregatesInput[]
    OR?: factureScalarWhereWithAggregatesInput[]
    NOT?: factureScalarWhereWithAggregatesInput | factureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"facture"> | number
    clientId?: IntWithAggregatesFilter<"facture"> | number
    date?: DateTimeWithAggregatesFilter<"facture"> | Date | string
    montantTotal?: FloatWithAggregatesFilter<"facture"> | number
  }

  export type fournisseurWhereInput = {
    AND?: fournisseurWhereInput | fournisseurWhereInput[]
    OR?: fournisseurWhereInput[]
    NOT?: fournisseurWhereInput | fournisseurWhereInput[]
    id?: IntFilter<"fournisseur"> | number
    nom?: StringFilter<"fournisseur"> | string
    adresse?: StringFilter<"fournisseur"> | string
    ville?: StringFilter<"fournisseur"> | string
    numeroTelephone?: StringFilter<"fournisseur"> | string
    email?: StringFilter<"fournisseur"> | string
    commandefournisseur?: CommandefournisseurListRelationFilter
  }

  export type fournisseurOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
    commandefournisseur?: commandefournisseurOrderByRelationAggregateInput
  }

  export type fournisseurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: fournisseurWhereInput | fournisseurWhereInput[]
    OR?: fournisseurWhereInput[]
    NOT?: fournisseurWhereInput | fournisseurWhereInput[]
    nom?: StringFilter<"fournisseur"> | string
    adresse?: StringFilter<"fournisseur"> | string
    ville?: StringFilter<"fournisseur"> | string
    numeroTelephone?: StringFilter<"fournisseur"> | string
    email?: StringFilter<"fournisseur"> | string
    commandefournisseur?: CommandefournisseurListRelationFilter
  }, "id">

  export type fournisseurOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
    _count?: fournisseurCountOrderByAggregateInput
    _avg?: fournisseurAvgOrderByAggregateInput
    _max?: fournisseurMaxOrderByAggregateInput
    _min?: fournisseurMinOrderByAggregateInput
    _sum?: fournisseurSumOrderByAggregateInput
  }

  export type fournisseurScalarWhereWithAggregatesInput = {
    AND?: fournisseurScalarWhereWithAggregatesInput | fournisseurScalarWhereWithAggregatesInput[]
    OR?: fournisseurScalarWhereWithAggregatesInput[]
    NOT?: fournisseurScalarWhereWithAggregatesInput | fournisseurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"fournisseur"> | number
    nom?: StringWithAggregatesFilter<"fournisseur"> | string
    adresse?: StringWithAggregatesFilter<"fournisseur"> | string
    ville?: StringWithAggregatesFilter<"fournisseur"> | string
    numeroTelephone?: StringWithAggregatesFilter<"fournisseur"> | string
    email?: StringWithAggregatesFilter<"fournisseur"> | string
  }

  export type lignefactureWhereInput = {
    AND?: lignefactureWhereInput | lignefactureWhereInput[]
    OR?: lignefactureWhereInput[]
    NOT?: lignefactureWhereInput | lignefactureWhereInput[]
    id?: IntFilter<"lignefacture"> | number
    factureId?: IntFilter<"lignefacture"> | number
    produitId?: IntFilter<"lignefacture"> | number
    quantite?: IntFilter<"lignefacture"> | number
    prixUnitaire?: FloatFilter<"lignefacture"> | number
    sousTotal?: FloatFilter<"lignefacture"> | number
    facture?: XOR<FactureRelationFilter, factureWhereInput>
    produit?: XOR<ProduitRelationFilter, produitWhereInput>
  }

  export type lignefactureOrderByWithRelationInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixUnitaire?: SortOrder
    sousTotal?: SortOrder
    facture?: factureOrderByWithRelationInput
    produit?: produitOrderByWithRelationInput
  }

  export type lignefactureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: lignefactureWhereInput | lignefactureWhereInput[]
    OR?: lignefactureWhereInput[]
    NOT?: lignefactureWhereInput | lignefactureWhereInput[]
    factureId?: IntFilter<"lignefacture"> | number
    produitId?: IntFilter<"lignefacture"> | number
    quantite?: IntFilter<"lignefacture"> | number
    prixUnitaire?: FloatFilter<"lignefacture"> | number
    sousTotal?: FloatFilter<"lignefacture"> | number
    facture?: XOR<FactureRelationFilter, factureWhereInput>
    produit?: XOR<ProduitRelationFilter, produitWhereInput>
  }, "id">

  export type lignefactureOrderByWithAggregationInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixUnitaire?: SortOrder
    sousTotal?: SortOrder
    _count?: lignefactureCountOrderByAggregateInput
    _avg?: lignefactureAvgOrderByAggregateInput
    _max?: lignefactureMaxOrderByAggregateInput
    _min?: lignefactureMinOrderByAggregateInput
    _sum?: lignefactureSumOrderByAggregateInput
  }

  export type lignefactureScalarWhereWithAggregatesInput = {
    AND?: lignefactureScalarWhereWithAggregatesInput | lignefactureScalarWhereWithAggregatesInput[]
    OR?: lignefactureScalarWhereWithAggregatesInput[]
    NOT?: lignefactureScalarWhereWithAggregatesInput | lignefactureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"lignefacture"> | number
    factureId?: IntWithAggregatesFilter<"lignefacture"> | number
    produitId?: IntWithAggregatesFilter<"lignefacture"> | number
    quantite?: IntWithAggregatesFilter<"lignefacture"> | number
    prixUnitaire?: FloatWithAggregatesFilter<"lignefacture"> | number
    sousTotal?: FloatWithAggregatesFilter<"lignefacture"> | number
  }

  export type produitWhereInput = {
    AND?: produitWhereInput | produitWhereInput[]
    OR?: produitWhereInput[]
    NOT?: produitWhereInput | produitWhereInput[]
    id?: IntFilter<"produit"> | number
    nom?: StringFilter<"produit"> | string
    prixAchat?: FloatFilter<"produit"> | number
    prixVente?: FloatFilter<"produit"> | number
    tauxMarge?: FloatFilter<"produit"> | number
    dimension?: StringFilter<"produit"> | string
    taille?: StringFilter<"produit"> | string
    lignefacture?: LignefactureListRelationFilter
  }

  export type produitOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    prixAchat?: SortOrder
    prixVente?: SortOrder
    tauxMarge?: SortOrder
    dimension?: SortOrder
    taille?: SortOrder
    lignefacture?: lignefactureOrderByRelationAggregateInput
  }

  export type produitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: produitWhereInput | produitWhereInput[]
    OR?: produitWhereInput[]
    NOT?: produitWhereInput | produitWhereInput[]
    nom?: StringFilter<"produit"> | string
    prixAchat?: FloatFilter<"produit"> | number
    prixVente?: FloatFilter<"produit"> | number
    tauxMarge?: FloatFilter<"produit"> | number
    dimension?: StringFilter<"produit"> | string
    taille?: StringFilter<"produit"> | string
    lignefacture?: LignefactureListRelationFilter
  }, "id">

  export type produitOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    prixAchat?: SortOrder
    prixVente?: SortOrder
    tauxMarge?: SortOrder
    dimension?: SortOrder
    taille?: SortOrder
    _count?: produitCountOrderByAggregateInput
    _avg?: produitAvgOrderByAggregateInput
    _max?: produitMaxOrderByAggregateInput
    _min?: produitMinOrderByAggregateInput
    _sum?: produitSumOrderByAggregateInput
  }

  export type produitScalarWhereWithAggregatesInput = {
    AND?: produitScalarWhereWithAggregatesInput | produitScalarWhereWithAggregatesInput[]
    OR?: produitScalarWhereWithAggregatesInput[]
    NOT?: produitScalarWhereWithAggregatesInput | produitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"produit"> | number
    nom?: StringWithAggregatesFilter<"produit"> | string
    prixAchat?: FloatWithAggregatesFilter<"produit"> | number
    prixVente?: FloatWithAggregatesFilter<"produit"> | number
    tauxMarge?: FloatWithAggregatesFilter<"produit"> | number
    dimension?: StringWithAggregatesFilter<"produit"> | string
    taille?: StringWithAggregatesFilter<"produit"> | string
  }

  export type clientCreateInput = {
    nom: string
    prenom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
    facture?: factureCreateNestedManyWithoutClientInput
  }

  export type clientUncheckedCreateInput = {
    id?: number
    nom: string
    prenom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
    facture?: factureUncheckedCreateNestedManyWithoutClientInput
  }

  export type clientUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    facture?: factureUpdateManyWithoutClientNestedInput
  }

  export type clientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    facture?: factureUncheckedUpdateManyWithoutClientNestedInput
  }

  export type clientCreateManyInput = {
    id?: number
    nom: string
    prenom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
  }

  export type clientUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type clientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type commandefournisseurCreateInput = {
    date: Date | string
    statut: string
    fournisseur: fournisseurCreateNestedOneWithoutCommandefournisseurInput
  }

  export type commandefournisseurUncheckedCreateInput = {
    id?: number
    fournisseurId: number
    date: Date | string
    statut: string
  }

  export type commandefournisseurUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: StringFieldUpdateOperationsInput | string
    fournisseur?: fournisseurUpdateOneRequiredWithoutCommandefournisseurNestedInput
  }

  export type commandefournisseurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fournisseurId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: StringFieldUpdateOperationsInput | string
  }

  export type commandefournisseurCreateManyInput = {
    id?: number
    fournisseurId: number
    date: Date | string
    statut: string
  }

  export type commandefournisseurUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: StringFieldUpdateOperationsInput | string
  }

  export type commandefournisseurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fournisseurId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: StringFieldUpdateOperationsInput | string
  }

  export type entrepriseCreateInput = {
    nom: string
    siegeSocial: string
    dateCreation: Date | string
    identifiantFiscal: string
    capital: number
    nombreEmployes: number
    ville: string
    responsable: string
    numeroTelephone: string
    email: string
  }

  export type entrepriseUncheckedCreateInput = {
    id?: number
    nom: string
    siegeSocial: string
    dateCreation: Date | string
    identifiantFiscal: string
    capital: number
    nombreEmployes: number
    ville: string
    responsable: string
    numeroTelephone: string
    email: string
  }

  export type entrepriseUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    siegeSocial?: StringFieldUpdateOperationsInput | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiantFiscal?: StringFieldUpdateOperationsInput | string
    capital?: FloatFieldUpdateOperationsInput | number
    nombreEmployes?: IntFieldUpdateOperationsInput | number
    ville?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type entrepriseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    siegeSocial?: StringFieldUpdateOperationsInput | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiantFiscal?: StringFieldUpdateOperationsInput | string
    capital?: FloatFieldUpdateOperationsInput | number
    nombreEmployes?: IntFieldUpdateOperationsInput | number
    ville?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type entrepriseCreateManyInput = {
    id?: number
    nom: string
    siegeSocial: string
    dateCreation: Date | string
    identifiantFiscal: string
    capital: number
    nombreEmployes: number
    ville: string
    responsable: string
    numeroTelephone: string
    email: string
  }

  export type entrepriseUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    siegeSocial?: StringFieldUpdateOperationsInput | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiantFiscal?: StringFieldUpdateOperationsInput | string
    capital?: FloatFieldUpdateOperationsInput | number
    nombreEmployes?: IntFieldUpdateOperationsInput | number
    ville?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type entrepriseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    siegeSocial?: StringFieldUpdateOperationsInput | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiantFiscal?: StringFieldUpdateOperationsInput | string
    capital?: FloatFieldUpdateOperationsInput | number
    nombreEmployes?: IntFieldUpdateOperationsInput | number
    ville?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type factureCreateInput = {
    date: Date | string
    montantTotal: number
    client: clientCreateNestedOneWithoutFactureInput
    lignefacture?: lignefactureCreateNestedManyWithoutFactureInput
  }

  export type factureUncheckedCreateInput = {
    id?: number
    clientId: number
    date: Date | string
    montantTotal: number
    lignefacture?: lignefactureUncheckedCreateNestedManyWithoutFactureInput
  }

  export type factureUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    client?: clientUpdateOneRequiredWithoutFactureNestedInput
    lignefacture?: lignefactureUpdateManyWithoutFactureNestedInput
  }

  export type factureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    lignefacture?: lignefactureUncheckedUpdateManyWithoutFactureNestedInput
  }

  export type factureCreateManyInput = {
    id?: number
    clientId: number
    date: Date | string
    montantTotal: number
  }

  export type factureUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type factureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type fournisseurCreateInput = {
    nom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
    commandefournisseur?: commandefournisseurCreateNestedManyWithoutFournisseurInput
  }

  export type fournisseurUncheckedCreateInput = {
    id?: number
    nom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
    commandefournisseur?: commandefournisseurUncheckedCreateNestedManyWithoutFournisseurInput
  }

  export type fournisseurUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    commandefournisseur?: commandefournisseurUpdateManyWithoutFournisseurNestedInput
  }

  export type fournisseurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    commandefournisseur?: commandefournisseurUncheckedUpdateManyWithoutFournisseurNestedInput
  }

  export type fournisseurCreateManyInput = {
    id?: number
    nom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
  }

  export type fournisseurUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type fournisseurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type lignefactureCreateInput = {
    quantite: number
    prixUnitaire: number
    sousTotal: number
    facture: factureCreateNestedOneWithoutLignefactureInput
    produit: produitCreateNestedOneWithoutLignefactureInput
  }

  export type lignefactureUncheckedCreateInput = {
    id?: number
    factureId: number
    produitId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
  }

  export type lignefactureUpdateInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
    facture?: factureUpdateOneRequiredWithoutLignefactureNestedInput
    produit?: produitUpdateOneRequiredWithoutLignefactureNestedInput
  }

  export type lignefactureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    factureId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type lignefactureCreateManyInput = {
    id?: number
    factureId: number
    produitId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
  }

  export type lignefactureUpdateManyMutationInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type lignefactureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    factureId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type produitCreateInput = {
    nom: string
    prixAchat: number
    prixVente: number
    tauxMarge: number
    dimension: string
    taille: string
    lignefacture?: lignefactureCreateNestedManyWithoutProduitInput
  }

  export type produitUncheckedCreateInput = {
    id?: number
    nom: string
    prixAchat: number
    prixVente: number
    tauxMarge: number
    dimension: string
    taille: string
    lignefacture?: lignefactureUncheckedCreateNestedManyWithoutProduitInput
  }

  export type produitUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prixAchat?: FloatFieldUpdateOperationsInput | number
    prixVente?: FloatFieldUpdateOperationsInput | number
    tauxMarge?: FloatFieldUpdateOperationsInput | number
    dimension?: StringFieldUpdateOperationsInput | string
    taille?: StringFieldUpdateOperationsInput | string
    lignefacture?: lignefactureUpdateManyWithoutProduitNestedInput
  }

  export type produitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prixAchat?: FloatFieldUpdateOperationsInput | number
    prixVente?: FloatFieldUpdateOperationsInput | number
    tauxMarge?: FloatFieldUpdateOperationsInput | number
    dimension?: StringFieldUpdateOperationsInput | string
    taille?: StringFieldUpdateOperationsInput | string
    lignefacture?: lignefactureUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type produitCreateManyInput = {
    id?: number
    nom: string
    prixAchat: number
    prixVente: number
    tauxMarge: number
    dimension: string
    taille: string
  }

  export type produitUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prixAchat?: FloatFieldUpdateOperationsInput | number
    prixVente?: FloatFieldUpdateOperationsInput | number
    tauxMarge?: FloatFieldUpdateOperationsInput | number
    dimension?: StringFieldUpdateOperationsInput | string
    taille?: StringFieldUpdateOperationsInput | string
  }

  export type produitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prixAchat?: FloatFieldUpdateOperationsInput | number
    prixVente?: FloatFieldUpdateOperationsInput | number
    tauxMarge?: FloatFieldUpdateOperationsInput | number
    dimension?: StringFieldUpdateOperationsInput | string
    taille?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FactureListRelationFilter = {
    every?: factureWhereInput
    some?: factureWhereInput
    none?: factureWhereInput
  }

  export type factureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type clientCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type clientAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type clientMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type clientMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type clientSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FournisseurRelationFilter = {
    is?: fournisseurWhereInput
    isNot?: fournisseurWhereInput
  }

  export type commandefournisseurCountOrderByAggregateInput = {
    id?: SortOrder
    fournisseurId?: SortOrder
    date?: SortOrder
    statut?: SortOrder
  }

  export type commandefournisseurAvgOrderByAggregateInput = {
    id?: SortOrder
    fournisseurId?: SortOrder
  }

  export type commandefournisseurMaxOrderByAggregateInput = {
    id?: SortOrder
    fournisseurId?: SortOrder
    date?: SortOrder
    statut?: SortOrder
  }

  export type commandefournisseurMinOrderByAggregateInput = {
    id?: SortOrder
    fournisseurId?: SortOrder
    date?: SortOrder
    statut?: SortOrder
  }

  export type commandefournisseurSumOrderByAggregateInput = {
    id?: SortOrder
    fournisseurId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type entrepriseCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    siegeSocial?: SortOrder
    dateCreation?: SortOrder
    identifiantFiscal?: SortOrder
    capital?: SortOrder
    nombreEmployes?: SortOrder
    ville?: SortOrder
    responsable?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type entrepriseAvgOrderByAggregateInput = {
    id?: SortOrder
    capital?: SortOrder
    nombreEmployes?: SortOrder
  }

  export type entrepriseMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    siegeSocial?: SortOrder
    dateCreation?: SortOrder
    identifiantFiscal?: SortOrder
    capital?: SortOrder
    nombreEmployes?: SortOrder
    ville?: SortOrder
    responsable?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type entrepriseMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    siegeSocial?: SortOrder
    dateCreation?: SortOrder
    identifiantFiscal?: SortOrder
    capital?: SortOrder
    nombreEmployes?: SortOrder
    ville?: SortOrder
    responsable?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type entrepriseSumOrderByAggregateInput = {
    id?: SortOrder
    capital?: SortOrder
    nombreEmployes?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ClientRelationFilter = {
    is?: clientWhereInput
    isNot?: clientWhereInput
  }

  export type LignefactureListRelationFilter = {
    every?: lignefactureWhereInput
    some?: lignefactureWhereInput
    none?: lignefactureWhereInput
  }

  export type lignefactureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type factureCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    date?: SortOrder
    montantTotal?: SortOrder
  }

  export type factureAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    montantTotal?: SortOrder
  }

  export type factureMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    date?: SortOrder
    montantTotal?: SortOrder
  }

  export type factureMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    date?: SortOrder
    montantTotal?: SortOrder
  }

  export type factureSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    montantTotal?: SortOrder
  }

  export type CommandefournisseurListRelationFilter = {
    every?: commandefournisseurWhereInput
    some?: commandefournisseurWhereInput
    none?: commandefournisseurWhereInput
  }

  export type commandefournisseurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type fournisseurCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type fournisseurAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type fournisseurMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type fournisseurMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type fournisseurSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FactureRelationFilter = {
    is?: factureWhereInput
    isNot?: factureWhereInput
  }

  export type ProduitRelationFilter = {
    is?: produitWhereInput
    isNot?: produitWhereInput
  }

  export type lignefactureCountOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixUnitaire?: SortOrder
    sousTotal?: SortOrder
  }

  export type lignefactureAvgOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixUnitaire?: SortOrder
    sousTotal?: SortOrder
  }

  export type lignefactureMaxOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixUnitaire?: SortOrder
    sousTotal?: SortOrder
  }

  export type lignefactureMinOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixUnitaire?: SortOrder
    sousTotal?: SortOrder
  }

  export type lignefactureSumOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixUnitaire?: SortOrder
    sousTotal?: SortOrder
  }

  export type produitCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prixAchat?: SortOrder
    prixVente?: SortOrder
    tauxMarge?: SortOrder
    dimension?: SortOrder
    taille?: SortOrder
  }

  export type produitAvgOrderByAggregateInput = {
    id?: SortOrder
    prixAchat?: SortOrder
    prixVente?: SortOrder
    tauxMarge?: SortOrder
  }

  export type produitMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prixAchat?: SortOrder
    prixVente?: SortOrder
    tauxMarge?: SortOrder
    dimension?: SortOrder
    taille?: SortOrder
  }

  export type produitMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prixAchat?: SortOrder
    prixVente?: SortOrder
    tauxMarge?: SortOrder
    dimension?: SortOrder
    taille?: SortOrder
  }

  export type produitSumOrderByAggregateInput = {
    id?: SortOrder
    prixAchat?: SortOrder
    prixVente?: SortOrder
    tauxMarge?: SortOrder
  }

  export type factureCreateNestedManyWithoutClientInput = {
    create?: XOR<factureCreateWithoutClientInput, factureUncheckedCreateWithoutClientInput> | factureCreateWithoutClientInput[] | factureUncheckedCreateWithoutClientInput[]
    connectOrCreate?: factureCreateOrConnectWithoutClientInput | factureCreateOrConnectWithoutClientInput[]
    createMany?: factureCreateManyClientInputEnvelope
    connect?: factureWhereUniqueInput | factureWhereUniqueInput[]
  }

  export type factureUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<factureCreateWithoutClientInput, factureUncheckedCreateWithoutClientInput> | factureCreateWithoutClientInput[] | factureUncheckedCreateWithoutClientInput[]
    connectOrCreate?: factureCreateOrConnectWithoutClientInput | factureCreateOrConnectWithoutClientInput[]
    createMany?: factureCreateManyClientInputEnvelope
    connect?: factureWhereUniqueInput | factureWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type factureUpdateManyWithoutClientNestedInput = {
    create?: XOR<factureCreateWithoutClientInput, factureUncheckedCreateWithoutClientInput> | factureCreateWithoutClientInput[] | factureUncheckedCreateWithoutClientInput[]
    connectOrCreate?: factureCreateOrConnectWithoutClientInput | factureCreateOrConnectWithoutClientInput[]
    upsert?: factureUpsertWithWhereUniqueWithoutClientInput | factureUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: factureCreateManyClientInputEnvelope
    set?: factureWhereUniqueInput | factureWhereUniqueInput[]
    disconnect?: factureWhereUniqueInput | factureWhereUniqueInput[]
    delete?: factureWhereUniqueInput | factureWhereUniqueInput[]
    connect?: factureWhereUniqueInput | factureWhereUniqueInput[]
    update?: factureUpdateWithWhereUniqueWithoutClientInput | factureUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: factureUpdateManyWithWhereWithoutClientInput | factureUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: factureScalarWhereInput | factureScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type factureUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<factureCreateWithoutClientInput, factureUncheckedCreateWithoutClientInput> | factureCreateWithoutClientInput[] | factureUncheckedCreateWithoutClientInput[]
    connectOrCreate?: factureCreateOrConnectWithoutClientInput | factureCreateOrConnectWithoutClientInput[]
    upsert?: factureUpsertWithWhereUniqueWithoutClientInput | factureUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: factureCreateManyClientInputEnvelope
    set?: factureWhereUniqueInput | factureWhereUniqueInput[]
    disconnect?: factureWhereUniqueInput | factureWhereUniqueInput[]
    delete?: factureWhereUniqueInput | factureWhereUniqueInput[]
    connect?: factureWhereUniqueInput | factureWhereUniqueInput[]
    update?: factureUpdateWithWhereUniqueWithoutClientInput | factureUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: factureUpdateManyWithWhereWithoutClientInput | factureUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: factureScalarWhereInput | factureScalarWhereInput[]
  }

  export type fournisseurCreateNestedOneWithoutCommandefournisseurInput = {
    create?: XOR<fournisseurCreateWithoutCommandefournisseurInput, fournisseurUncheckedCreateWithoutCommandefournisseurInput>
    connectOrCreate?: fournisseurCreateOrConnectWithoutCommandefournisseurInput
    connect?: fournisseurWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type fournisseurUpdateOneRequiredWithoutCommandefournisseurNestedInput = {
    create?: XOR<fournisseurCreateWithoutCommandefournisseurInput, fournisseurUncheckedCreateWithoutCommandefournisseurInput>
    connectOrCreate?: fournisseurCreateOrConnectWithoutCommandefournisseurInput
    upsert?: fournisseurUpsertWithoutCommandefournisseurInput
    connect?: fournisseurWhereUniqueInput
    update?: XOR<XOR<fournisseurUpdateToOneWithWhereWithoutCommandefournisseurInput, fournisseurUpdateWithoutCommandefournisseurInput>, fournisseurUncheckedUpdateWithoutCommandefournisseurInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type clientCreateNestedOneWithoutFactureInput = {
    create?: XOR<clientCreateWithoutFactureInput, clientUncheckedCreateWithoutFactureInput>
    connectOrCreate?: clientCreateOrConnectWithoutFactureInput
    connect?: clientWhereUniqueInput
  }

  export type lignefactureCreateNestedManyWithoutFactureInput = {
    create?: XOR<lignefactureCreateWithoutFactureInput, lignefactureUncheckedCreateWithoutFactureInput> | lignefactureCreateWithoutFactureInput[] | lignefactureUncheckedCreateWithoutFactureInput[]
    connectOrCreate?: lignefactureCreateOrConnectWithoutFactureInput | lignefactureCreateOrConnectWithoutFactureInput[]
    createMany?: lignefactureCreateManyFactureInputEnvelope
    connect?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
  }

  export type lignefactureUncheckedCreateNestedManyWithoutFactureInput = {
    create?: XOR<lignefactureCreateWithoutFactureInput, lignefactureUncheckedCreateWithoutFactureInput> | lignefactureCreateWithoutFactureInput[] | lignefactureUncheckedCreateWithoutFactureInput[]
    connectOrCreate?: lignefactureCreateOrConnectWithoutFactureInput | lignefactureCreateOrConnectWithoutFactureInput[]
    createMany?: lignefactureCreateManyFactureInputEnvelope
    connect?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
  }

  export type clientUpdateOneRequiredWithoutFactureNestedInput = {
    create?: XOR<clientCreateWithoutFactureInput, clientUncheckedCreateWithoutFactureInput>
    connectOrCreate?: clientCreateOrConnectWithoutFactureInput
    upsert?: clientUpsertWithoutFactureInput
    connect?: clientWhereUniqueInput
    update?: XOR<XOR<clientUpdateToOneWithWhereWithoutFactureInput, clientUpdateWithoutFactureInput>, clientUncheckedUpdateWithoutFactureInput>
  }

  export type lignefactureUpdateManyWithoutFactureNestedInput = {
    create?: XOR<lignefactureCreateWithoutFactureInput, lignefactureUncheckedCreateWithoutFactureInput> | lignefactureCreateWithoutFactureInput[] | lignefactureUncheckedCreateWithoutFactureInput[]
    connectOrCreate?: lignefactureCreateOrConnectWithoutFactureInput | lignefactureCreateOrConnectWithoutFactureInput[]
    upsert?: lignefactureUpsertWithWhereUniqueWithoutFactureInput | lignefactureUpsertWithWhereUniqueWithoutFactureInput[]
    createMany?: lignefactureCreateManyFactureInputEnvelope
    set?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    disconnect?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    delete?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    connect?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    update?: lignefactureUpdateWithWhereUniqueWithoutFactureInput | lignefactureUpdateWithWhereUniqueWithoutFactureInput[]
    updateMany?: lignefactureUpdateManyWithWhereWithoutFactureInput | lignefactureUpdateManyWithWhereWithoutFactureInput[]
    deleteMany?: lignefactureScalarWhereInput | lignefactureScalarWhereInput[]
  }

  export type lignefactureUncheckedUpdateManyWithoutFactureNestedInput = {
    create?: XOR<lignefactureCreateWithoutFactureInput, lignefactureUncheckedCreateWithoutFactureInput> | lignefactureCreateWithoutFactureInput[] | lignefactureUncheckedCreateWithoutFactureInput[]
    connectOrCreate?: lignefactureCreateOrConnectWithoutFactureInput | lignefactureCreateOrConnectWithoutFactureInput[]
    upsert?: lignefactureUpsertWithWhereUniqueWithoutFactureInput | lignefactureUpsertWithWhereUniqueWithoutFactureInput[]
    createMany?: lignefactureCreateManyFactureInputEnvelope
    set?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    disconnect?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    delete?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    connect?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    update?: lignefactureUpdateWithWhereUniqueWithoutFactureInput | lignefactureUpdateWithWhereUniqueWithoutFactureInput[]
    updateMany?: lignefactureUpdateManyWithWhereWithoutFactureInput | lignefactureUpdateManyWithWhereWithoutFactureInput[]
    deleteMany?: lignefactureScalarWhereInput | lignefactureScalarWhereInput[]
  }

  export type commandefournisseurCreateNestedManyWithoutFournisseurInput = {
    create?: XOR<commandefournisseurCreateWithoutFournisseurInput, commandefournisseurUncheckedCreateWithoutFournisseurInput> | commandefournisseurCreateWithoutFournisseurInput[] | commandefournisseurUncheckedCreateWithoutFournisseurInput[]
    connectOrCreate?: commandefournisseurCreateOrConnectWithoutFournisseurInput | commandefournisseurCreateOrConnectWithoutFournisseurInput[]
    createMany?: commandefournisseurCreateManyFournisseurInputEnvelope
    connect?: commandefournisseurWhereUniqueInput | commandefournisseurWhereUniqueInput[]
  }

  export type commandefournisseurUncheckedCreateNestedManyWithoutFournisseurInput = {
    create?: XOR<commandefournisseurCreateWithoutFournisseurInput, commandefournisseurUncheckedCreateWithoutFournisseurInput> | commandefournisseurCreateWithoutFournisseurInput[] | commandefournisseurUncheckedCreateWithoutFournisseurInput[]
    connectOrCreate?: commandefournisseurCreateOrConnectWithoutFournisseurInput | commandefournisseurCreateOrConnectWithoutFournisseurInput[]
    createMany?: commandefournisseurCreateManyFournisseurInputEnvelope
    connect?: commandefournisseurWhereUniqueInput | commandefournisseurWhereUniqueInput[]
  }

  export type commandefournisseurUpdateManyWithoutFournisseurNestedInput = {
    create?: XOR<commandefournisseurCreateWithoutFournisseurInput, commandefournisseurUncheckedCreateWithoutFournisseurInput> | commandefournisseurCreateWithoutFournisseurInput[] | commandefournisseurUncheckedCreateWithoutFournisseurInput[]
    connectOrCreate?: commandefournisseurCreateOrConnectWithoutFournisseurInput | commandefournisseurCreateOrConnectWithoutFournisseurInput[]
    upsert?: commandefournisseurUpsertWithWhereUniqueWithoutFournisseurInput | commandefournisseurUpsertWithWhereUniqueWithoutFournisseurInput[]
    createMany?: commandefournisseurCreateManyFournisseurInputEnvelope
    set?: commandefournisseurWhereUniqueInput | commandefournisseurWhereUniqueInput[]
    disconnect?: commandefournisseurWhereUniqueInput | commandefournisseurWhereUniqueInput[]
    delete?: commandefournisseurWhereUniqueInput | commandefournisseurWhereUniqueInput[]
    connect?: commandefournisseurWhereUniqueInput | commandefournisseurWhereUniqueInput[]
    update?: commandefournisseurUpdateWithWhereUniqueWithoutFournisseurInput | commandefournisseurUpdateWithWhereUniqueWithoutFournisseurInput[]
    updateMany?: commandefournisseurUpdateManyWithWhereWithoutFournisseurInput | commandefournisseurUpdateManyWithWhereWithoutFournisseurInput[]
    deleteMany?: commandefournisseurScalarWhereInput | commandefournisseurScalarWhereInput[]
  }

  export type commandefournisseurUncheckedUpdateManyWithoutFournisseurNestedInput = {
    create?: XOR<commandefournisseurCreateWithoutFournisseurInput, commandefournisseurUncheckedCreateWithoutFournisseurInput> | commandefournisseurCreateWithoutFournisseurInput[] | commandefournisseurUncheckedCreateWithoutFournisseurInput[]
    connectOrCreate?: commandefournisseurCreateOrConnectWithoutFournisseurInput | commandefournisseurCreateOrConnectWithoutFournisseurInput[]
    upsert?: commandefournisseurUpsertWithWhereUniqueWithoutFournisseurInput | commandefournisseurUpsertWithWhereUniqueWithoutFournisseurInput[]
    createMany?: commandefournisseurCreateManyFournisseurInputEnvelope
    set?: commandefournisseurWhereUniqueInput | commandefournisseurWhereUniqueInput[]
    disconnect?: commandefournisseurWhereUniqueInput | commandefournisseurWhereUniqueInput[]
    delete?: commandefournisseurWhereUniqueInput | commandefournisseurWhereUniqueInput[]
    connect?: commandefournisseurWhereUniqueInput | commandefournisseurWhereUniqueInput[]
    update?: commandefournisseurUpdateWithWhereUniqueWithoutFournisseurInput | commandefournisseurUpdateWithWhereUniqueWithoutFournisseurInput[]
    updateMany?: commandefournisseurUpdateManyWithWhereWithoutFournisseurInput | commandefournisseurUpdateManyWithWhereWithoutFournisseurInput[]
    deleteMany?: commandefournisseurScalarWhereInput | commandefournisseurScalarWhereInput[]
  }

  export type factureCreateNestedOneWithoutLignefactureInput = {
    create?: XOR<factureCreateWithoutLignefactureInput, factureUncheckedCreateWithoutLignefactureInput>
    connectOrCreate?: factureCreateOrConnectWithoutLignefactureInput
    connect?: factureWhereUniqueInput
  }

  export type produitCreateNestedOneWithoutLignefactureInput = {
    create?: XOR<produitCreateWithoutLignefactureInput, produitUncheckedCreateWithoutLignefactureInput>
    connectOrCreate?: produitCreateOrConnectWithoutLignefactureInput
    connect?: produitWhereUniqueInput
  }

  export type factureUpdateOneRequiredWithoutLignefactureNestedInput = {
    create?: XOR<factureCreateWithoutLignefactureInput, factureUncheckedCreateWithoutLignefactureInput>
    connectOrCreate?: factureCreateOrConnectWithoutLignefactureInput
    upsert?: factureUpsertWithoutLignefactureInput
    connect?: factureWhereUniqueInput
    update?: XOR<XOR<factureUpdateToOneWithWhereWithoutLignefactureInput, factureUpdateWithoutLignefactureInput>, factureUncheckedUpdateWithoutLignefactureInput>
  }

  export type produitUpdateOneRequiredWithoutLignefactureNestedInput = {
    create?: XOR<produitCreateWithoutLignefactureInput, produitUncheckedCreateWithoutLignefactureInput>
    connectOrCreate?: produitCreateOrConnectWithoutLignefactureInput
    upsert?: produitUpsertWithoutLignefactureInput
    connect?: produitWhereUniqueInput
    update?: XOR<XOR<produitUpdateToOneWithWhereWithoutLignefactureInput, produitUpdateWithoutLignefactureInput>, produitUncheckedUpdateWithoutLignefactureInput>
  }

  export type lignefactureCreateNestedManyWithoutProduitInput = {
    create?: XOR<lignefactureCreateWithoutProduitInput, lignefactureUncheckedCreateWithoutProduitInput> | lignefactureCreateWithoutProduitInput[] | lignefactureUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: lignefactureCreateOrConnectWithoutProduitInput | lignefactureCreateOrConnectWithoutProduitInput[]
    createMany?: lignefactureCreateManyProduitInputEnvelope
    connect?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
  }

  export type lignefactureUncheckedCreateNestedManyWithoutProduitInput = {
    create?: XOR<lignefactureCreateWithoutProduitInput, lignefactureUncheckedCreateWithoutProduitInput> | lignefactureCreateWithoutProduitInput[] | lignefactureUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: lignefactureCreateOrConnectWithoutProduitInput | lignefactureCreateOrConnectWithoutProduitInput[]
    createMany?: lignefactureCreateManyProduitInputEnvelope
    connect?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
  }

  export type lignefactureUpdateManyWithoutProduitNestedInput = {
    create?: XOR<lignefactureCreateWithoutProduitInput, lignefactureUncheckedCreateWithoutProduitInput> | lignefactureCreateWithoutProduitInput[] | lignefactureUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: lignefactureCreateOrConnectWithoutProduitInput | lignefactureCreateOrConnectWithoutProduitInput[]
    upsert?: lignefactureUpsertWithWhereUniqueWithoutProduitInput | lignefactureUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: lignefactureCreateManyProduitInputEnvelope
    set?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    disconnect?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    delete?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    connect?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    update?: lignefactureUpdateWithWhereUniqueWithoutProduitInput | lignefactureUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: lignefactureUpdateManyWithWhereWithoutProduitInput | lignefactureUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: lignefactureScalarWhereInput | lignefactureScalarWhereInput[]
  }

  export type lignefactureUncheckedUpdateManyWithoutProduitNestedInput = {
    create?: XOR<lignefactureCreateWithoutProduitInput, lignefactureUncheckedCreateWithoutProduitInput> | lignefactureCreateWithoutProduitInput[] | lignefactureUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: lignefactureCreateOrConnectWithoutProduitInput | lignefactureCreateOrConnectWithoutProduitInput[]
    upsert?: lignefactureUpsertWithWhereUniqueWithoutProduitInput | lignefactureUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: lignefactureCreateManyProduitInputEnvelope
    set?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    disconnect?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    delete?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    connect?: lignefactureWhereUniqueInput | lignefactureWhereUniqueInput[]
    update?: lignefactureUpdateWithWhereUniqueWithoutProduitInput | lignefactureUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: lignefactureUpdateManyWithWhereWithoutProduitInput | lignefactureUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: lignefactureScalarWhereInput | lignefactureScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type factureCreateWithoutClientInput = {
    date: Date | string
    montantTotal: number
    lignefacture?: lignefactureCreateNestedManyWithoutFactureInput
  }

  export type factureUncheckedCreateWithoutClientInput = {
    id?: number
    date: Date | string
    montantTotal: number
    lignefacture?: lignefactureUncheckedCreateNestedManyWithoutFactureInput
  }

  export type factureCreateOrConnectWithoutClientInput = {
    where: factureWhereUniqueInput
    create: XOR<factureCreateWithoutClientInput, factureUncheckedCreateWithoutClientInput>
  }

  export type factureCreateManyClientInputEnvelope = {
    data: factureCreateManyClientInput | factureCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type factureUpsertWithWhereUniqueWithoutClientInput = {
    where: factureWhereUniqueInput
    update: XOR<factureUpdateWithoutClientInput, factureUncheckedUpdateWithoutClientInput>
    create: XOR<factureCreateWithoutClientInput, factureUncheckedCreateWithoutClientInput>
  }

  export type factureUpdateWithWhereUniqueWithoutClientInput = {
    where: factureWhereUniqueInput
    data: XOR<factureUpdateWithoutClientInput, factureUncheckedUpdateWithoutClientInput>
  }

  export type factureUpdateManyWithWhereWithoutClientInput = {
    where: factureScalarWhereInput
    data: XOR<factureUpdateManyMutationInput, factureUncheckedUpdateManyWithoutClientInput>
  }

  export type factureScalarWhereInput = {
    AND?: factureScalarWhereInput | factureScalarWhereInput[]
    OR?: factureScalarWhereInput[]
    NOT?: factureScalarWhereInput | factureScalarWhereInput[]
    id?: IntFilter<"facture"> | number
    clientId?: IntFilter<"facture"> | number
    date?: DateTimeFilter<"facture"> | Date | string
    montantTotal?: FloatFilter<"facture"> | number
  }

  export type fournisseurCreateWithoutCommandefournisseurInput = {
    nom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
  }

  export type fournisseurUncheckedCreateWithoutCommandefournisseurInput = {
    id?: number
    nom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
  }

  export type fournisseurCreateOrConnectWithoutCommandefournisseurInput = {
    where: fournisseurWhereUniqueInput
    create: XOR<fournisseurCreateWithoutCommandefournisseurInput, fournisseurUncheckedCreateWithoutCommandefournisseurInput>
  }

  export type fournisseurUpsertWithoutCommandefournisseurInput = {
    update: XOR<fournisseurUpdateWithoutCommandefournisseurInput, fournisseurUncheckedUpdateWithoutCommandefournisseurInput>
    create: XOR<fournisseurCreateWithoutCommandefournisseurInput, fournisseurUncheckedCreateWithoutCommandefournisseurInput>
    where?: fournisseurWhereInput
  }

  export type fournisseurUpdateToOneWithWhereWithoutCommandefournisseurInput = {
    where?: fournisseurWhereInput
    data: XOR<fournisseurUpdateWithoutCommandefournisseurInput, fournisseurUncheckedUpdateWithoutCommandefournisseurInput>
  }

  export type fournisseurUpdateWithoutCommandefournisseurInput = {
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type fournisseurUncheckedUpdateWithoutCommandefournisseurInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type clientCreateWithoutFactureInput = {
    nom: string
    prenom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
  }

  export type clientUncheckedCreateWithoutFactureInput = {
    id?: number
    nom: string
    prenom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
  }

  export type clientCreateOrConnectWithoutFactureInput = {
    where: clientWhereUniqueInput
    create: XOR<clientCreateWithoutFactureInput, clientUncheckedCreateWithoutFactureInput>
  }

  export type lignefactureCreateWithoutFactureInput = {
    quantite: number
    prixUnitaire: number
    sousTotal: number
    produit: produitCreateNestedOneWithoutLignefactureInput
  }

  export type lignefactureUncheckedCreateWithoutFactureInput = {
    id?: number
    produitId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
  }

  export type lignefactureCreateOrConnectWithoutFactureInput = {
    where: lignefactureWhereUniqueInput
    create: XOR<lignefactureCreateWithoutFactureInput, lignefactureUncheckedCreateWithoutFactureInput>
  }

  export type lignefactureCreateManyFactureInputEnvelope = {
    data: lignefactureCreateManyFactureInput | lignefactureCreateManyFactureInput[]
    skipDuplicates?: boolean
  }

  export type clientUpsertWithoutFactureInput = {
    update: XOR<clientUpdateWithoutFactureInput, clientUncheckedUpdateWithoutFactureInput>
    create: XOR<clientCreateWithoutFactureInput, clientUncheckedCreateWithoutFactureInput>
    where?: clientWhereInput
  }

  export type clientUpdateToOneWithWhereWithoutFactureInput = {
    where?: clientWhereInput
    data: XOR<clientUpdateWithoutFactureInput, clientUncheckedUpdateWithoutFactureInput>
  }

  export type clientUpdateWithoutFactureInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type clientUncheckedUpdateWithoutFactureInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type lignefactureUpsertWithWhereUniqueWithoutFactureInput = {
    where: lignefactureWhereUniqueInput
    update: XOR<lignefactureUpdateWithoutFactureInput, lignefactureUncheckedUpdateWithoutFactureInput>
    create: XOR<lignefactureCreateWithoutFactureInput, lignefactureUncheckedCreateWithoutFactureInput>
  }

  export type lignefactureUpdateWithWhereUniqueWithoutFactureInput = {
    where: lignefactureWhereUniqueInput
    data: XOR<lignefactureUpdateWithoutFactureInput, lignefactureUncheckedUpdateWithoutFactureInput>
  }

  export type lignefactureUpdateManyWithWhereWithoutFactureInput = {
    where: lignefactureScalarWhereInput
    data: XOR<lignefactureUpdateManyMutationInput, lignefactureUncheckedUpdateManyWithoutFactureInput>
  }

  export type lignefactureScalarWhereInput = {
    AND?: lignefactureScalarWhereInput | lignefactureScalarWhereInput[]
    OR?: lignefactureScalarWhereInput[]
    NOT?: lignefactureScalarWhereInput | lignefactureScalarWhereInput[]
    id?: IntFilter<"lignefacture"> | number
    factureId?: IntFilter<"lignefacture"> | number
    produitId?: IntFilter<"lignefacture"> | number
    quantite?: IntFilter<"lignefacture"> | number
    prixUnitaire?: FloatFilter<"lignefacture"> | number
    sousTotal?: FloatFilter<"lignefacture"> | number
  }

  export type commandefournisseurCreateWithoutFournisseurInput = {
    date: Date | string
    statut: string
  }

  export type commandefournisseurUncheckedCreateWithoutFournisseurInput = {
    id?: number
    date: Date | string
    statut: string
  }

  export type commandefournisseurCreateOrConnectWithoutFournisseurInput = {
    where: commandefournisseurWhereUniqueInput
    create: XOR<commandefournisseurCreateWithoutFournisseurInput, commandefournisseurUncheckedCreateWithoutFournisseurInput>
  }

  export type commandefournisseurCreateManyFournisseurInputEnvelope = {
    data: commandefournisseurCreateManyFournisseurInput | commandefournisseurCreateManyFournisseurInput[]
    skipDuplicates?: boolean
  }

  export type commandefournisseurUpsertWithWhereUniqueWithoutFournisseurInput = {
    where: commandefournisseurWhereUniqueInput
    update: XOR<commandefournisseurUpdateWithoutFournisseurInput, commandefournisseurUncheckedUpdateWithoutFournisseurInput>
    create: XOR<commandefournisseurCreateWithoutFournisseurInput, commandefournisseurUncheckedCreateWithoutFournisseurInput>
  }

  export type commandefournisseurUpdateWithWhereUniqueWithoutFournisseurInput = {
    where: commandefournisseurWhereUniqueInput
    data: XOR<commandefournisseurUpdateWithoutFournisseurInput, commandefournisseurUncheckedUpdateWithoutFournisseurInput>
  }

  export type commandefournisseurUpdateManyWithWhereWithoutFournisseurInput = {
    where: commandefournisseurScalarWhereInput
    data: XOR<commandefournisseurUpdateManyMutationInput, commandefournisseurUncheckedUpdateManyWithoutFournisseurInput>
  }

  export type commandefournisseurScalarWhereInput = {
    AND?: commandefournisseurScalarWhereInput | commandefournisseurScalarWhereInput[]
    OR?: commandefournisseurScalarWhereInput[]
    NOT?: commandefournisseurScalarWhereInput | commandefournisseurScalarWhereInput[]
    id?: IntFilter<"commandefournisseur"> | number
    fournisseurId?: IntFilter<"commandefournisseur"> | number
    date?: DateTimeFilter<"commandefournisseur"> | Date | string
    statut?: StringFilter<"commandefournisseur"> | string
  }

  export type factureCreateWithoutLignefactureInput = {
    date: Date | string
    montantTotal: number
    client: clientCreateNestedOneWithoutFactureInput
  }

  export type factureUncheckedCreateWithoutLignefactureInput = {
    id?: number
    clientId: number
    date: Date | string
    montantTotal: number
  }

  export type factureCreateOrConnectWithoutLignefactureInput = {
    where: factureWhereUniqueInput
    create: XOR<factureCreateWithoutLignefactureInput, factureUncheckedCreateWithoutLignefactureInput>
  }

  export type produitCreateWithoutLignefactureInput = {
    nom: string
    prixAchat: number
    prixVente: number
    tauxMarge: number
    dimension: string
    taille: string
  }

  export type produitUncheckedCreateWithoutLignefactureInput = {
    id?: number
    nom: string
    prixAchat: number
    prixVente: number
    tauxMarge: number
    dimension: string
    taille: string
  }

  export type produitCreateOrConnectWithoutLignefactureInput = {
    where: produitWhereUniqueInput
    create: XOR<produitCreateWithoutLignefactureInput, produitUncheckedCreateWithoutLignefactureInput>
  }

  export type factureUpsertWithoutLignefactureInput = {
    update: XOR<factureUpdateWithoutLignefactureInput, factureUncheckedUpdateWithoutLignefactureInput>
    create: XOR<factureCreateWithoutLignefactureInput, factureUncheckedCreateWithoutLignefactureInput>
    where?: factureWhereInput
  }

  export type factureUpdateToOneWithWhereWithoutLignefactureInput = {
    where?: factureWhereInput
    data: XOR<factureUpdateWithoutLignefactureInput, factureUncheckedUpdateWithoutLignefactureInput>
  }

  export type factureUpdateWithoutLignefactureInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    client?: clientUpdateOneRequiredWithoutFactureNestedInput
  }

  export type factureUncheckedUpdateWithoutLignefactureInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type produitUpsertWithoutLignefactureInput = {
    update: XOR<produitUpdateWithoutLignefactureInput, produitUncheckedUpdateWithoutLignefactureInput>
    create: XOR<produitCreateWithoutLignefactureInput, produitUncheckedCreateWithoutLignefactureInput>
    where?: produitWhereInput
  }

  export type produitUpdateToOneWithWhereWithoutLignefactureInput = {
    where?: produitWhereInput
    data: XOR<produitUpdateWithoutLignefactureInput, produitUncheckedUpdateWithoutLignefactureInput>
  }

  export type produitUpdateWithoutLignefactureInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prixAchat?: FloatFieldUpdateOperationsInput | number
    prixVente?: FloatFieldUpdateOperationsInput | number
    tauxMarge?: FloatFieldUpdateOperationsInput | number
    dimension?: StringFieldUpdateOperationsInput | string
    taille?: StringFieldUpdateOperationsInput | string
  }

  export type produitUncheckedUpdateWithoutLignefactureInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prixAchat?: FloatFieldUpdateOperationsInput | number
    prixVente?: FloatFieldUpdateOperationsInput | number
    tauxMarge?: FloatFieldUpdateOperationsInput | number
    dimension?: StringFieldUpdateOperationsInput | string
    taille?: StringFieldUpdateOperationsInput | string
  }

  export type lignefactureCreateWithoutProduitInput = {
    quantite: number
    prixUnitaire: number
    sousTotal: number
    facture: factureCreateNestedOneWithoutLignefactureInput
  }

  export type lignefactureUncheckedCreateWithoutProduitInput = {
    id?: number
    factureId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
  }

  export type lignefactureCreateOrConnectWithoutProduitInput = {
    where: lignefactureWhereUniqueInput
    create: XOR<lignefactureCreateWithoutProduitInput, lignefactureUncheckedCreateWithoutProduitInput>
  }

  export type lignefactureCreateManyProduitInputEnvelope = {
    data: lignefactureCreateManyProduitInput | lignefactureCreateManyProduitInput[]
    skipDuplicates?: boolean
  }

  export type lignefactureUpsertWithWhereUniqueWithoutProduitInput = {
    where: lignefactureWhereUniqueInput
    update: XOR<lignefactureUpdateWithoutProduitInput, lignefactureUncheckedUpdateWithoutProduitInput>
    create: XOR<lignefactureCreateWithoutProduitInput, lignefactureUncheckedCreateWithoutProduitInput>
  }

  export type lignefactureUpdateWithWhereUniqueWithoutProduitInput = {
    where: lignefactureWhereUniqueInput
    data: XOR<lignefactureUpdateWithoutProduitInput, lignefactureUncheckedUpdateWithoutProduitInput>
  }

  export type lignefactureUpdateManyWithWhereWithoutProduitInput = {
    where: lignefactureScalarWhereInput
    data: XOR<lignefactureUpdateManyMutationInput, lignefactureUncheckedUpdateManyWithoutProduitInput>
  }

  export type factureCreateManyClientInput = {
    id?: number
    date: Date | string
    montantTotal: number
  }

  export type factureUpdateWithoutClientInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    lignefacture?: lignefactureUpdateManyWithoutFactureNestedInput
  }

  export type factureUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    lignefacture?: lignefactureUncheckedUpdateManyWithoutFactureNestedInput
  }

  export type factureUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type lignefactureCreateManyFactureInput = {
    id?: number
    produitId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
  }

  export type lignefactureUpdateWithoutFactureInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
    produit?: produitUpdateOneRequiredWithoutLignefactureNestedInput
  }

  export type lignefactureUncheckedUpdateWithoutFactureInput = {
    id?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type lignefactureUncheckedUpdateManyWithoutFactureInput = {
    id?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type commandefournisseurCreateManyFournisseurInput = {
    id?: number
    date: Date | string
    statut: string
  }

  export type commandefournisseurUpdateWithoutFournisseurInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: StringFieldUpdateOperationsInput | string
  }

  export type commandefournisseurUncheckedUpdateWithoutFournisseurInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: StringFieldUpdateOperationsInput | string
  }

  export type commandefournisseurUncheckedUpdateManyWithoutFournisseurInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: StringFieldUpdateOperationsInput | string
  }

  export type lignefactureCreateManyProduitInput = {
    id?: number
    factureId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
  }

  export type lignefactureUpdateWithoutProduitInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
    facture?: factureUpdateOneRequiredWithoutLignefactureNestedInput
  }

  export type lignefactureUncheckedUpdateWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    factureId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type lignefactureUncheckedUpdateManyWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    factureId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ClientCountOutputTypeDefaultArgs instead
     */
    export type ClientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FactureCountOutputTypeDefaultArgs instead
     */
    export type FactureCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FactureCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FournisseurCountOutputTypeDefaultArgs instead
     */
    export type FournisseurCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FournisseurCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProduitCountOutputTypeDefaultArgs instead
     */
    export type ProduitCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProduitCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use clientDefaultArgs instead
     */
    export type clientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = clientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use commandefournisseurDefaultArgs instead
     */
    export type commandefournisseurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = commandefournisseurDefaultArgs<ExtArgs>
    /**
     * @deprecated Use entrepriseDefaultArgs instead
     */
    export type entrepriseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = entrepriseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use factureDefaultArgs instead
     */
    export type factureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = factureDefaultArgs<ExtArgs>
    /**
     * @deprecated Use fournisseurDefaultArgs instead
     */
    export type fournisseurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = fournisseurDefaultArgs<ExtArgs>
    /**
     * @deprecated Use lignefactureDefaultArgs instead
     */
    export type lignefactureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = lignefactureDefaultArgs<ExtArgs>
    /**
     * @deprecated Use produitDefaultArgs instead
     */
    export type produitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = produitDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}