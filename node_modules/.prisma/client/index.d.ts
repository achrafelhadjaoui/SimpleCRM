
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Entreprise
 * 
 */
export type Entreprise = $Result.DefaultSelection<Prisma.$EntreprisePayload>
/**
 * Model Produit
 * 
 */
export type Produit = $Result.DefaultSelection<Prisma.$ProduitPayload>
/**
 * Model Client
 * 
 */
export type Client = $Result.DefaultSelection<Prisma.$ClientPayload>
/**
 * Model Fournisseur
 * 
 */
export type Fournisseur = $Result.DefaultSelection<Prisma.$FournisseurPayload>
/**
 * Model Facture
 * 
 */
export type Facture = $Result.DefaultSelection<Prisma.$FacturePayload>
/**
 * Model LigneFacture
 * 
 */
export type LigneFacture = $Result.DefaultSelection<Prisma.$LigneFacturePayload>
/**
 * Model CommandeFournisseur
 * 
 */
export type CommandeFournisseur = $Result.DefaultSelection<Prisma.$CommandeFournisseurPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Entreprises
 * const entreprises = await prisma.entreprise.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Entreprises
   * const entreprises = await prisma.entreprise.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.entreprise`: Exposes CRUD operations for the **Entreprise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Entreprises
    * const entreprises = await prisma.entreprise.findMany()
    * ```
    */
  get entreprise(): Prisma.EntrepriseDelegate<ExtArgs>;

  /**
   * `prisma.produit`: Exposes CRUD operations for the **Produit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produits
    * const produits = await prisma.produit.findMany()
    * ```
    */
  get produit(): Prisma.ProduitDelegate<ExtArgs>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs>;

  /**
   * `prisma.fournisseur`: Exposes CRUD operations for the **Fournisseur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fournisseurs
    * const fournisseurs = await prisma.fournisseur.findMany()
    * ```
    */
  get fournisseur(): Prisma.FournisseurDelegate<ExtArgs>;

  /**
   * `prisma.facture`: Exposes CRUD operations for the **Facture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Factures
    * const factures = await prisma.facture.findMany()
    * ```
    */
  get facture(): Prisma.FactureDelegate<ExtArgs>;

  /**
   * `prisma.ligneFacture`: Exposes CRUD operations for the **LigneFacture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LigneFactures
    * const ligneFactures = await prisma.ligneFacture.findMany()
    * ```
    */
  get ligneFacture(): Prisma.LigneFactureDelegate<ExtArgs>;

  /**
   * `prisma.commandeFournisseur`: Exposes CRUD operations for the **CommandeFournisseur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommandeFournisseurs
    * const commandeFournisseurs = await prisma.commandeFournisseur.findMany()
    * ```
    */
  get commandeFournisseur(): Prisma.CommandeFournisseurDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Entreprise: 'Entreprise',
    Produit: 'Produit',
    Client: 'Client',
    Fournisseur: 'Fournisseur',
    Facture: 'Facture',
    LigneFacture: 'LigneFacture',
    CommandeFournisseur: 'CommandeFournisseur'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'entreprise' | 'produit' | 'client' | 'fournisseur' | 'facture' | 'ligneFacture' | 'commandeFournisseur'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Entreprise: {
        payload: Prisma.$EntreprisePayload<ExtArgs>
        fields: Prisma.EntrepriseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EntrepriseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EntrepriseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          findFirst: {
            args: Prisma.EntrepriseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EntrepriseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          findMany: {
            args: Prisma.EntrepriseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>[]
          }
          create: {
            args: Prisma.EntrepriseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          createMany: {
            args: Prisma.EntrepriseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EntrepriseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          update: {
            args: Prisma.EntrepriseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          deleteMany: {
            args: Prisma.EntrepriseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EntrepriseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EntrepriseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          aggregate: {
            args: Prisma.EntrepriseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEntreprise>
          }
          groupBy: {
            args: Prisma.EntrepriseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EntrepriseGroupByOutputType>[]
          }
          count: {
            args: Prisma.EntrepriseCountArgs<ExtArgs>,
            result: $Utils.Optional<EntrepriseCountAggregateOutputType> | number
          }
        }
      }
      Produit: {
        payload: Prisma.$ProduitPayload<ExtArgs>
        fields: Prisma.ProduitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProduitFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProduitFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          findFirst: {
            args: Prisma.ProduitFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProduitFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          findMany: {
            args: Prisma.ProduitFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>[]
          }
          create: {
            args: Prisma.ProduitCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          createMany: {
            args: Prisma.ProduitCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProduitDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          update: {
            args: Prisma.ProduitUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          deleteMany: {
            args: Prisma.ProduitDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProduitUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProduitUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          aggregate: {
            args: Prisma.ProduitAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduit>
          }
          groupBy: {
            args: Prisma.ProduitGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProduitGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProduitCountArgs<ExtArgs>,
            result: $Utils.Optional<ProduitCountAggregateOutputType> | number
          }
        }
      }
      Client: {
        payload: Prisma.$ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>,
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      Fournisseur: {
        payload: Prisma.$FournisseurPayload<ExtArgs>
        fields: Prisma.FournisseurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FournisseurFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FournisseurFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>
          }
          findFirst: {
            args: Prisma.FournisseurFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FournisseurFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>
          }
          findMany: {
            args: Prisma.FournisseurFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>[]
          }
          create: {
            args: Prisma.FournisseurCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>
          }
          createMany: {
            args: Prisma.FournisseurCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FournisseurDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>
          }
          update: {
            args: Prisma.FournisseurUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>
          }
          deleteMany: {
            args: Prisma.FournisseurDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FournisseurUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FournisseurUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>
          }
          aggregate: {
            args: Prisma.FournisseurAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFournisseur>
          }
          groupBy: {
            args: Prisma.FournisseurGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FournisseurGroupByOutputType>[]
          }
          count: {
            args: Prisma.FournisseurCountArgs<ExtArgs>,
            result: $Utils.Optional<FournisseurCountAggregateOutputType> | number
          }
        }
      }
      Facture: {
        payload: Prisma.$FacturePayload<ExtArgs>
        fields: Prisma.FactureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FactureFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FactureFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>
          }
          findFirst: {
            args: Prisma.FactureFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FactureFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>
          }
          findMany: {
            args: Prisma.FactureFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>[]
          }
          create: {
            args: Prisma.FactureCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>
          }
          createMany: {
            args: Prisma.FactureCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FactureDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>
          }
          update: {
            args: Prisma.FactureUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>
          }
          deleteMany: {
            args: Prisma.FactureDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FactureUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FactureUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>
          }
          aggregate: {
            args: Prisma.FactureAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFacture>
          }
          groupBy: {
            args: Prisma.FactureGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FactureGroupByOutputType>[]
          }
          count: {
            args: Prisma.FactureCountArgs<ExtArgs>,
            result: $Utils.Optional<FactureCountAggregateOutputType> | number
          }
        }
      }
      LigneFacture: {
        payload: Prisma.$LigneFacturePayload<ExtArgs>
        fields: Prisma.LigneFactureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LigneFactureFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LigneFacturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LigneFactureFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LigneFacturePayload>
          }
          findFirst: {
            args: Prisma.LigneFactureFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LigneFacturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LigneFactureFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LigneFacturePayload>
          }
          findMany: {
            args: Prisma.LigneFactureFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LigneFacturePayload>[]
          }
          create: {
            args: Prisma.LigneFactureCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LigneFacturePayload>
          }
          createMany: {
            args: Prisma.LigneFactureCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LigneFactureDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LigneFacturePayload>
          }
          update: {
            args: Prisma.LigneFactureUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LigneFacturePayload>
          }
          deleteMany: {
            args: Prisma.LigneFactureDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LigneFactureUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LigneFactureUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LigneFacturePayload>
          }
          aggregate: {
            args: Prisma.LigneFactureAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLigneFacture>
          }
          groupBy: {
            args: Prisma.LigneFactureGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LigneFactureGroupByOutputType>[]
          }
          count: {
            args: Prisma.LigneFactureCountArgs<ExtArgs>,
            result: $Utils.Optional<LigneFactureCountAggregateOutputType> | number
          }
        }
      }
      CommandeFournisseur: {
        payload: Prisma.$CommandeFournisseurPayload<ExtArgs>
        fields: Prisma.CommandeFournisseurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommandeFournisseurFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommandeFournisseurFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>
          }
          findFirst: {
            args: Prisma.CommandeFournisseurFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommandeFournisseurFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>
          }
          findMany: {
            args: Prisma.CommandeFournisseurFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>[]
          }
          create: {
            args: Prisma.CommandeFournisseurCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>
          }
          createMany: {
            args: Prisma.CommandeFournisseurCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CommandeFournisseurDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>
          }
          update: {
            args: Prisma.CommandeFournisseurUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>
          }
          deleteMany: {
            args: Prisma.CommandeFournisseurDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommandeFournisseurUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommandeFournisseurUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>
          }
          aggregate: {
            args: Prisma.CommandeFournisseurAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCommandeFournisseur>
          }
          groupBy: {
            args: Prisma.CommandeFournisseurGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommandeFournisseurGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommandeFournisseurCountArgs<ExtArgs>,
            result: $Utils.Optional<CommandeFournisseurCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProduitCountOutputType
   */

  export type ProduitCountOutputType = {
    lignes: number
  }

  export type ProduitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lignes?: boolean | ProduitCountOutputTypeCountLignesArgs
  }

  // Custom InputTypes
  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProduitCountOutputType
     */
    select?: ProduitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeCountLignesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LigneFactureWhereInput
  }


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    factures: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    factures?: boolean | ClientCountOutputTypeCountFacturesArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountFacturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FactureWhereInput
  }


  /**
   * Count Type FournisseurCountOutputType
   */

  export type FournisseurCountOutputType = {
    commandes: number
  }

  export type FournisseurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commandes?: boolean | FournisseurCountOutputTypeCountCommandesArgs
  }

  // Custom InputTypes
  /**
   * FournisseurCountOutputType without action
   */
  export type FournisseurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FournisseurCountOutputType
     */
    select?: FournisseurCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FournisseurCountOutputType without action
   */
  export type FournisseurCountOutputTypeCountCommandesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandeFournisseurWhereInput
  }


  /**
   * Count Type FactureCountOutputType
   */

  export type FactureCountOutputType = {
    lignes: number
  }

  export type FactureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lignes?: boolean | FactureCountOutputTypeCountLignesArgs
  }

  // Custom InputTypes
  /**
   * FactureCountOutputType without action
   */
  export type FactureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureCountOutputType
     */
    select?: FactureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FactureCountOutputType without action
   */
  export type FactureCountOutputTypeCountLignesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LigneFactureWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Entreprise
   */

  export type AggregateEntreprise = {
    _count: EntrepriseCountAggregateOutputType | null
    _avg: EntrepriseAvgAggregateOutputType | null
    _sum: EntrepriseSumAggregateOutputType | null
    _min: EntrepriseMinAggregateOutputType | null
    _max: EntrepriseMaxAggregateOutputType | null
  }

  export type EntrepriseAvgAggregateOutputType = {
    id: number | null
    capital: number | null
    nombreEmployes: number | null
  }

  export type EntrepriseSumAggregateOutputType = {
    id: number | null
    capital: number | null
    nombreEmployes: number | null
  }

  export type EntrepriseMinAggregateOutputType = {
    id: number | null
    nom: string | null
    siegeSocial: string | null
    dateCreation: Date | null
    identifiantFiscal: string | null
    capital: number | null
    nombreEmployes: number | null
    ville: string | null
    responsable: string | null
    numeroTelephone: string | null
    email: string | null
  }

  export type EntrepriseMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    siegeSocial: string | null
    dateCreation: Date | null
    identifiantFiscal: string | null
    capital: number | null
    nombreEmployes: number | null
    ville: string | null
    responsable: string | null
    numeroTelephone: string | null
    email: string | null
  }

  export type EntrepriseCountAggregateOutputType = {
    id: number
    nom: number
    siegeSocial: number
    dateCreation: number
    identifiantFiscal: number
    capital: number
    nombreEmployes: number
    ville: number
    responsable: number
    numeroTelephone: number
    email: number
    _all: number
  }


  export type EntrepriseAvgAggregateInputType = {
    id?: true
    capital?: true
    nombreEmployes?: true
  }

  export type EntrepriseSumAggregateInputType = {
    id?: true
    capital?: true
    nombreEmployes?: true
  }

  export type EntrepriseMinAggregateInputType = {
    id?: true
    nom?: true
    siegeSocial?: true
    dateCreation?: true
    identifiantFiscal?: true
    capital?: true
    nombreEmployes?: true
    ville?: true
    responsable?: true
    numeroTelephone?: true
    email?: true
  }

  export type EntrepriseMaxAggregateInputType = {
    id?: true
    nom?: true
    siegeSocial?: true
    dateCreation?: true
    identifiantFiscal?: true
    capital?: true
    nombreEmployes?: true
    ville?: true
    responsable?: true
    numeroTelephone?: true
    email?: true
  }

  export type EntrepriseCountAggregateInputType = {
    id?: true
    nom?: true
    siegeSocial?: true
    dateCreation?: true
    identifiantFiscal?: true
    capital?: true
    nombreEmployes?: true
    ville?: true
    responsable?: true
    numeroTelephone?: true
    email?: true
    _all?: true
  }

  export type EntrepriseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entreprise to aggregate.
     */
    where?: EntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entreprises to fetch.
     */
    orderBy?: EntrepriseOrderByWithRelationInput | EntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Entreprises
    **/
    _count?: true | EntrepriseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EntrepriseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EntrepriseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EntrepriseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EntrepriseMaxAggregateInputType
  }

  export type GetEntrepriseAggregateType<T extends EntrepriseAggregateArgs> = {
        [P in keyof T & keyof AggregateEntreprise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEntreprise[P]>
      : GetScalarType<T[P], AggregateEntreprise[P]>
  }




  export type EntrepriseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntrepriseWhereInput
    orderBy?: EntrepriseOrderByWithAggregationInput | EntrepriseOrderByWithAggregationInput[]
    by: EntrepriseScalarFieldEnum[] | EntrepriseScalarFieldEnum
    having?: EntrepriseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EntrepriseCountAggregateInputType | true
    _avg?: EntrepriseAvgAggregateInputType
    _sum?: EntrepriseSumAggregateInputType
    _min?: EntrepriseMinAggregateInputType
    _max?: EntrepriseMaxAggregateInputType
  }

  export type EntrepriseGroupByOutputType = {
    id: number
    nom: string
    siegeSocial: string
    dateCreation: Date
    identifiantFiscal: string
    capital: number
    nombreEmployes: number
    ville: string
    responsable: string
    numeroTelephone: string
    email: string
    _count: EntrepriseCountAggregateOutputType | null
    _avg: EntrepriseAvgAggregateOutputType | null
    _sum: EntrepriseSumAggregateOutputType | null
    _min: EntrepriseMinAggregateOutputType | null
    _max: EntrepriseMaxAggregateOutputType | null
  }

  type GetEntrepriseGroupByPayload<T extends EntrepriseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EntrepriseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EntrepriseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EntrepriseGroupByOutputType[P]>
            : GetScalarType<T[P], EntrepriseGroupByOutputType[P]>
        }
      >
    >


  export type EntrepriseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    siegeSocial?: boolean
    dateCreation?: boolean
    identifiantFiscal?: boolean
    capital?: boolean
    nombreEmployes?: boolean
    ville?: boolean
    responsable?: boolean
    numeroTelephone?: boolean
    email?: boolean
  }, ExtArgs["result"]["entreprise"]>

  export type EntrepriseSelectScalar = {
    id?: boolean
    nom?: boolean
    siegeSocial?: boolean
    dateCreation?: boolean
    identifiantFiscal?: boolean
    capital?: boolean
    nombreEmployes?: boolean
    ville?: boolean
    responsable?: boolean
    numeroTelephone?: boolean
    email?: boolean
  }



  export type $EntreprisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Entreprise"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      siegeSocial: string
      dateCreation: Date
      identifiantFiscal: string
      capital: number
      nombreEmployes: number
      ville: string
      responsable: string
      numeroTelephone: string
      email: string
    }, ExtArgs["result"]["entreprise"]>
    composites: {}
  }


  type EntrepriseGetPayload<S extends boolean | null | undefined | EntrepriseDefaultArgs> = $Result.GetResult<Prisma.$EntreprisePayload, S>

  type EntrepriseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EntrepriseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EntrepriseCountAggregateInputType | true
    }

  export interface EntrepriseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Entreprise'], meta: { name: 'Entreprise' } }
    /**
     * Find zero or one Entreprise that matches the filter.
     * @param {EntrepriseFindUniqueArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EntrepriseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EntrepriseFindUniqueArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Entreprise that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EntrepriseFindUniqueOrThrowArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EntrepriseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EntrepriseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Entreprise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseFindFirstArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EntrepriseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EntrepriseFindFirstArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Entreprise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseFindFirstOrThrowArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EntrepriseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EntrepriseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Entreprises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Entreprises
     * const entreprises = await prisma.entreprise.findMany()
     * 
     * // Get first 10 Entreprises
     * const entreprises = await prisma.entreprise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const entrepriseWithIdOnly = await prisma.entreprise.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EntrepriseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EntrepriseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Entreprise.
     * @param {EntrepriseCreateArgs} args - Arguments to create a Entreprise.
     * @example
     * // Create one Entreprise
     * const Entreprise = await prisma.entreprise.create({
     *   data: {
     *     // ... data to create a Entreprise
     *   }
     * })
     * 
    **/
    create<T extends EntrepriseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EntrepriseCreateArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Entreprises.
     *     @param {EntrepriseCreateManyArgs} args - Arguments to create many Entreprises.
     *     @example
     *     // Create many Entreprises
     *     const entreprise = await prisma.entreprise.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EntrepriseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EntrepriseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Entreprise.
     * @param {EntrepriseDeleteArgs} args - Arguments to delete one Entreprise.
     * @example
     * // Delete one Entreprise
     * const Entreprise = await prisma.entreprise.delete({
     *   where: {
     *     // ... filter to delete one Entreprise
     *   }
     * })
     * 
    **/
    delete<T extends EntrepriseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EntrepriseDeleteArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Entreprise.
     * @param {EntrepriseUpdateArgs} args - Arguments to update one Entreprise.
     * @example
     * // Update one Entreprise
     * const entreprise = await prisma.entreprise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EntrepriseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EntrepriseUpdateArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Entreprises.
     * @param {EntrepriseDeleteManyArgs} args - Arguments to filter Entreprises to delete.
     * @example
     * // Delete a few Entreprises
     * const { count } = await prisma.entreprise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EntrepriseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EntrepriseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Entreprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Entreprises
     * const entreprise = await prisma.entreprise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EntrepriseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EntrepriseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Entreprise.
     * @param {EntrepriseUpsertArgs} args - Arguments to update or create a Entreprise.
     * @example
     * // Update or create a Entreprise
     * const entreprise = await prisma.entreprise.upsert({
     *   create: {
     *     // ... data to create a Entreprise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Entreprise we want to update
     *   }
     * })
    **/
    upsert<T extends EntrepriseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EntrepriseUpsertArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Entreprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseCountArgs} args - Arguments to filter Entreprises to count.
     * @example
     * // Count the number of Entreprises
     * const count = await prisma.entreprise.count({
     *   where: {
     *     // ... the filter for the Entreprises we want to count
     *   }
     * })
    **/
    count<T extends EntrepriseCountArgs>(
      args?: Subset<T, EntrepriseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EntrepriseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Entreprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EntrepriseAggregateArgs>(args: Subset<T, EntrepriseAggregateArgs>): Prisma.PrismaPromise<GetEntrepriseAggregateType<T>>

    /**
     * Group by Entreprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EntrepriseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EntrepriseGroupByArgs['orderBy'] }
        : { orderBy?: EntrepriseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EntrepriseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntrepriseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Entreprise model
   */
  readonly fields: EntrepriseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Entreprise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EntrepriseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Entreprise model
   */ 
  interface EntrepriseFieldRefs {
    readonly id: FieldRef<"Entreprise", 'Int'>
    readonly nom: FieldRef<"Entreprise", 'String'>
    readonly siegeSocial: FieldRef<"Entreprise", 'String'>
    readonly dateCreation: FieldRef<"Entreprise", 'DateTime'>
    readonly identifiantFiscal: FieldRef<"Entreprise", 'String'>
    readonly capital: FieldRef<"Entreprise", 'Float'>
    readonly nombreEmployes: FieldRef<"Entreprise", 'Int'>
    readonly ville: FieldRef<"Entreprise", 'String'>
    readonly responsable: FieldRef<"Entreprise", 'String'>
    readonly numeroTelephone: FieldRef<"Entreprise", 'String'>
    readonly email: FieldRef<"Entreprise", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Entreprise findUnique
   */
  export type EntrepriseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which Entreprise to fetch.
     */
    where: EntrepriseWhereUniqueInput
  }

  /**
   * Entreprise findUniqueOrThrow
   */
  export type EntrepriseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which Entreprise to fetch.
     */
    where: EntrepriseWhereUniqueInput
  }

  /**
   * Entreprise findFirst
   */
  export type EntrepriseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which Entreprise to fetch.
     */
    where?: EntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entreprises to fetch.
     */
    orderBy?: EntrepriseOrderByWithRelationInput | EntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entreprises.
     */
    cursor?: EntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entreprises.
     */
    distinct?: EntrepriseScalarFieldEnum | EntrepriseScalarFieldEnum[]
  }

  /**
   * Entreprise findFirstOrThrow
   */
  export type EntrepriseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which Entreprise to fetch.
     */
    where?: EntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entreprises to fetch.
     */
    orderBy?: EntrepriseOrderByWithRelationInput | EntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entreprises.
     */
    cursor?: EntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entreprises.
     */
    distinct?: EntrepriseScalarFieldEnum | EntrepriseScalarFieldEnum[]
  }

  /**
   * Entreprise findMany
   */
  export type EntrepriseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which Entreprises to fetch.
     */
    where?: EntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entreprises to fetch.
     */
    orderBy?: EntrepriseOrderByWithRelationInput | EntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Entreprises.
     */
    cursor?: EntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entreprises.
     */
    skip?: number
    distinct?: EntrepriseScalarFieldEnum | EntrepriseScalarFieldEnum[]
  }

  /**
   * Entreprise create
   */
  export type EntrepriseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * The data needed to create a Entreprise.
     */
    data: XOR<EntrepriseCreateInput, EntrepriseUncheckedCreateInput>
  }

  /**
   * Entreprise createMany
   */
  export type EntrepriseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Entreprises.
     */
    data: EntrepriseCreateManyInput | EntrepriseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Entreprise update
   */
  export type EntrepriseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * The data needed to update a Entreprise.
     */
    data: XOR<EntrepriseUpdateInput, EntrepriseUncheckedUpdateInput>
    /**
     * Choose, which Entreprise to update.
     */
    where: EntrepriseWhereUniqueInput
  }

  /**
   * Entreprise updateMany
   */
  export type EntrepriseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Entreprises.
     */
    data: XOR<EntrepriseUpdateManyMutationInput, EntrepriseUncheckedUpdateManyInput>
    /**
     * Filter which Entreprises to update
     */
    where?: EntrepriseWhereInput
  }

  /**
   * Entreprise upsert
   */
  export type EntrepriseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * The filter to search for the Entreprise to update in case it exists.
     */
    where: EntrepriseWhereUniqueInput
    /**
     * In case the Entreprise found by the `where` argument doesn't exist, create a new Entreprise with this data.
     */
    create: XOR<EntrepriseCreateInput, EntrepriseUncheckedCreateInput>
    /**
     * In case the Entreprise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EntrepriseUpdateInput, EntrepriseUncheckedUpdateInput>
  }

  /**
   * Entreprise delete
   */
  export type EntrepriseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Filter which Entreprise to delete.
     */
    where: EntrepriseWhereUniqueInput
  }

  /**
   * Entreprise deleteMany
   */
  export type EntrepriseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entreprises to delete
     */
    where?: EntrepriseWhereInput
  }

  /**
   * Entreprise without action
   */
  export type EntrepriseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
  }


  /**
   * Model Produit
   */

  export type AggregateProduit = {
    _count: ProduitCountAggregateOutputType | null
    _avg: ProduitAvgAggregateOutputType | null
    _sum: ProduitSumAggregateOutputType | null
    _min: ProduitMinAggregateOutputType | null
    _max: ProduitMaxAggregateOutputType | null
  }

  export type ProduitAvgAggregateOutputType = {
    id: number | null
    prixAchat: number | null
    prixVente: number | null
    tauxMarge: number | null
  }

  export type ProduitSumAggregateOutputType = {
    id: number | null
    prixAchat: number | null
    prixVente: number | null
    tauxMarge: number | null
  }

  export type ProduitMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prixAchat: number | null
    prixVente: number | null
    tauxMarge: number | null
    dimension: string | null
    taille: string | null
  }

  export type ProduitMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prixAchat: number | null
    prixVente: number | null
    tauxMarge: number | null
    dimension: string | null
    taille: string | null
  }

  export type ProduitCountAggregateOutputType = {
    id: number
    nom: number
    prixAchat: number
    prixVente: number
    tauxMarge: number
    dimension: number
    taille: number
    _all: number
  }


  export type ProduitAvgAggregateInputType = {
    id?: true
    prixAchat?: true
    prixVente?: true
    tauxMarge?: true
  }

  export type ProduitSumAggregateInputType = {
    id?: true
    prixAchat?: true
    prixVente?: true
    tauxMarge?: true
  }

  export type ProduitMinAggregateInputType = {
    id?: true
    nom?: true
    prixAchat?: true
    prixVente?: true
    tauxMarge?: true
    dimension?: true
    taille?: true
  }

  export type ProduitMaxAggregateInputType = {
    id?: true
    nom?: true
    prixAchat?: true
    prixVente?: true
    tauxMarge?: true
    dimension?: true
    taille?: true
  }

  export type ProduitCountAggregateInputType = {
    id?: true
    nom?: true
    prixAchat?: true
    prixVente?: true
    tauxMarge?: true
    dimension?: true
    taille?: true
    _all?: true
  }

  export type ProduitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produit to aggregate.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produits
    **/
    _count?: true | ProduitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProduitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProduitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProduitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProduitMaxAggregateInputType
  }

  export type GetProduitAggregateType<T extends ProduitAggregateArgs> = {
        [P in keyof T & keyof AggregateProduit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduit[P]>
      : GetScalarType<T[P], AggregateProduit[P]>
  }




  export type ProduitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProduitWhereInput
    orderBy?: ProduitOrderByWithAggregationInput | ProduitOrderByWithAggregationInput[]
    by: ProduitScalarFieldEnum[] | ProduitScalarFieldEnum
    having?: ProduitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProduitCountAggregateInputType | true
    _avg?: ProduitAvgAggregateInputType
    _sum?: ProduitSumAggregateInputType
    _min?: ProduitMinAggregateInputType
    _max?: ProduitMaxAggregateInputType
  }

  export type ProduitGroupByOutputType = {
    id: number
    nom: string
    prixAchat: number
    prixVente: number
    tauxMarge: number
    dimension: string
    taille: string
    _count: ProduitCountAggregateOutputType | null
    _avg: ProduitAvgAggregateOutputType | null
    _sum: ProduitSumAggregateOutputType | null
    _min: ProduitMinAggregateOutputType | null
    _max: ProduitMaxAggregateOutputType | null
  }

  type GetProduitGroupByPayload<T extends ProduitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProduitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProduitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProduitGroupByOutputType[P]>
            : GetScalarType<T[P], ProduitGroupByOutputType[P]>
        }
      >
    >


  export type ProduitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prixAchat?: boolean
    prixVente?: boolean
    tauxMarge?: boolean
    dimension?: boolean
    taille?: boolean
    lignes?: boolean | Produit$lignesArgs<ExtArgs>
    _count?: boolean | ProduitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produit"]>

  export type ProduitSelectScalar = {
    id?: boolean
    nom?: boolean
    prixAchat?: boolean
    prixVente?: boolean
    tauxMarge?: boolean
    dimension?: boolean
    taille?: boolean
  }


  export type ProduitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lignes?: boolean | Produit$lignesArgs<ExtArgs>
    _count?: boolean | ProduitCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProduitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produit"
    objects: {
      lignes: Prisma.$LigneFacturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      prixAchat: number
      prixVente: number
      tauxMarge: number
      dimension: string
      taille: string
    }, ExtArgs["result"]["produit"]>
    composites: {}
  }


  type ProduitGetPayload<S extends boolean | null | undefined | ProduitDefaultArgs> = $Result.GetResult<Prisma.$ProduitPayload, S>

  type ProduitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProduitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProduitCountAggregateInputType | true
    }

  export interface ProduitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produit'], meta: { name: 'Produit' } }
    /**
     * Find zero or one Produit that matches the filter.
     * @param {ProduitFindUniqueArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProduitFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProduitFindUniqueArgs<ExtArgs>>
    ): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Produit that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProduitFindUniqueOrThrowArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProduitFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProduitFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Produit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindFirstArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProduitFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProduitFindFirstArgs<ExtArgs>>
    ): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Produit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindFirstOrThrowArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProduitFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProduitFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Produits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produits
     * const produits = await prisma.produit.findMany()
     * 
     * // Get first 10 Produits
     * const produits = await prisma.produit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produitWithIdOnly = await prisma.produit.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProduitFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProduitFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Produit.
     * @param {ProduitCreateArgs} args - Arguments to create a Produit.
     * @example
     * // Create one Produit
     * const Produit = await prisma.produit.create({
     *   data: {
     *     // ... data to create a Produit
     *   }
     * })
     * 
    **/
    create<T extends ProduitCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProduitCreateArgs<ExtArgs>>
    ): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Produits.
     *     @param {ProduitCreateManyArgs} args - Arguments to create many Produits.
     *     @example
     *     // Create many Produits
     *     const produit = await prisma.produit.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProduitCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProduitCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produit.
     * @param {ProduitDeleteArgs} args - Arguments to delete one Produit.
     * @example
     * // Delete one Produit
     * const Produit = await prisma.produit.delete({
     *   where: {
     *     // ... filter to delete one Produit
     *   }
     * })
     * 
    **/
    delete<T extends ProduitDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProduitDeleteArgs<ExtArgs>>
    ): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Produit.
     * @param {ProduitUpdateArgs} args - Arguments to update one Produit.
     * @example
     * // Update one Produit
     * const produit = await prisma.produit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProduitUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProduitUpdateArgs<ExtArgs>>
    ): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Produits.
     * @param {ProduitDeleteManyArgs} args - Arguments to filter Produits to delete.
     * @example
     * // Delete a few Produits
     * const { count } = await prisma.produit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProduitDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProduitDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produits
     * const produit = await prisma.produit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProduitUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProduitUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produit.
     * @param {ProduitUpsertArgs} args - Arguments to update or create a Produit.
     * @example
     * // Update or create a Produit
     * const produit = await prisma.produit.upsert({
     *   create: {
     *     // ... data to create a Produit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produit we want to update
     *   }
     * })
    **/
    upsert<T extends ProduitUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProduitUpsertArgs<ExtArgs>>
    ): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Produits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitCountArgs} args - Arguments to filter Produits to count.
     * @example
     * // Count the number of Produits
     * const count = await prisma.produit.count({
     *   where: {
     *     // ... the filter for the Produits we want to count
     *   }
     * })
    **/
    count<T extends ProduitCountArgs>(
      args?: Subset<T, ProduitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProduitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProduitAggregateArgs>(args: Subset<T, ProduitAggregateArgs>): Prisma.PrismaPromise<GetProduitAggregateType<T>>

    /**
     * Group by Produit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProduitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProduitGroupByArgs['orderBy'] }
        : { orderBy?: ProduitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProduitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produit model
   */
  readonly fields: ProduitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProduitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    lignes<T extends Produit$lignesArgs<ExtArgs> = {}>(args?: Subset<T, Produit$lignesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LigneFacturePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Produit model
   */ 
  interface ProduitFieldRefs {
    readonly id: FieldRef<"Produit", 'Int'>
    readonly nom: FieldRef<"Produit", 'String'>
    readonly prixAchat: FieldRef<"Produit", 'Float'>
    readonly prixVente: FieldRef<"Produit", 'Float'>
    readonly tauxMarge: FieldRef<"Produit", 'Float'>
    readonly dimension: FieldRef<"Produit", 'String'>
    readonly taille: FieldRef<"Produit", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Produit findUnique
   */
  export type ProduitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit findUniqueOrThrow
   */
  export type ProduitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit findFirst
   */
  export type ProduitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produits.
     */
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit findFirstOrThrow
   */
  export type ProduitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produits.
     */
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit findMany
   */
  export type ProduitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produits to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit create
   */
  export type ProduitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The data needed to create a Produit.
     */
    data: XOR<ProduitCreateInput, ProduitUncheckedCreateInput>
  }

  /**
   * Produit createMany
   */
  export type ProduitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produits.
     */
    data: ProduitCreateManyInput | ProduitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Produit update
   */
  export type ProduitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The data needed to update a Produit.
     */
    data: XOR<ProduitUpdateInput, ProduitUncheckedUpdateInput>
    /**
     * Choose, which Produit to update.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit updateMany
   */
  export type ProduitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produits.
     */
    data: XOR<ProduitUpdateManyMutationInput, ProduitUncheckedUpdateManyInput>
    /**
     * Filter which Produits to update
     */
    where?: ProduitWhereInput
  }

  /**
   * Produit upsert
   */
  export type ProduitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The filter to search for the Produit to update in case it exists.
     */
    where: ProduitWhereUniqueInput
    /**
     * In case the Produit found by the `where` argument doesn't exist, create a new Produit with this data.
     */
    create: XOR<ProduitCreateInput, ProduitUncheckedCreateInput>
    /**
     * In case the Produit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProduitUpdateInput, ProduitUncheckedUpdateInput>
  }

  /**
   * Produit delete
   */
  export type ProduitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter which Produit to delete.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit deleteMany
   */
  export type ProduitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produits to delete
     */
    where?: ProduitWhereInput
  }

  /**
   * Produit.lignes
   */
  export type Produit$lignesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneFacture
     */
    select?: LigneFactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneFactureInclude<ExtArgs> | null
    where?: LigneFactureWhereInput
    orderBy?: LigneFactureOrderByWithRelationInput | LigneFactureOrderByWithRelationInput[]
    cursor?: LigneFactureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LigneFactureScalarFieldEnum | LigneFactureScalarFieldEnum[]
  }

  /**
   * Produit without action
   */
  export type ProduitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
  }


  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientSumAggregateOutputType = {
    id: number | null
  }

  export type ClientMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    adresse: string | null
    ville: string | null
    numeroTelephone: string | null
    email: string | null
  }

  export type ClientMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    adresse: string | null
    ville: string | null
    numeroTelephone: string | null
    email: string | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    nom: number
    prenom: number
    adresse: number
    ville: number
    numeroTelephone: number
    email: number
    _all: number
  }


  export type ClientAvgAggregateInputType = {
    id?: true
  }

  export type ClientSumAggregateInputType = {
    id?: true
  }

  export type ClientMinAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    adresse?: true
    ville?: true
    numeroTelephone?: true
    email?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    adresse?: true
    ville?: true
    numeroTelephone?: true
    email?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    adresse?: true
    ville?: true
    numeroTelephone?: true
    email?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _avg?: ClientAvgAggregateInputType
    _sum?: ClientSumAggregateInputType
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: number
    nom: string
    prenom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    adresse?: boolean
    ville?: boolean
    numeroTelephone?: boolean
    email?: boolean
    factures?: boolean | Client$facturesArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectScalar = {
    id?: boolean
    nom?: boolean
    prenom?: boolean
    adresse?: boolean
    ville?: boolean
    numeroTelephone?: boolean
    email?: boolean
  }


  export type ClientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    factures?: boolean | Client$facturesArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ClientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Client"
    objects: {
      factures: Prisma.$FacturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      prenom: string
      adresse: string
      ville: string
      numeroTelephone: string
      email: string
    }, ExtArgs["result"]["client"]>
    composites: {}
  }


  type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = $Result.GetResult<Prisma.$ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Client that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClientFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
    **/
    create<T extends ClientCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClientCreateArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Clients.
     *     @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     *     @example
     *     // Create many Clients
     *     const client = await prisma.client.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
    **/
    delete<T extends ClientDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
    **/
    upsert<T extends ClientUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    factures<T extends Client$facturesArgs<ExtArgs> = {}>(args?: Subset<T, Client$facturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Client model
   */ 
  interface ClientFieldRefs {
    readonly id: FieldRef<"Client", 'Int'>
    readonly nom: FieldRef<"Client", 'String'>
    readonly prenom: FieldRef<"Client", 'String'>
    readonly adresse: FieldRef<"Client", 'String'>
    readonly ville: FieldRef<"Client", 'String'>
    readonly numeroTelephone: FieldRef<"Client", 'String'>
    readonly email: FieldRef<"Client", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }

  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
  }

  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }

  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
  }

  /**
   * Client.factures
   */
  export type Client$facturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    where?: FactureWhereInput
    orderBy?: FactureOrderByWithRelationInput | FactureOrderByWithRelationInput[]
    cursor?: FactureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FactureScalarFieldEnum | FactureScalarFieldEnum[]
  }

  /**
   * Client without action
   */
  export type ClientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
  }


  /**
   * Model Fournisseur
   */

  export type AggregateFournisseur = {
    _count: FournisseurCountAggregateOutputType | null
    _avg: FournisseurAvgAggregateOutputType | null
    _sum: FournisseurSumAggregateOutputType | null
    _min: FournisseurMinAggregateOutputType | null
    _max: FournisseurMaxAggregateOutputType | null
  }

  export type FournisseurAvgAggregateOutputType = {
    id: number | null
  }

  export type FournisseurSumAggregateOutputType = {
    id: number | null
  }

  export type FournisseurMinAggregateOutputType = {
    id: number | null
    nom: string | null
    adresse: string | null
    ville: string | null
    numeroTelephone: string | null
    email: string | null
  }

  export type FournisseurMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    adresse: string | null
    ville: string | null
    numeroTelephone: string | null
    email: string | null
  }

  export type FournisseurCountAggregateOutputType = {
    id: number
    nom: number
    adresse: number
    ville: number
    numeroTelephone: number
    email: number
    _all: number
  }


  export type FournisseurAvgAggregateInputType = {
    id?: true
  }

  export type FournisseurSumAggregateInputType = {
    id?: true
  }

  export type FournisseurMinAggregateInputType = {
    id?: true
    nom?: true
    adresse?: true
    ville?: true
    numeroTelephone?: true
    email?: true
  }

  export type FournisseurMaxAggregateInputType = {
    id?: true
    nom?: true
    adresse?: true
    ville?: true
    numeroTelephone?: true
    email?: true
  }

  export type FournisseurCountAggregateInputType = {
    id?: true
    nom?: true
    adresse?: true
    ville?: true
    numeroTelephone?: true
    email?: true
    _all?: true
  }

  export type FournisseurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fournisseur to aggregate.
     */
    where?: FournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fournisseurs to fetch.
     */
    orderBy?: FournisseurOrderByWithRelationInput | FournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fournisseurs
    **/
    _count?: true | FournisseurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FournisseurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FournisseurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FournisseurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FournisseurMaxAggregateInputType
  }

  export type GetFournisseurAggregateType<T extends FournisseurAggregateArgs> = {
        [P in keyof T & keyof AggregateFournisseur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFournisseur[P]>
      : GetScalarType<T[P], AggregateFournisseur[P]>
  }




  export type FournisseurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FournisseurWhereInput
    orderBy?: FournisseurOrderByWithAggregationInput | FournisseurOrderByWithAggregationInput[]
    by: FournisseurScalarFieldEnum[] | FournisseurScalarFieldEnum
    having?: FournisseurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FournisseurCountAggregateInputType | true
    _avg?: FournisseurAvgAggregateInputType
    _sum?: FournisseurSumAggregateInputType
    _min?: FournisseurMinAggregateInputType
    _max?: FournisseurMaxAggregateInputType
  }

  export type FournisseurGroupByOutputType = {
    id: number
    nom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
    _count: FournisseurCountAggregateOutputType | null
    _avg: FournisseurAvgAggregateOutputType | null
    _sum: FournisseurSumAggregateOutputType | null
    _min: FournisseurMinAggregateOutputType | null
    _max: FournisseurMaxAggregateOutputType | null
  }

  type GetFournisseurGroupByPayload<T extends FournisseurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FournisseurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FournisseurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FournisseurGroupByOutputType[P]>
            : GetScalarType<T[P], FournisseurGroupByOutputType[P]>
        }
      >
    >


  export type FournisseurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    adresse?: boolean
    ville?: boolean
    numeroTelephone?: boolean
    email?: boolean
    commandes?: boolean | Fournisseur$commandesArgs<ExtArgs>
    _count?: boolean | FournisseurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fournisseur"]>

  export type FournisseurSelectScalar = {
    id?: boolean
    nom?: boolean
    adresse?: boolean
    ville?: boolean
    numeroTelephone?: boolean
    email?: boolean
  }


  export type FournisseurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commandes?: boolean | Fournisseur$commandesArgs<ExtArgs>
    _count?: boolean | FournisseurCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FournisseurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Fournisseur"
    objects: {
      commandes: Prisma.$CommandeFournisseurPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      adresse: string
      ville: string
      numeroTelephone: string
      email: string
    }, ExtArgs["result"]["fournisseur"]>
    composites: {}
  }


  type FournisseurGetPayload<S extends boolean | null | undefined | FournisseurDefaultArgs> = $Result.GetResult<Prisma.$FournisseurPayload, S>

  type FournisseurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FournisseurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FournisseurCountAggregateInputType | true
    }

  export interface FournisseurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fournisseur'], meta: { name: 'Fournisseur' } }
    /**
     * Find zero or one Fournisseur that matches the filter.
     * @param {FournisseurFindUniqueArgs} args - Arguments to find a Fournisseur
     * @example
     * // Get one Fournisseur
     * const fournisseur = await prisma.fournisseur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FournisseurFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FournisseurFindUniqueArgs<ExtArgs>>
    ): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Fournisseur that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FournisseurFindUniqueOrThrowArgs} args - Arguments to find a Fournisseur
     * @example
     * // Get one Fournisseur
     * const fournisseur = await prisma.fournisseur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FournisseurFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FournisseurFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Fournisseur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurFindFirstArgs} args - Arguments to find a Fournisseur
     * @example
     * // Get one Fournisseur
     * const fournisseur = await prisma.fournisseur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FournisseurFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FournisseurFindFirstArgs<ExtArgs>>
    ): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Fournisseur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurFindFirstOrThrowArgs} args - Arguments to find a Fournisseur
     * @example
     * // Get one Fournisseur
     * const fournisseur = await prisma.fournisseur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FournisseurFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FournisseurFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Fournisseurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fournisseurs
     * const fournisseurs = await prisma.fournisseur.findMany()
     * 
     * // Get first 10 Fournisseurs
     * const fournisseurs = await prisma.fournisseur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fournisseurWithIdOnly = await prisma.fournisseur.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FournisseurFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FournisseurFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Fournisseur.
     * @param {FournisseurCreateArgs} args - Arguments to create a Fournisseur.
     * @example
     * // Create one Fournisseur
     * const Fournisseur = await prisma.fournisseur.create({
     *   data: {
     *     // ... data to create a Fournisseur
     *   }
     * })
     * 
    **/
    create<T extends FournisseurCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FournisseurCreateArgs<ExtArgs>>
    ): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Fournisseurs.
     *     @param {FournisseurCreateManyArgs} args - Arguments to create many Fournisseurs.
     *     @example
     *     // Create many Fournisseurs
     *     const fournisseur = await prisma.fournisseur.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FournisseurCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FournisseurCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Fournisseur.
     * @param {FournisseurDeleteArgs} args - Arguments to delete one Fournisseur.
     * @example
     * // Delete one Fournisseur
     * const Fournisseur = await prisma.fournisseur.delete({
     *   where: {
     *     // ... filter to delete one Fournisseur
     *   }
     * })
     * 
    **/
    delete<T extends FournisseurDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FournisseurDeleteArgs<ExtArgs>>
    ): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Fournisseur.
     * @param {FournisseurUpdateArgs} args - Arguments to update one Fournisseur.
     * @example
     * // Update one Fournisseur
     * const fournisseur = await prisma.fournisseur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FournisseurUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FournisseurUpdateArgs<ExtArgs>>
    ): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Fournisseurs.
     * @param {FournisseurDeleteManyArgs} args - Arguments to filter Fournisseurs to delete.
     * @example
     * // Delete a few Fournisseurs
     * const { count } = await prisma.fournisseur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FournisseurDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FournisseurDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fournisseurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fournisseurs
     * const fournisseur = await prisma.fournisseur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FournisseurUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FournisseurUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fournisseur.
     * @param {FournisseurUpsertArgs} args - Arguments to update or create a Fournisseur.
     * @example
     * // Update or create a Fournisseur
     * const fournisseur = await prisma.fournisseur.upsert({
     *   create: {
     *     // ... data to create a Fournisseur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fournisseur we want to update
     *   }
     * })
    **/
    upsert<T extends FournisseurUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FournisseurUpsertArgs<ExtArgs>>
    ): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Fournisseurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurCountArgs} args - Arguments to filter Fournisseurs to count.
     * @example
     * // Count the number of Fournisseurs
     * const count = await prisma.fournisseur.count({
     *   where: {
     *     // ... the filter for the Fournisseurs we want to count
     *   }
     * })
    **/
    count<T extends FournisseurCountArgs>(
      args?: Subset<T, FournisseurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FournisseurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fournisseur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FournisseurAggregateArgs>(args: Subset<T, FournisseurAggregateArgs>): Prisma.PrismaPromise<GetFournisseurAggregateType<T>>

    /**
     * Group by Fournisseur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FournisseurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FournisseurGroupByArgs['orderBy'] }
        : { orderBy?: FournisseurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FournisseurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFournisseurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Fournisseur model
   */
  readonly fields: FournisseurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fournisseur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FournisseurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    commandes<T extends Fournisseur$commandesArgs<ExtArgs> = {}>(args?: Subset<T, Fournisseur$commandesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Fournisseur model
   */ 
  interface FournisseurFieldRefs {
    readonly id: FieldRef<"Fournisseur", 'Int'>
    readonly nom: FieldRef<"Fournisseur", 'String'>
    readonly adresse: FieldRef<"Fournisseur", 'String'>
    readonly ville: FieldRef<"Fournisseur", 'String'>
    readonly numeroTelephone: FieldRef<"Fournisseur", 'String'>
    readonly email: FieldRef<"Fournisseur", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Fournisseur findUnique
   */
  export type FournisseurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * Filter, which Fournisseur to fetch.
     */
    where: FournisseurWhereUniqueInput
  }

  /**
   * Fournisseur findUniqueOrThrow
   */
  export type FournisseurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * Filter, which Fournisseur to fetch.
     */
    where: FournisseurWhereUniqueInput
  }

  /**
   * Fournisseur findFirst
   */
  export type FournisseurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * Filter, which Fournisseur to fetch.
     */
    where?: FournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fournisseurs to fetch.
     */
    orderBy?: FournisseurOrderByWithRelationInput | FournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fournisseurs.
     */
    cursor?: FournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fournisseurs.
     */
    distinct?: FournisseurScalarFieldEnum | FournisseurScalarFieldEnum[]
  }

  /**
   * Fournisseur findFirstOrThrow
   */
  export type FournisseurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * Filter, which Fournisseur to fetch.
     */
    where?: FournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fournisseurs to fetch.
     */
    orderBy?: FournisseurOrderByWithRelationInput | FournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fournisseurs.
     */
    cursor?: FournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fournisseurs.
     */
    distinct?: FournisseurScalarFieldEnum | FournisseurScalarFieldEnum[]
  }

  /**
   * Fournisseur findMany
   */
  export type FournisseurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * Filter, which Fournisseurs to fetch.
     */
    where?: FournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fournisseurs to fetch.
     */
    orderBy?: FournisseurOrderByWithRelationInput | FournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fournisseurs.
     */
    cursor?: FournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fournisseurs.
     */
    skip?: number
    distinct?: FournisseurScalarFieldEnum | FournisseurScalarFieldEnum[]
  }

  /**
   * Fournisseur create
   */
  export type FournisseurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * The data needed to create a Fournisseur.
     */
    data: XOR<FournisseurCreateInput, FournisseurUncheckedCreateInput>
  }

  /**
   * Fournisseur createMany
   */
  export type FournisseurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fournisseurs.
     */
    data: FournisseurCreateManyInput | FournisseurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fournisseur update
   */
  export type FournisseurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * The data needed to update a Fournisseur.
     */
    data: XOR<FournisseurUpdateInput, FournisseurUncheckedUpdateInput>
    /**
     * Choose, which Fournisseur to update.
     */
    where: FournisseurWhereUniqueInput
  }

  /**
   * Fournisseur updateMany
   */
  export type FournisseurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fournisseurs.
     */
    data: XOR<FournisseurUpdateManyMutationInput, FournisseurUncheckedUpdateManyInput>
    /**
     * Filter which Fournisseurs to update
     */
    where?: FournisseurWhereInput
  }

  /**
   * Fournisseur upsert
   */
  export type FournisseurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * The filter to search for the Fournisseur to update in case it exists.
     */
    where: FournisseurWhereUniqueInput
    /**
     * In case the Fournisseur found by the `where` argument doesn't exist, create a new Fournisseur with this data.
     */
    create: XOR<FournisseurCreateInput, FournisseurUncheckedCreateInput>
    /**
     * In case the Fournisseur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FournisseurUpdateInput, FournisseurUncheckedUpdateInput>
  }

  /**
   * Fournisseur delete
   */
  export type FournisseurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * Filter which Fournisseur to delete.
     */
    where: FournisseurWhereUniqueInput
  }

  /**
   * Fournisseur deleteMany
   */
  export type FournisseurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fournisseurs to delete
     */
    where?: FournisseurWhereInput
  }

  /**
   * Fournisseur.commandes
   */
  export type Fournisseur$commandesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    where?: CommandeFournisseurWhereInput
    orderBy?: CommandeFournisseurOrderByWithRelationInput | CommandeFournisseurOrderByWithRelationInput[]
    cursor?: CommandeFournisseurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommandeFournisseurScalarFieldEnum | CommandeFournisseurScalarFieldEnum[]
  }

  /**
   * Fournisseur without action
   */
  export type FournisseurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
  }


  /**
   * Model Facture
   */

  export type AggregateFacture = {
    _count: FactureCountAggregateOutputType | null
    _avg: FactureAvgAggregateOutputType | null
    _sum: FactureSumAggregateOutputType | null
    _min: FactureMinAggregateOutputType | null
    _max: FactureMaxAggregateOutputType | null
  }

  export type FactureAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
    montantTotal: number | null
  }

  export type FactureSumAggregateOutputType = {
    id: number | null
    clientId: number | null
    montantTotal: number | null
  }

  export type FactureMinAggregateOutputType = {
    id: number | null
    clientId: number | null
    date: Date | null
    montantTotal: number | null
  }

  export type FactureMaxAggregateOutputType = {
    id: number | null
    clientId: number | null
    date: Date | null
    montantTotal: number | null
  }

  export type FactureCountAggregateOutputType = {
    id: number
    clientId: number
    date: number
    montantTotal: number
    _all: number
  }


  export type FactureAvgAggregateInputType = {
    id?: true
    clientId?: true
    montantTotal?: true
  }

  export type FactureSumAggregateInputType = {
    id?: true
    clientId?: true
    montantTotal?: true
  }

  export type FactureMinAggregateInputType = {
    id?: true
    clientId?: true
    date?: true
    montantTotal?: true
  }

  export type FactureMaxAggregateInputType = {
    id?: true
    clientId?: true
    date?: true
    montantTotal?: true
  }

  export type FactureCountAggregateInputType = {
    id?: true
    clientId?: true
    date?: true
    montantTotal?: true
    _all?: true
  }

  export type FactureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Facture to aggregate.
     */
    where?: FactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Factures to fetch.
     */
    orderBy?: FactureOrderByWithRelationInput | FactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Factures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Factures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Factures
    **/
    _count?: true | FactureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FactureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FactureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FactureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FactureMaxAggregateInputType
  }

  export type GetFactureAggregateType<T extends FactureAggregateArgs> = {
        [P in keyof T & keyof AggregateFacture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacture[P]>
      : GetScalarType<T[P], AggregateFacture[P]>
  }




  export type FactureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FactureWhereInput
    orderBy?: FactureOrderByWithAggregationInput | FactureOrderByWithAggregationInput[]
    by: FactureScalarFieldEnum[] | FactureScalarFieldEnum
    having?: FactureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FactureCountAggregateInputType | true
    _avg?: FactureAvgAggregateInputType
    _sum?: FactureSumAggregateInputType
    _min?: FactureMinAggregateInputType
    _max?: FactureMaxAggregateInputType
  }

  export type FactureGroupByOutputType = {
    id: number
    clientId: number
    date: Date
    montantTotal: number
    _count: FactureCountAggregateOutputType | null
    _avg: FactureAvgAggregateOutputType | null
    _sum: FactureSumAggregateOutputType | null
    _min: FactureMinAggregateOutputType | null
    _max: FactureMaxAggregateOutputType | null
  }

  type GetFactureGroupByPayload<T extends FactureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FactureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FactureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FactureGroupByOutputType[P]>
            : GetScalarType<T[P], FactureGroupByOutputType[P]>
        }
      >
    >


  export type FactureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    date?: boolean
    montantTotal?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    lignes?: boolean | Facture$lignesArgs<ExtArgs>
    _count?: boolean | FactureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["facture"]>

  export type FactureSelectScalar = {
    id?: boolean
    clientId?: boolean
    date?: boolean
    montantTotal?: boolean
  }


  export type FactureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    lignes?: boolean | Facture$lignesArgs<ExtArgs>
    _count?: boolean | FactureCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FacturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Facture"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
      lignes: Prisma.$LigneFacturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clientId: number
      date: Date
      montantTotal: number
    }, ExtArgs["result"]["facture"]>
    composites: {}
  }


  type FactureGetPayload<S extends boolean | null | undefined | FactureDefaultArgs> = $Result.GetResult<Prisma.$FacturePayload, S>

  type FactureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FactureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FactureCountAggregateInputType | true
    }

  export interface FactureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Facture'], meta: { name: 'Facture' } }
    /**
     * Find zero or one Facture that matches the filter.
     * @param {FactureFindUniqueArgs} args - Arguments to find a Facture
     * @example
     * // Get one Facture
     * const facture = await prisma.facture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FactureFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FactureFindUniqueArgs<ExtArgs>>
    ): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Facture that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FactureFindUniqueOrThrowArgs} args - Arguments to find a Facture
     * @example
     * // Get one Facture
     * const facture = await prisma.facture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FactureFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FactureFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Facture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureFindFirstArgs} args - Arguments to find a Facture
     * @example
     * // Get one Facture
     * const facture = await prisma.facture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FactureFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FactureFindFirstArgs<ExtArgs>>
    ): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Facture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureFindFirstOrThrowArgs} args - Arguments to find a Facture
     * @example
     * // Get one Facture
     * const facture = await prisma.facture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FactureFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FactureFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Factures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Factures
     * const factures = await prisma.facture.findMany()
     * 
     * // Get first 10 Factures
     * const factures = await prisma.facture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const factureWithIdOnly = await prisma.facture.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FactureFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FactureFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Facture.
     * @param {FactureCreateArgs} args - Arguments to create a Facture.
     * @example
     * // Create one Facture
     * const Facture = await prisma.facture.create({
     *   data: {
     *     // ... data to create a Facture
     *   }
     * })
     * 
    **/
    create<T extends FactureCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FactureCreateArgs<ExtArgs>>
    ): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Factures.
     *     @param {FactureCreateManyArgs} args - Arguments to create many Factures.
     *     @example
     *     // Create many Factures
     *     const facture = await prisma.facture.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FactureCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FactureCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Facture.
     * @param {FactureDeleteArgs} args - Arguments to delete one Facture.
     * @example
     * // Delete one Facture
     * const Facture = await prisma.facture.delete({
     *   where: {
     *     // ... filter to delete one Facture
     *   }
     * })
     * 
    **/
    delete<T extends FactureDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FactureDeleteArgs<ExtArgs>>
    ): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Facture.
     * @param {FactureUpdateArgs} args - Arguments to update one Facture.
     * @example
     * // Update one Facture
     * const facture = await prisma.facture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FactureUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FactureUpdateArgs<ExtArgs>>
    ): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Factures.
     * @param {FactureDeleteManyArgs} args - Arguments to filter Factures to delete.
     * @example
     * // Delete a few Factures
     * const { count } = await prisma.facture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FactureDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FactureDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Factures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Factures
     * const facture = await prisma.facture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FactureUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FactureUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Facture.
     * @param {FactureUpsertArgs} args - Arguments to update or create a Facture.
     * @example
     * // Update or create a Facture
     * const facture = await prisma.facture.upsert({
     *   create: {
     *     // ... data to create a Facture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Facture we want to update
     *   }
     * })
    **/
    upsert<T extends FactureUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FactureUpsertArgs<ExtArgs>>
    ): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Factures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureCountArgs} args - Arguments to filter Factures to count.
     * @example
     * // Count the number of Factures
     * const count = await prisma.facture.count({
     *   where: {
     *     // ... the filter for the Factures we want to count
     *   }
     * })
    **/
    count<T extends FactureCountArgs>(
      args?: Subset<T, FactureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FactureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Facture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FactureAggregateArgs>(args: Subset<T, FactureAggregateArgs>): Prisma.PrismaPromise<GetFactureAggregateType<T>>

    /**
     * Group by Facture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FactureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FactureGroupByArgs['orderBy'] }
        : { orderBy?: FactureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FactureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFactureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Facture model
   */
  readonly fields: FactureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Facture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FactureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    lignes<T extends Facture$lignesArgs<ExtArgs> = {}>(args?: Subset<T, Facture$lignesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LigneFacturePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Facture model
   */ 
  interface FactureFieldRefs {
    readonly id: FieldRef<"Facture", 'Int'>
    readonly clientId: FieldRef<"Facture", 'Int'>
    readonly date: FieldRef<"Facture", 'DateTime'>
    readonly montantTotal: FieldRef<"Facture", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Facture findUnique
   */
  export type FactureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * Filter, which Facture to fetch.
     */
    where: FactureWhereUniqueInput
  }

  /**
   * Facture findUniqueOrThrow
   */
  export type FactureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * Filter, which Facture to fetch.
     */
    where: FactureWhereUniqueInput
  }

  /**
   * Facture findFirst
   */
  export type FactureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * Filter, which Facture to fetch.
     */
    where?: FactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Factures to fetch.
     */
    orderBy?: FactureOrderByWithRelationInput | FactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Factures.
     */
    cursor?: FactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Factures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Factures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Factures.
     */
    distinct?: FactureScalarFieldEnum | FactureScalarFieldEnum[]
  }

  /**
   * Facture findFirstOrThrow
   */
  export type FactureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * Filter, which Facture to fetch.
     */
    where?: FactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Factures to fetch.
     */
    orderBy?: FactureOrderByWithRelationInput | FactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Factures.
     */
    cursor?: FactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Factures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Factures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Factures.
     */
    distinct?: FactureScalarFieldEnum | FactureScalarFieldEnum[]
  }

  /**
   * Facture findMany
   */
  export type FactureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * Filter, which Factures to fetch.
     */
    where?: FactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Factures to fetch.
     */
    orderBy?: FactureOrderByWithRelationInput | FactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Factures.
     */
    cursor?: FactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Factures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Factures.
     */
    skip?: number
    distinct?: FactureScalarFieldEnum | FactureScalarFieldEnum[]
  }

  /**
   * Facture create
   */
  export type FactureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * The data needed to create a Facture.
     */
    data: XOR<FactureCreateInput, FactureUncheckedCreateInput>
  }

  /**
   * Facture createMany
   */
  export type FactureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Factures.
     */
    data: FactureCreateManyInput | FactureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Facture update
   */
  export type FactureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * The data needed to update a Facture.
     */
    data: XOR<FactureUpdateInput, FactureUncheckedUpdateInput>
    /**
     * Choose, which Facture to update.
     */
    where: FactureWhereUniqueInput
  }

  /**
   * Facture updateMany
   */
  export type FactureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Factures.
     */
    data: XOR<FactureUpdateManyMutationInput, FactureUncheckedUpdateManyInput>
    /**
     * Filter which Factures to update
     */
    where?: FactureWhereInput
  }

  /**
   * Facture upsert
   */
  export type FactureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * The filter to search for the Facture to update in case it exists.
     */
    where: FactureWhereUniqueInput
    /**
     * In case the Facture found by the `where` argument doesn't exist, create a new Facture with this data.
     */
    create: XOR<FactureCreateInput, FactureUncheckedCreateInput>
    /**
     * In case the Facture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FactureUpdateInput, FactureUncheckedUpdateInput>
  }

  /**
   * Facture delete
   */
  export type FactureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * Filter which Facture to delete.
     */
    where: FactureWhereUniqueInput
  }

  /**
   * Facture deleteMany
   */
  export type FactureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Factures to delete
     */
    where?: FactureWhereInput
  }

  /**
   * Facture.lignes
   */
  export type Facture$lignesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneFacture
     */
    select?: LigneFactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneFactureInclude<ExtArgs> | null
    where?: LigneFactureWhereInput
    orderBy?: LigneFactureOrderByWithRelationInput | LigneFactureOrderByWithRelationInput[]
    cursor?: LigneFactureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LigneFactureScalarFieldEnum | LigneFactureScalarFieldEnum[]
  }

  /**
   * Facture without action
   */
  export type FactureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
  }


  /**
   * Model LigneFacture
   */

  export type AggregateLigneFacture = {
    _count: LigneFactureCountAggregateOutputType | null
    _avg: LigneFactureAvgAggregateOutputType | null
    _sum: LigneFactureSumAggregateOutputType | null
    _min: LigneFactureMinAggregateOutputType | null
    _max: LigneFactureMaxAggregateOutputType | null
  }

  export type LigneFactureAvgAggregateOutputType = {
    id: number | null
    factureId: number | null
    produitId: number | null
    quantite: number | null
    prixUnitaire: number | null
    sousTotal: number | null
  }

  export type LigneFactureSumAggregateOutputType = {
    id: number | null
    factureId: number | null
    produitId: number | null
    quantite: number | null
    prixUnitaire: number | null
    sousTotal: number | null
  }

  export type LigneFactureMinAggregateOutputType = {
    id: number | null
    factureId: number | null
    produitId: number | null
    quantite: number | null
    prixUnitaire: number | null
    sousTotal: number | null
  }

  export type LigneFactureMaxAggregateOutputType = {
    id: number | null
    factureId: number | null
    produitId: number | null
    quantite: number | null
    prixUnitaire: number | null
    sousTotal: number | null
  }

  export type LigneFactureCountAggregateOutputType = {
    id: number
    factureId: number
    produitId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
    _all: number
  }


  export type LigneFactureAvgAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
    prixUnitaire?: true
    sousTotal?: true
  }

  export type LigneFactureSumAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
    prixUnitaire?: true
    sousTotal?: true
  }

  export type LigneFactureMinAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
    prixUnitaire?: true
    sousTotal?: true
  }

  export type LigneFactureMaxAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
    prixUnitaire?: true
    sousTotal?: true
  }

  export type LigneFactureCountAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
    prixUnitaire?: true
    sousTotal?: true
    _all?: true
  }

  export type LigneFactureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LigneFacture to aggregate.
     */
    where?: LigneFactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LigneFactures to fetch.
     */
    orderBy?: LigneFactureOrderByWithRelationInput | LigneFactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LigneFactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LigneFactures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LigneFactures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LigneFactures
    **/
    _count?: true | LigneFactureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LigneFactureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LigneFactureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LigneFactureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LigneFactureMaxAggregateInputType
  }

  export type GetLigneFactureAggregateType<T extends LigneFactureAggregateArgs> = {
        [P in keyof T & keyof AggregateLigneFacture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLigneFacture[P]>
      : GetScalarType<T[P], AggregateLigneFacture[P]>
  }




  export type LigneFactureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LigneFactureWhereInput
    orderBy?: LigneFactureOrderByWithAggregationInput | LigneFactureOrderByWithAggregationInput[]
    by: LigneFactureScalarFieldEnum[] | LigneFactureScalarFieldEnum
    having?: LigneFactureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LigneFactureCountAggregateInputType | true
    _avg?: LigneFactureAvgAggregateInputType
    _sum?: LigneFactureSumAggregateInputType
    _min?: LigneFactureMinAggregateInputType
    _max?: LigneFactureMaxAggregateInputType
  }

  export type LigneFactureGroupByOutputType = {
    id: number
    factureId: number
    produitId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
    _count: LigneFactureCountAggregateOutputType | null
    _avg: LigneFactureAvgAggregateOutputType | null
    _sum: LigneFactureSumAggregateOutputType | null
    _min: LigneFactureMinAggregateOutputType | null
    _max: LigneFactureMaxAggregateOutputType | null
  }

  type GetLigneFactureGroupByPayload<T extends LigneFactureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LigneFactureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LigneFactureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LigneFactureGroupByOutputType[P]>
            : GetScalarType<T[P], LigneFactureGroupByOutputType[P]>
        }
      >
    >


  export type LigneFactureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    factureId?: boolean
    produitId?: boolean
    quantite?: boolean
    prixUnitaire?: boolean
    sousTotal?: boolean
    facture?: boolean | FactureDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ligneFacture"]>

  export type LigneFactureSelectScalar = {
    id?: boolean
    factureId?: boolean
    produitId?: boolean
    quantite?: boolean
    prixUnitaire?: boolean
    sousTotal?: boolean
  }


  export type LigneFactureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facture?: boolean | FactureDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }


  export type $LigneFacturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LigneFacture"
    objects: {
      facture: Prisma.$FacturePayload<ExtArgs>
      produit: Prisma.$ProduitPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      factureId: number
      produitId: number
      quantite: number
      prixUnitaire: number
      sousTotal: number
    }, ExtArgs["result"]["ligneFacture"]>
    composites: {}
  }


  type LigneFactureGetPayload<S extends boolean | null | undefined | LigneFactureDefaultArgs> = $Result.GetResult<Prisma.$LigneFacturePayload, S>

  type LigneFactureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LigneFactureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LigneFactureCountAggregateInputType | true
    }

  export interface LigneFactureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LigneFacture'], meta: { name: 'LigneFacture' } }
    /**
     * Find zero or one LigneFacture that matches the filter.
     * @param {LigneFactureFindUniqueArgs} args - Arguments to find a LigneFacture
     * @example
     * // Get one LigneFacture
     * const ligneFacture = await prisma.ligneFacture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LigneFactureFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LigneFactureFindUniqueArgs<ExtArgs>>
    ): Prisma__LigneFactureClient<$Result.GetResult<Prisma.$LigneFacturePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LigneFacture that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LigneFactureFindUniqueOrThrowArgs} args - Arguments to find a LigneFacture
     * @example
     * // Get one LigneFacture
     * const ligneFacture = await prisma.ligneFacture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LigneFactureFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LigneFactureFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LigneFactureClient<$Result.GetResult<Prisma.$LigneFacturePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LigneFacture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LigneFactureFindFirstArgs} args - Arguments to find a LigneFacture
     * @example
     * // Get one LigneFacture
     * const ligneFacture = await prisma.ligneFacture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LigneFactureFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LigneFactureFindFirstArgs<ExtArgs>>
    ): Prisma__LigneFactureClient<$Result.GetResult<Prisma.$LigneFacturePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LigneFacture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LigneFactureFindFirstOrThrowArgs} args - Arguments to find a LigneFacture
     * @example
     * // Get one LigneFacture
     * const ligneFacture = await prisma.ligneFacture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LigneFactureFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LigneFactureFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LigneFactureClient<$Result.GetResult<Prisma.$LigneFacturePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LigneFactures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LigneFactureFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LigneFactures
     * const ligneFactures = await prisma.ligneFacture.findMany()
     * 
     * // Get first 10 LigneFactures
     * const ligneFactures = await prisma.ligneFacture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ligneFactureWithIdOnly = await prisma.ligneFacture.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LigneFactureFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LigneFactureFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LigneFacturePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LigneFacture.
     * @param {LigneFactureCreateArgs} args - Arguments to create a LigneFacture.
     * @example
     * // Create one LigneFacture
     * const LigneFacture = await prisma.ligneFacture.create({
     *   data: {
     *     // ... data to create a LigneFacture
     *   }
     * })
     * 
    **/
    create<T extends LigneFactureCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LigneFactureCreateArgs<ExtArgs>>
    ): Prisma__LigneFactureClient<$Result.GetResult<Prisma.$LigneFacturePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LigneFactures.
     *     @param {LigneFactureCreateManyArgs} args - Arguments to create many LigneFactures.
     *     @example
     *     // Create many LigneFactures
     *     const ligneFacture = await prisma.ligneFacture.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LigneFactureCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LigneFactureCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LigneFacture.
     * @param {LigneFactureDeleteArgs} args - Arguments to delete one LigneFacture.
     * @example
     * // Delete one LigneFacture
     * const LigneFacture = await prisma.ligneFacture.delete({
     *   where: {
     *     // ... filter to delete one LigneFacture
     *   }
     * })
     * 
    **/
    delete<T extends LigneFactureDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LigneFactureDeleteArgs<ExtArgs>>
    ): Prisma__LigneFactureClient<$Result.GetResult<Prisma.$LigneFacturePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LigneFacture.
     * @param {LigneFactureUpdateArgs} args - Arguments to update one LigneFacture.
     * @example
     * // Update one LigneFacture
     * const ligneFacture = await prisma.ligneFacture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LigneFactureUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LigneFactureUpdateArgs<ExtArgs>>
    ): Prisma__LigneFactureClient<$Result.GetResult<Prisma.$LigneFacturePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LigneFactures.
     * @param {LigneFactureDeleteManyArgs} args - Arguments to filter LigneFactures to delete.
     * @example
     * // Delete a few LigneFactures
     * const { count } = await prisma.ligneFacture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LigneFactureDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LigneFactureDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LigneFactures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LigneFactureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LigneFactures
     * const ligneFacture = await prisma.ligneFacture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LigneFactureUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LigneFactureUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LigneFacture.
     * @param {LigneFactureUpsertArgs} args - Arguments to update or create a LigneFacture.
     * @example
     * // Update or create a LigneFacture
     * const ligneFacture = await prisma.ligneFacture.upsert({
     *   create: {
     *     // ... data to create a LigneFacture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LigneFacture we want to update
     *   }
     * })
    **/
    upsert<T extends LigneFactureUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LigneFactureUpsertArgs<ExtArgs>>
    ): Prisma__LigneFactureClient<$Result.GetResult<Prisma.$LigneFacturePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LigneFactures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LigneFactureCountArgs} args - Arguments to filter LigneFactures to count.
     * @example
     * // Count the number of LigneFactures
     * const count = await prisma.ligneFacture.count({
     *   where: {
     *     // ... the filter for the LigneFactures we want to count
     *   }
     * })
    **/
    count<T extends LigneFactureCountArgs>(
      args?: Subset<T, LigneFactureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LigneFactureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LigneFacture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LigneFactureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LigneFactureAggregateArgs>(args: Subset<T, LigneFactureAggregateArgs>): Prisma.PrismaPromise<GetLigneFactureAggregateType<T>>

    /**
     * Group by LigneFacture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LigneFactureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LigneFactureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LigneFactureGroupByArgs['orderBy'] }
        : { orderBy?: LigneFactureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LigneFactureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLigneFactureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LigneFacture model
   */
  readonly fields: LigneFactureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LigneFacture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LigneFactureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    facture<T extends FactureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FactureDefaultArgs<ExtArgs>>): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    produit<T extends ProduitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProduitDefaultArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LigneFacture model
   */ 
  interface LigneFactureFieldRefs {
    readonly id: FieldRef<"LigneFacture", 'Int'>
    readonly factureId: FieldRef<"LigneFacture", 'Int'>
    readonly produitId: FieldRef<"LigneFacture", 'Int'>
    readonly quantite: FieldRef<"LigneFacture", 'Int'>
    readonly prixUnitaire: FieldRef<"LigneFacture", 'Float'>
    readonly sousTotal: FieldRef<"LigneFacture", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * LigneFacture findUnique
   */
  export type LigneFactureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneFacture
     */
    select?: LigneFactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneFactureInclude<ExtArgs> | null
    /**
     * Filter, which LigneFacture to fetch.
     */
    where: LigneFactureWhereUniqueInput
  }

  /**
   * LigneFacture findUniqueOrThrow
   */
  export type LigneFactureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneFacture
     */
    select?: LigneFactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneFactureInclude<ExtArgs> | null
    /**
     * Filter, which LigneFacture to fetch.
     */
    where: LigneFactureWhereUniqueInput
  }

  /**
   * LigneFacture findFirst
   */
  export type LigneFactureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneFacture
     */
    select?: LigneFactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneFactureInclude<ExtArgs> | null
    /**
     * Filter, which LigneFacture to fetch.
     */
    where?: LigneFactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LigneFactures to fetch.
     */
    orderBy?: LigneFactureOrderByWithRelationInput | LigneFactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LigneFactures.
     */
    cursor?: LigneFactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LigneFactures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LigneFactures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LigneFactures.
     */
    distinct?: LigneFactureScalarFieldEnum | LigneFactureScalarFieldEnum[]
  }

  /**
   * LigneFacture findFirstOrThrow
   */
  export type LigneFactureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneFacture
     */
    select?: LigneFactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneFactureInclude<ExtArgs> | null
    /**
     * Filter, which LigneFacture to fetch.
     */
    where?: LigneFactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LigneFactures to fetch.
     */
    orderBy?: LigneFactureOrderByWithRelationInput | LigneFactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LigneFactures.
     */
    cursor?: LigneFactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LigneFactures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LigneFactures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LigneFactures.
     */
    distinct?: LigneFactureScalarFieldEnum | LigneFactureScalarFieldEnum[]
  }

  /**
   * LigneFacture findMany
   */
  export type LigneFactureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneFacture
     */
    select?: LigneFactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneFactureInclude<ExtArgs> | null
    /**
     * Filter, which LigneFactures to fetch.
     */
    where?: LigneFactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LigneFactures to fetch.
     */
    orderBy?: LigneFactureOrderByWithRelationInput | LigneFactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LigneFactures.
     */
    cursor?: LigneFactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LigneFactures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LigneFactures.
     */
    skip?: number
    distinct?: LigneFactureScalarFieldEnum | LigneFactureScalarFieldEnum[]
  }

  /**
   * LigneFacture create
   */
  export type LigneFactureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneFacture
     */
    select?: LigneFactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneFactureInclude<ExtArgs> | null
    /**
     * The data needed to create a LigneFacture.
     */
    data: XOR<LigneFactureCreateInput, LigneFactureUncheckedCreateInput>
  }

  /**
   * LigneFacture createMany
   */
  export type LigneFactureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LigneFactures.
     */
    data: LigneFactureCreateManyInput | LigneFactureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LigneFacture update
   */
  export type LigneFactureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneFacture
     */
    select?: LigneFactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneFactureInclude<ExtArgs> | null
    /**
     * The data needed to update a LigneFacture.
     */
    data: XOR<LigneFactureUpdateInput, LigneFactureUncheckedUpdateInput>
    /**
     * Choose, which LigneFacture to update.
     */
    where: LigneFactureWhereUniqueInput
  }

  /**
   * LigneFacture updateMany
   */
  export type LigneFactureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LigneFactures.
     */
    data: XOR<LigneFactureUpdateManyMutationInput, LigneFactureUncheckedUpdateManyInput>
    /**
     * Filter which LigneFactures to update
     */
    where?: LigneFactureWhereInput
  }

  /**
   * LigneFacture upsert
   */
  export type LigneFactureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneFacture
     */
    select?: LigneFactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneFactureInclude<ExtArgs> | null
    /**
     * The filter to search for the LigneFacture to update in case it exists.
     */
    where: LigneFactureWhereUniqueInput
    /**
     * In case the LigneFacture found by the `where` argument doesn't exist, create a new LigneFacture with this data.
     */
    create: XOR<LigneFactureCreateInput, LigneFactureUncheckedCreateInput>
    /**
     * In case the LigneFacture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LigneFactureUpdateInput, LigneFactureUncheckedUpdateInput>
  }

  /**
   * LigneFacture delete
   */
  export type LigneFactureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneFacture
     */
    select?: LigneFactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneFactureInclude<ExtArgs> | null
    /**
     * Filter which LigneFacture to delete.
     */
    where: LigneFactureWhereUniqueInput
  }

  /**
   * LigneFacture deleteMany
   */
  export type LigneFactureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LigneFactures to delete
     */
    where?: LigneFactureWhereInput
  }

  /**
   * LigneFacture without action
   */
  export type LigneFactureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LigneFacture
     */
    select?: LigneFactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LigneFactureInclude<ExtArgs> | null
  }


  /**
   * Model CommandeFournisseur
   */

  export type AggregateCommandeFournisseur = {
    _count: CommandeFournisseurCountAggregateOutputType | null
    _avg: CommandeFournisseurAvgAggregateOutputType | null
    _sum: CommandeFournisseurSumAggregateOutputType | null
    _min: CommandeFournisseurMinAggregateOutputType | null
    _max: CommandeFournisseurMaxAggregateOutputType | null
  }

  export type CommandeFournisseurAvgAggregateOutputType = {
    id: number | null
    fournisseurId: number | null
  }

  export type CommandeFournisseurSumAggregateOutputType = {
    id: number | null
    fournisseurId: number | null
  }

  export type CommandeFournisseurMinAggregateOutputType = {
    id: number | null
    fournisseurId: number | null
    date: Date | null
    statut: string | null
  }

  export type CommandeFournisseurMaxAggregateOutputType = {
    id: number | null
    fournisseurId: number | null
    date: Date | null
    statut: string | null
  }

  export type CommandeFournisseurCountAggregateOutputType = {
    id: number
    fournisseurId: number
    date: number
    statut: number
    _all: number
  }


  export type CommandeFournisseurAvgAggregateInputType = {
    id?: true
    fournisseurId?: true
  }

  export type CommandeFournisseurSumAggregateInputType = {
    id?: true
    fournisseurId?: true
  }

  export type CommandeFournisseurMinAggregateInputType = {
    id?: true
    fournisseurId?: true
    date?: true
    statut?: true
  }

  export type CommandeFournisseurMaxAggregateInputType = {
    id?: true
    fournisseurId?: true
    date?: true
    statut?: true
  }

  export type CommandeFournisseurCountAggregateInputType = {
    id?: true
    fournisseurId?: true
    date?: true
    statut?: true
    _all?: true
  }

  export type CommandeFournisseurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommandeFournisseur to aggregate.
     */
    where?: CommandeFournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandeFournisseurs to fetch.
     */
    orderBy?: CommandeFournisseurOrderByWithRelationInput | CommandeFournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommandeFournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandeFournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandeFournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommandeFournisseurs
    **/
    _count?: true | CommandeFournisseurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommandeFournisseurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommandeFournisseurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommandeFournisseurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommandeFournisseurMaxAggregateInputType
  }

  export type GetCommandeFournisseurAggregateType<T extends CommandeFournisseurAggregateArgs> = {
        [P in keyof T & keyof AggregateCommandeFournisseur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommandeFournisseur[P]>
      : GetScalarType<T[P], AggregateCommandeFournisseur[P]>
  }




  export type CommandeFournisseurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandeFournisseurWhereInput
    orderBy?: CommandeFournisseurOrderByWithAggregationInput | CommandeFournisseurOrderByWithAggregationInput[]
    by: CommandeFournisseurScalarFieldEnum[] | CommandeFournisseurScalarFieldEnum
    having?: CommandeFournisseurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommandeFournisseurCountAggregateInputType | true
    _avg?: CommandeFournisseurAvgAggregateInputType
    _sum?: CommandeFournisseurSumAggregateInputType
    _min?: CommandeFournisseurMinAggregateInputType
    _max?: CommandeFournisseurMaxAggregateInputType
  }

  export type CommandeFournisseurGroupByOutputType = {
    id: number
    fournisseurId: number
    date: Date
    statut: string
    _count: CommandeFournisseurCountAggregateOutputType | null
    _avg: CommandeFournisseurAvgAggregateOutputType | null
    _sum: CommandeFournisseurSumAggregateOutputType | null
    _min: CommandeFournisseurMinAggregateOutputType | null
    _max: CommandeFournisseurMaxAggregateOutputType | null
  }

  type GetCommandeFournisseurGroupByPayload<T extends CommandeFournisseurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommandeFournisseurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommandeFournisseurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommandeFournisseurGroupByOutputType[P]>
            : GetScalarType<T[P], CommandeFournisseurGroupByOutputType[P]>
        }
      >
    >


  export type CommandeFournisseurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fournisseurId?: boolean
    date?: boolean
    statut?: boolean
    fournisseur?: boolean | FournisseurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commandeFournisseur"]>

  export type CommandeFournisseurSelectScalar = {
    id?: boolean
    fournisseurId?: boolean
    date?: boolean
    statut?: boolean
  }


  export type CommandeFournisseurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fournisseur?: boolean | FournisseurDefaultArgs<ExtArgs>
  }


  export type $CommandeFournisseurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommandeFournisseur"
    objects: {
      fournisseur: Prisma.$FournisseurPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fournisseurId: number
      date: Date
      statut: string
    }, ExtArgs["result"]["commandeFournisseur"]>
    composites: {}
  }


  type CommandeFournisseurGetPayload<S extends boolean | null | undefined | CommandeFournisseurDefaultArgs> = $Result.GetResult<Prisma.$CommandeFournisseurPayload, S>

  type CommandeFournisseurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommandeFournisseurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommandeFournisseurCountAggregateInputType | true
    }

  export interface CommandeFournisseurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommandeFournisseur'], meta: { name: 'CommandeFournisseur' } }
    /**
     * Find zero or one CommandeFournisseur that matches the filter.
     * @param {CommandeFournisseurFindUniqueArgs} args - Arguments to find a CommandeFournisseur
     * @example
     * // Get one CommandeFournisseur
     * const commandeFournisseur = await prisma.commandeFournisseur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommandeFournisseurFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommandeFournisseurFindUniqueArgs<ExtArgs>>
    ): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CommandeFournisseur that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommandeFournisseurFindUniqueOrThrowArgs} args - Arguments to find a CommandeFournisseur
     * @example
     * // Get one CommandeFournisseur
     * const commandeFournisseur = await prisma.commandeFournisseur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommandeFournisseurFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommandeFournisseurFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CommandeFournisseur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFournisseurFindFirstArgs} args - Arguments to find a CommandeFournisseur
     * @example
     * // Get one CommandeFournisseur
     * const commandeFournisseur = await prisma.commandeFournisseur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommandeFournisseurFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommandeFournisseurFindFirstArgs<ExtArgs>>
    ): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CommandeFournisseur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFournisseurFindFirstOrThrowArgs} args - Arguments to find a CommandeFournisseur
     * @example
     * // Get one CommandeFournisseur
     * const commandeFournisseur = await prisma.commandeFournisseur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommandeFournisseurFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommandeFournisseurFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CommandeFournisseurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFournisseurFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommandeFournisseurs
     * const commandeFournisseurs = await prisma.commandeFournisseur.findMany()
     * 
     * // Get first 10 CommandeFournisseurs
     * const commandeFournisseurs = await prisma.commandeFournisseur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commandeFournisseurWithIdOnly = await prisma.commandeFournisseur.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommandeFournisseurFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommandeFournisseurFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CommandeFournisseur.
     * @param {CommandeFournisseurCreateArgs} args - Arguments to create a CommandeFournisseur.
     * @example
     * // Create one CommandeFournisseur
     * const CommandeFournisseur = await prisma.commandeFournisseur.create({
     *   data: {
     *     // ... data to create a CommandeFournisseur
     *   }
     * })
     * 
    **/
    create<T extends CommandeFournisseurCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommandeFournisseurCreateArgs<ExtArgs>>
    ): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CommandeFournisseurs.
     *     @param {CommandeFournisseurCreateManyArgs} args - Arguments to create many CommandeFournisseurs.
     *     @example
     *     // Create many CommandeFournisseurs
     *     const commandeFournisseur = await prisma.commandeFournisseur.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommandeFournisseurCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommandeFournisseurCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CommandeFournisseur.
     * @param {CommandeFournisseurDeleteArgs} args - Arguments to delete one CommandeFournisseur.
     * @example
     * // Delete one CommandeFournisseur
     * const CommandeFournisseur = await prisma.commandeFournisseur.delete({
     *   where: {
     *     // ... filter to delete one CommandeFournisseur
     *   }
     * })
     * 
    **/
    delete<T extends CommandeFournisseurDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommandeFournisseurDeleteArgs<ExtArgs>>
    ): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CommandeFournisseur.
     * @param {CommandeFournisseurUpdateArgs} args - Arguments to update one CommandeFournisseur.
     * @example
     * // Update one CommandeFournisseur
     * const commandeFournisseur = await prisma.commandeFournisseur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommandeFournisseurUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommandeFournisseurUpdateArgs<ExtArgs>>
    ): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CommandeFournisseurs.
     * @param {CommandeFournisseurDeleteManyArgs} args - Arguments to filter CommandeFournisseurs to delete.
     * @example
     * // Delete a few CommandeFournisseurs
     * const { count } = await prisma.commandeFournisseur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommandeFournisseurDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommandeFournisseurDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommandeFournisseurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFournisseurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommandeFournisseurs
     * const commandeFournisseur = await prisma.commandeFournisseur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommandeFournisseurUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommandeFournisseurUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommandeFournisseur.
     * @param {CommandeFournisseurUpsertArgs} args - Arguments to update or create a CommandeFournisseur.
     * @example
     * // Update or create a CommandeFournisseur
     * const commandeFournisseur = await prisma.commandeFournisseur.upsert({
     *   create: {
     *     // ... data to create a CommandeFournisseur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommandeFournisseur we want to update
     *   }
     * })
    **/
    upsert<T extends CommandeFournisseurUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommandeFournisseurUpsertArgs<ExtArgs>>
    ): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CommandeFournisseurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFournisseurCountArgs} args - Arguments to filter CommandeFournisseurs to count.
     * @example
     * // Count the number of CommandeFournisseurs
     * const count = await prisma.commandeFournisseur.count({
     *   where: {
     *     // ... the filter for the CommandeFournisseurs we want to count
     *   }
     * })
    **/
    count<T extends CommandeFournisseurCountArgs>(
      args?: Subset<T, CommandeFournisseurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommandeFournisseurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommandeFournisseur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFournisseurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommandeFournisseurAggregateArgs>(args: Subset<T, CommandeFournisseurAggregateArgs>): Prisma.PrismaPromise<GetCommandeFournisseurAggregateType<T>>

    /**
     * Group by CommandeFournisseur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFournisseurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommandeFournisseurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommandeFournisseurGroupByArgs['orderBy'] }
        : { orderBy?: CommandeFournisseurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommandeFournisseurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommandeFournisseurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommandeFournisseur model
   */
  readonly fields: CommandeFournisseurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommandeFournisseur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommandeFournisseurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    fournisseur<T extends FournisseurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FournisseurDefaultArgs<ExtArgs>>): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CommandeFournisseur model
   */ 
  interface CommandeFournisseurFieldRefs {
    readonly id: FieldRef<"CommandeFournisseur", 'Int'>
    readonly fournisseurId: FieldRef<"CommandeFournisseur", 'Int'>
    readonly date: FieldRef<"CommandeFournisseur", 'DateTime'>
    readonly statut: FieldRef<"CommandeFournisseur", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CommandeFournisseur findUnique
   */
  export type CommandeFournisseurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * Filter, which CommandeFournisseur to fetch.
     */
    where: CommandeFournisseurWhereUniqueInput
  }

  /**
   * CommandeFournisseur findUniqueOrThrow
   */
  export type CommandeFournisseurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * Filter, which CommandeFournisseur to fetch.
     */
    where: CommandeFournisseurWhereUniqueInput
  }

  /**
   * CommandeFournisseur findFirst
   */
  export type CommandeFournisseurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * Filter, which CommandeFournisseur to fetch.
     */
    where?: CommandeFournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandeFournisseurs to fetch.
     */
    orderBy?: CommandeFournisseurOrderByWithRelationInput | CommandeFournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommandeFournisseurs.
     */
    cursor?: CommandeFournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandeFournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandeFournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommandeFournisseurs.
     */
    distinct?: CommandeFournisseurScalarFieldEnum | CommandeFournisseurScalarFieldEnum[]
  }

  /**
   * CommandeFournisseur findFirstOrThrow
   */
  export type CommandeFournisseurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * Filter, which CommandeFournisseur to fetch.
     */
    where?: CommandeFournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandeFournisseurs to fetch.
     */
    orderBy?: CommandeFournisseurOrderByWithRelationInput | CommandeFournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommandeFournisseurs.
     */
    cursor?: CommandeFournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandeFournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandeFournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommandeFournisseurs.
     */
    distinct?: CommandeFournisseurScalarFieldEnum | CommandeFournisseurScalarFieldEnum[]
  }

  /**
   * CommandeFournisseur findMany
   */
  export type CommandeFournisseurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * Filter, which CommandeFournisseurs to fetch.
     */
    where?: CommandeFournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandeFournisseurs to fetch.
     */
    orderBy?: CommandeFournisseurOrderByWithRelationInput | CommandeFournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommandeFournisseurs.
     */
    cursor?: CommandeFournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandeFournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandeFournisseurs.
     */
    skip?: number
    distinct?: CommandeFournisseurScalarFieldEnum | CommandeFournisseurScalarFieldEnum[]
  }

  /**
   * CommandeFournisseur create
   */
  export type CommandeFournisseurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * The data needed to create a CommandeFournisseur.
     */
    data: XOR<CommandeFournisseurCreateInput, CommandeFournisseurUncheckedCreateInput>
  }

  /**
   * CommandeFournisseur createMany
   */
  export type CommandeFournisseurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommandeFournisseurs.
     */
    data: CommandeFournisseurCreateManyInput | CommandeFournisseurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CommandeFournisseur update
   */
  export type CommandeFournisseurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * The data needed to update a CommandeFournisseur.
     */
    data: XOR<CommandeFournisseurUpdateInput, CommandeFournisseurUncheckedUpdateInput>
    /**
     * Choose, which CommandeFournisseur to update.
     */
    where: CommandeFournisseurWhereUniqueInput
  }

  /**
   * CommandeFournisseur updateMany
   */
  export type CommandeFournisseurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommandeFournisseurs.
     */
    data: XOR<CommandeFournisseurUpdateManyMutationInput, CommandeFournisseurUncheckedUpdateManyInput>
    /**
     * Filter which CommandeFournisseurs to update
     */
    where?: CommandeFournisseurWhereInput
  }

  /**
   * CommandeFournisseur upsert
   */
  export type CommandeFournisseurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * The filter to search for the CommandeFournisseur to update in case it exists.
     */
    where: CommandeFournisseurWhereUniqueInput
    /**
     * In case the CommandeFournisseur found by the `where` argument doesn't exist, create a new CommandeFournisseur with this data.
     */
    create: XOR<CommandeFournisseurCreateInput, CommandeFournisseurUncheckedCreateInput>
    /**
     * In case the CommandeFournisseur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommandeFournisseurUpdateInput, CommandeFournisseurUncheckedUpdateInput>
  }

  /**
   * CommandeFournisseur delete
   */
  export type CommandeFournisseurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * Filter which CommandeFournisseur to delete.
     */
    where: CommandeFournisseurWhereUniqueInput
  }

  /**
   * CommandeFournisseur deleteMany
   */
  export type CommandeFournisseurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommandeFournisseurs to delete
     */
    where?: CommandeFournisseurWhereInput
  }

  /**
   * CommandeFournisseur without action
   */
  export type CommandeFournisseurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EntrepriseScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    siegeSocial: 'siegeSocial',
    dateCreation: 'dateCreation',
    identifiantFiscal: 'identifiantFiscal',
    capital: 'capital',
    nombreEmployes: 'nombreEmployes',
    ville: 'ville',
    responsable: 'responsable',
    numeroTelephone: 'numeroTelephone',
    email: 'email'
  };

  export type EntrepriseScalarFieldEnum = (typeof EntrepriseScalarFieldEnum)[keyof typeof EntrepriseScalarFieldEnum]


  export const ProduitScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prixAchat: 'prixAchat',
    prixVente: 'prixVente',
    tauxMarge: 'tauxMarge',
    dimension: 'dimension',
    taille: 'taille'
  };

  export type ProduitScalarFieldEnum = (typeof ProduitScalarFieldEnum)[keyof typeof ProduitScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prenom: 'prenom',
    adresse: 'adresse',
    ville: 'ville',
    numeroTelephone: 'numeroTelephone',
    email: 'email'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const FournisseurScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    adresse: 'adresse',
    ville: 'ville',
    numeroTelephone: 'numeroTelephone',
    email: 'email'
  };

  export type FournisseurScalarFieldEnum = (typeof FournisseurScalarFieldEnum)[keyof typeof FournisseurScalarFieldEnum]


  export const FactureScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    date: 'date',
    montantTotal: 'montantTotal'
  };

  export type FactureScalarFieldEnum = (typeof FactureScalarFieldEnum)[keyof typeof FactureScalarFieldEnum]


  export const LigneFactureScalarFieldEnum: {
    id: 'id',
    factureId: 'factureId',
    produitId: 'produitId',
    quantite: 'quantite',
    prixUnitaire: 'prixUnitaire',
    sousTotal: 'sousTotal'
  };

  export type LigneFactureScalarFieldEnum = (typeof LigneFactureScalarFieldEnum)[keyof typeof LigneFactureScalarFieldEnum]


  export const CommandeFournisseurScalarFieldEnum: {
    id: 'id',
    fournisseurId: 'fournisseurId',
    date: 'date',
    statut: 'statut'
  };

  export type CommandeFournisseurScalarFieldEnum = (typeof CommandeFournisseurScalarFieldEnum)[keyof typeof CommandeFournisseurScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type EntrepriseWhereInput = {
    AND?: EntrepriseWhereInput | EntrepriseWhereInput[]
    OR?: EntrepriseWhereInput[]
    NOT?: EntrepriseWhereInput | EntrepriseWhereInput[]
    id?: IntFilter<"Entreprise"> | number
    nom?: StringFilter<"Entreprise"> | string
    siegeSocial?: StringFilter<"Entreprise"> | string
    dateCreation?: DateTimeFilter<"Entreprise"> | Date | string
    identifiantFiscal?: StringFilter<"Entreprise"> | string
    capital?: FloatFilter<"Entreprise"> | number
    nombreEmployes?: IntFilter<"Entreprise"> | number
    ville?: StringFilter<"Entreprise"> | string
    responsable?: StringFilter<"Entreprise"> | string
    numeroTelephone?: StringFilter<"Entreprise"> | string
    email?: StringFilter<"Entreprise"> | string
  }

  export type EntrepriseOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    siegeSocial?: SortOrder
    dateCreation?: SortOrder
    identifiantFiscal?: SortOrder
    capital?: SortOrder
    nombreEmployes?: SortOrder
    ville?: SortOrder
    responsable?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type EntrepriseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EntrepriseWhereInput | EntrepriseWhereInput[]
    OR?: EntrepriseWhereInput[]
    NOT?: EntrepriseWhereInput | EntrepriseWhereInput[]
    nom?: StringFilter<"Entreprise"> | string
    siegeSocial?: StringFilter<"Entreprise"> | string
    dateCreation?: DateTimeFilter<"Entreprise"> | Date | string
    identifiantFiscal?: StringFilter<"Entreprise"> | string
    capital?: FloatFilter<"Entreprise"> | number
    nombreEmployes?: IntFilter<"Entreprise"> | number
    ville?: StringFilter<"Entreprise"> | string
    responsable?: StringFilter<"Entreprise"> | string
    numeroTelephone?: StringFilter<"Entreprise"> | string
    email?: StringFilter<"Entreprise"> | string
  }, "id">

  export type EntrepriseOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    siegeSocial?: SortOrder
    dateCreation?: SortOrder
    identifiantFiscal?: SortOrder
    capital?: SortOrder
    nombreEmployes?: SortOrder
    ville?: SortOrder
    responsable?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
    _count?: EntrepriseCountOrderByAggregateInput
    _avg?: EntrepriseAvgOrderByAggregateInput
    _max?: EntrepriseMaxOrderByAggregateInput
    _min?: EntrepriseMinOrderByAggregateInput
    _sum?: EntrepriseSumOrderByAggregateInput
  }

  export type EntrepriseScalarWhereWithAggregatesInput = {
    AND?: EntrepriseScalarWhereWithAggregatesInput | EntrepriseScalarWhereWithAggregatesInput[]
    OR?: EntrepriseScalarWhereWithAggregatesInput[]
    NOT?: EntrepriseScalarWhereWithAggregatesInput | EntrepriseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Entreprise"> | number
    nom?: StringWithAggregatesFilter<"Entreprise"> | string
    siegeSocial?: StringWithAggregatesFilter<"Entreprise"> | string
    dateCreation?: DateTimeWithAggregatesFilter<"Entreprise"> | Date | string
    identifiantFiscal?: StringWithAggregatesFilter<"Entreprise"> | string
    capital?: FloatWithAggregatesFilter<"Entreprise"> | number
    nombreEmployes?: IntWithAggregatesFilter<"Entreprise"> | number
    ville?: StringWithAggregatesFilter<"Entreprise"> | string
    responsable?: StringWithAggregatesFilter<"Entreprise"> | string
    numeroTelephone?: StringWithAggregatesFilter<"Entreprise"> | string
    email?: StringWithAggregatesFilter<"Entreprise"> | string
  }

  export type ProduitWhereInput = {
    AND?: ProduitWhereInput | ProduitWhereInput[]
    OR?: ProduitWhereInput[]
    NOT?: ProduitWhereInput | ProduitWhereInput[]
    id?: IntFilter<"Produit"> | number
    nom?: StringFilter<"Produit"> | string
    prixAchat?: FloatFilter<"Produit"> | number
    prixVente?: FloatFilter<"Produit"> | number
    tauxMarge?: FloatFilter<"Produit"> | number
    dimension?: StringFilter<"Produit"> | string
    taille?: StringFilter<"Produit"> | string
    lignes?: LigneFactureListRelationFilter
  }

  export type ProduitOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    prixAchat?: SortOrder
    prixVente?: SortOrder
    tauxMarge?: SortOrder
    dimension?: SortOrder
    taille?: SortOrder
    lignes?: LigneFactureOrderByRelationAggregateInput
  }

  export type ProduitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProduitWhereInput | ProduitWhereInput[]
    OR?: ProduitWhereInput[]
    NOT?: ProduitWhereInput | ProduitWhereInput[]
    nom?: StringFilter<"Produit"> | string
    prixAchat?: FloatFilter<"Produit"> | number
    prixVente?: FloatFilter<"Produit"> | number
    tauxMarge?: FloatFilter<"Produit"> | number
    dimension?: StringFilter<"Produit"> | string
    taille?: StringFilter<"Produit"> | string
    lignes?: LigneFactureListRelationFilter
  }, "id">

  export type ProduitOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    prixAchat?: SortOrder
    prixVente?: SortOrder
    tauxMarge?: SortOrder
    dimension?: SortOrder
    taille?: SortOrder
    _count?: ProduitCountOrderByAggregateInput
    _avg?: ProduitAvgOrderByAggregateInput
    _max?: ProduitMaxOrderByAggregateInput
    _min?: ProduitMinOrderByAggregateInput
    _sum?: ProduitSumOrderByAggregateInput
  }

  export type ProduitScalarWhereWithAggregatesInput = {
    AND?: ProduitScalarWhereWithAggregatesInput | ProduitScalarWhereWithAggregatesInput[]
    OR?: ProduitScalarWhereWithAggregatesInput[]
    NOT?: ProduitScalarWhereWithAggregatesInput | ProduitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Produit"> | number
    nom?: StringWithAggregatesFilter<"Produit"> | string
    prixAchat?: FloatWithAggregatesFilter<"Produit"> | number
    prixVente?: FloatWithAggregatesFilter<"Produit"> | number
    tauxMarge?: FloatWithAggregatesFilter<"Produit"> | number
    dimension?: StringWithAggregatesFilter<"Produit"> | string
    taille?: StringWithAggregatesFilter<"Produit"> | string
  }

  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    id?: IntFilter<"Client"> | number
    nom?: StringFilter<"Client"> | string
    prenom?: StringFilter<"Client"> | string
    adresse?: StringFilter<"Client"> | string
    ville?: StringFilter<"Client"> | string
    numeroTelephone?: StringFilter<"Client"> | string
    email?: StringFilter<"Client"> | string
    factures?: FactureListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
    factures?: FactureOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    nom?: StringFilter<"Client"> | string
    prenom?: StringFilter<"Client"> | string
    adresse?: StringFilter<"Client"> | string
    ville?: StringFilter<"Client"> | string
    numeroTelephone?: StringFilter<"Client"> | string
    email?: StringFilter<"Client"> | string
    factures?: FactureListRelationFilter
  }, "id">

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
    _count?: ClientCountOrderByAggregateInput
    _avg?: ClientAvgOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
    _sum?: ClientSumOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Client"> | number
    nom?: StringWithAggregatesFilter<"Client"> | string
    prenom?: StringWithAggregatesFilter<"Client"> | string
    adresse?: StringWithAggregatesFilter<"Client"> | string
    ville?: StringWithAggregatesFilter<"Client"> | string
    numeroTelephone?: StringWithAggregatesFilter<"Client"> | string
    email?: StringWithAggregatesFilter<"Client"> | string
  }

  export type FournisseurWhereInput = {
    AND?: FournisseurWhereInput | FournisseurWhereInput[]
    OR?: FournisseurWhereInput[]
    NOT?: FournisseurWhereInput | FournisseurWhereInput[]
    id?: IntFilter<"Fournisseur"> | number
    nom?: StringFilter<"Fournisseur"> | string
    adresse?: StringFilter<"Fournisseur"> | string
    ville?: StringFilter<"Fournisseur"> | string
    numeroTelephone?: StringFilter<"Fournisseur"> | string
    email?: StringFilter<"Fournisseur"> | string
    commandes?: CommandeFournisseurListRelationFilter
  }

  export type FournisseurOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
    commandes?: CommandeFournisseurOrderByRelationAggregateInput
  }

  export type FournisseurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FournisseurWhereInput | FournisseurWhereInput[]
    OR?: FournisseurWhereInput[]
    NOT?: FournisseurWhereInput | FournisseurWhereInput[]
    nom?: StringFilter<"Fournisseur"> | string
    adresse?: StringFilter<"Fournisseur"> | string
    ville?: StringFilter<"Fournisseur"> | string
    numeroTelephone?: StringFilter<"Fournisseur"> | string
    email?: StringFilter<"Fournisseur"> | string
    commandes?: CommandeFournisseurListRelationFilter
  }, "id">

  export type FournisseurOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
    _count?: FournisseurCountOrderByAggregateInput
    _avg?: FournisseurAvgOrderByAggregateInput
    _max?: FournisseurMaxOrderByAggregateInput
    _min?: FournisseurMinOrderByAggregateInput
    _sum?: FournisseurSumOrderByAggregateInput
  }

  export type FournisseurScalarWhereWithAggregatesInput = {
    AND?: FournisseurScalarWhereWithAggregatesInput | FournisseurScalarWhereWithAggregatesInput[]
    OR?: FournisseurScalarWhereWithAggregatesInput[]
    NOT?: FournisseurScalarWhereWithAggregatesInput | FournisseurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Fournisseur"> | number
    nom?: StringWithAggregatesFilter<"Fournisseur"> | string
    adresse?: StringWithAggregatesFilter<"Fournisseur"> | string
    ville?: StringWithAggregatesFilter<"Fournisseur"> | string
    numeroTelephone?: StringWithAggregatesFilter<"Fournisseur"> | string
    email?: StringWithAggregatesFilter<"Fournisseur"> | string
  }

  export type FactureWhereInput = {
    AND?: FactureWhereInput | FactureWhereInput[]
    OR?: FactureWhereInput[]
    NOT?: FactureWhereInput | FactureWhereInput[]
    id?: IntFilter<"Facture"> | number
    clientId?: IntFilter<"Facture"> | number
    date?: DateTimeFilter<"Facture"> | Date | string
    montantTotal?: FloatFilter<"Facture"> | number
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    lignes?: LigneFactureListRelationFilter
  }

  export type FactureOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    date?: SortOrder
    montantTotal?: SortOrder
    client?: ClientOrderByWithRelationInput
    lignes?: LigneFactureOrderByRelationAggregateInput
  }

  export type FactureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FactureWhereInput | FactureWhereInput[]
    OR?: FactureWhereInput[]
    NOT?: FactureWhereInput | FactureWhereInput[]
    clientId?: IntFilter<"Facture"> | number
    date?: DateTimeFilter<"Facture"> | Date | string
    montantTotal?: FloatFilter<"Facture"> | number
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    lignes?: LigneFactureListRelationFilter
  }, "id">

  export type FactureOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    date?: SortOrder
    montantTotal?: SortOrder
    _count?: FactureCountOrderByAggregateInput
    _avg?: FactureAvgOrderByAggregateInput
    _max?: FactureMaxOrderByAggregateInput
    _min?: FactureMinOrderByAggregateInput
    _sum?: FactureSumOrderByAggregateInput
  }

  export type FactureScalarWhereWithAggregatesInput = {
    AND?: FactureScalarWhereWithAggregatesInput | FactureScalarWhereWithAggregatesInput[]
    OR?: FactureScalarWhereWithAggregatesInput[]
    NOT?: FactureScalarWhereWithAggregatesInput | FactureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Facture"> | number
    clientId?: IntWithAggregatesFilter<"Facture"> | number
    date?: DateTimeWithAggregatesFilter<"Facture"> | Date | string
    montantTotal?: FloatWithAggregatesFilter<"Facture"> | number
  }

  export type LigneFactureWhereInput = {
    AND?: LigneFactureWhereInput | LigneFactureWhereInput[]
    OR?: LigneFactureWhereInput[]
    NOT?: LigneFactureWhereInput | LigneFactureWhereInput[]
    id?: IntFilter<"LigneFacture"> | number
    factureId?: IntFilter<"LigneFacture"> | number
    produitId?: IntFilter<"LigneFacture"> | number
    quantite?: IntFilter<"LigneFacture"> | number
    prixUnitaire?: FloatFilter<"LigneFacture"> | number
    sousTotal?: FloatFilter<"LigneFacture"> | number
    facture?: XOR<FactureRelationFilter, FactureWhereInput>
    produit?: XOR<ProduitRelationFilter, ProduitWhereInput>
  }

  export type LigneFactureOrderByWithRelationInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixUnitaire?: SortOrder
    sousTotal?: SortOrder
    facture?: FactureOrderByWithRelationInput
    produit?: ProduitOrderByWithRelationInput
  }

  export type LigneFactureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LigneFactureWhereInput | LigneFactureWhereInput[]
    OR?: LigneFactureWhereInput[]
    NOT?: LigneFactureWhereInput | LigneFactureWhereInput[]
    factureId?: IntFilter<"LigneFacture"> | number
    produitId?: IntFilter<"LigneFacture"> | number
    quantite?: IntFilter<"LigneFacture"> | number
    prixUnitaire?: FloatFilter<"LigneFacture"> | number
    sousTotal?: FloatFilter<"LigneFacture"> | number
    facture?: XOR<FactureRelationFilter, FactureWhereInput>
    produit?: XOR<ProduitRelationFilter, ProduitWhereInput>
  }, "id">

  export type LigneFactureOrderByWithAggregationInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixUnitaire?: SortOrder
    sousTotal?: SortOrder
    _count?: LigneFactureCountOrderByAggregateInput
    _avg?: LigneFactureAvgOrderByAggregateInput
    _max?: LigneFactureMaxOrderByAggregateInput
    _min?: LigneFactureMinOrderByAggregateInput
    _sum?: LigneFactureSumOrderByAggregateInput
  }

  export type LigneFactureScalarWhereWithAggregatesInput = {
    AND?: LigneFactureScalarWhereWithAggregatesInput | LigneFactureScalarWhereWithAggregatesInput[]
    OR?: LigneFactureScalarWhereWithAggregatesInput[]
    NOT?: LigneFactureScalarWhereWithAggregatesInput | LigneFactureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LigneFacture"> | number
    factureId?: IntWithAggregatesFilter<"LigneFacture"> | number
    produitId?: IntWithAggregatesFilter<"LigneFacture"> | number
    quantite?: IntWithAggregatesFilter<"LigneFacture"> | number
    prixUnitaire?: FloatWithAggregatesFilter<"LigneFacture"> | number
    sousTotal?: FloatWithAggregatesFilter<"LigneFacture"> | number
  }

  export type CommandeFournisseurWhereInput = {
    AND?: CommandeFournisseurWhereInput | CommandeFournisseurWhereInput[]
    OR?: CommandeFournisseurWhereInput[]
    NOT?: CommandeFournisseurWhereInput | CommandeFournisseurWhereInput[]
    id?: IntFilter<"CommandeFournisseur"> | number
    fournisseurId?: IntFilter<"CommandeFournisseur"> | number
    date?: DateTimeFilter<"CommandeFournisseur"> | Date | string
    statut?: StringFilter<"CommandeFournisseur"> | string
    fournisseur?: XOR<FournisseurRelationFilter, FournisseurWhereInput>
  }

  export type CommandeFournisseurOrderByWithRelationInput = {
    id?: SortOrder
    fournisseurId?: SortOrder
    date?: SortOrder
    statut?: SortOrder
    fournisseur?: FournisseurOrderByWithRelationInput
  }

  export type CommandeFournisseurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommandeFournisseurWhereInput | CommandeFournisseurWhereInput[]
    OR?: CommandeFournisseurWhereInput[]
    NOT?: CommandeFournisseurWhereInput | CommandeFournisseurWhereInput[]
    fournisseurId?: IntFilter<"CommandeFournisseur"> | number
    date?: DateTimeFilter<"CommandeFournisseur"> | Date | string
    statut?: StringFilter<"CommandeFournisseur"> | string
    fournisseur?: XOR<FournisseurRelationFilter, FournisseurWhereInput>
  }, "id">

  export type CommandeFournisseurOrderByWithAggregationInput = {
    id?: SortOrder
    fournisseurId?: SortOrder
    date?: SortOrder
    statut?: SortOrder
    _count?: CommandeFournisseurCountOrderByAggregateInput
    _avg?: CommandeFournisseurAvgOrderByAggregateInput
    _max?: CommandeFournisseurMaxOrderByAggregateInput
    _min?: CommandeFournisseurMinOrderByAggregateInput
    _sum?: CommandeFournisseurSumOrderByAggregateInput
  }

  export type CommandeFournisseurScalarWhereWithAggregatesInput = {
    AND?: CommandeFournisseurScalarWhereWithAggregatesInput | CommandeFournisseurScalarWhereWithAggregatesInput[]
    OR?: CommandeFournisseurScalarWhereWithAggregatesInput[]
    NOT?: CommandeFournisseurScalarWhereWithAggregatesInput | CommandeFournisseurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CommandeFournisseur"> | number
    fournisseurId?: IntWithAggregatesFilter<"CommandeFournisseur"> | number
    date?: DateTimeWithAggregatesFilter<"CommandeFournisseur"> | Date | string
    statut?: StringWithAggregatesFilter<"CommandeFournisseur"> | string
  }

  export type EntrepriseCreateInput = {
    nom: string
    siegeSocial: string
    dateCreation: Date | string
    identifiantFiscal: string
    capital: number
    nombreEmployes: number
    ville: string
    responsable: string
    numeroTelephone: string
    email: string
  }

  export type EntrepriseUncheckedCreateInput = {
    id?: number
    nom: string
    siegeSocial: string
    dateCreation: Date | string
    identifiantFiscal: string
    capital: number
    nombreEmployes: number
    ville: string
    responsable: string
    numeroTelephone: string
    email: string
  }

  export type EntrepriseUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    siegeSocial?: StringFieldUpdateOperationsInput | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiantFiscal?: StringFieldUpdateOperationsInput | string
    capital?: FloatFieldUpdateOperationsInput | number
    nombreEmployes?: IntFieldUpdateOperationsInput | number
    ville?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type EntrepriseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    siegeSocial?: StringFieldUpdateOperationsInput | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiantFiscal?: StringFieldUpdateOperationsInput | string
    capital?: FloatFieldUpdateOperationsInput | number
    nombreEmployes?: IntFieldUpdateOperationsInput | number
    ville?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type EntrepriseCreateManyInput = {
    id?: number
    nom: string
    siegeSocial: string
    dateCreation: Date | string
    identifiantFiscal: string
    capital: number
    nombreEmployes: number
    ville: string
    responsable: string
    numeroTelephone: string
    email: string
  }

  export type EntrepriseUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    siegeSocial?: StringFieldUpdateOperationsInput | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiantFiscal?: StringFieldUpdateOperationsInput | string
    capital?: FloatFieldUpdateOperationsInput | number
    nombreEmployes?: IntFieldUpdateOperationsInput | number
    ville?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type EntrepriseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    siegeSocial?: StringFieldUpdateOperationsInput | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiantFiscal?: StringFieldUpdateOperationsInput | string
    capital?: FloatFieldUpdateOperationsInput | number
    nombreEmployes?: IntFieldUpdateOperationsInput | number
    ville?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ProduitCreateInput = {
    nom: string
    prixAchat: number
    prixVente: number
    tauxMarge: number
    dimension: string
    taille: string
    lignes?: LigneFactureCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateInput = {
    id?: number
    nom: string
    prixAchat: number
    prixVente: number
    tauxMarge: number
    dimension: string
    taille: string
    lignes?: LigneFactureUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prixAchat?: FloatFieldUpdateOperationsInput | number
    prixVente?: FloatFieldUpdateOperationsInput | number
    tauxMarge?: FloatFieldUpdateOperationsInput | number
    dimension?: StringFieldUpdateOperationsInput | string
    taille?: StringFieldUpdateOperationsInput | string
    lignes?: LigneFactureUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prixAchat?: FloatFieldUpdateOperationsInput | number
    prixVente?: FloatFieldUpdateOperationsInput | number
    tauxMarge?: FloatFieldUpdateOperationsInput | number
    dimension?: StringFieldUpdateOperationsInput | string
    taille?: StringFieldUpdateOperationsInput | string
    lignes?: LigneFactureUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type ProduitCreateManyInput = {
    id?: number
    nom: string
    prixAchat: number
    prixVente: number
    tauxMarge: number
    dimension: string
    taille: string
  }

  export type ProduitUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prixAchat?: FloatFieldUpdateOperationsInput | number
    prixVente?: FloatFieldUpdateOperationsInput | number
    tauxMarge?: FloatFieldUpdateOperationsInput | number
    dimension?: StringFieldUpdateOperationsInput | string
    taille?: StringFieldUpdateOperationsInput | string
  }

  export type ProduitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prixAchat?: FloatFieldUpdateOperationsInput | number
    prixVente?: FloatFieldUpdateOperationsInput | number
    tauxMarge?: FloatFieldUpdateOperationsInput | number
    dimension?: StringFieldUpdateOperationsInput | string
    taille?: StringFieldUpdateOperationsInput | string
  }

  export type ClientCreateInput = {
    nom: string
    prenom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
    factures?: FactureCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: number
    nom: string
    prenom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
    factures?: FactureUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    factures?: FactureUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    factures?: FactureUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    id?: number
    nom: string
    prenom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
  }

  export type ClientUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type FournisseurCreateInput = {
    nom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
    commandes?: CommandeFournisseurCreateNestedManyWithoutFournisseurInput
  }

  export type FournisseurUncheckedCreateInput = {
    id?: number
    nom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
    commandes?: CommandeFournisseurUncheckedCreateNestedManyWithoutFournisseurInput
  }

  export type FournisseurUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    commandes?: CommandeFournisseurUpdateManyWithoutFournisseurNestedInput
  }

  export type FournisseurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    commandes?: CommandeFournisseurUncheckedUpdateManyWithoutFournisseurNestedInput
  }

  export type FournisseurCreateManyInput = {
    id?: number
    nom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
  }

  export type FournisseurUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type FournisseurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type FactureCreateInput = {
    date: Date | string
    montantTotal: number
    client: ClientCreateNestedOneWithoutFacturesInput
    lignes?: LigneFactureCreateNestedManyWithoutFactureInput
  }

  export type FactureUncheckedCreateInput = {
    id?: number
    clientId: number
    date: Date | string
    montantTotal: number
    lignes?: LigneFactureUncheckedCreateNestedManyWithoutFactureInput
  }

  export type FactureUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    client?: ClientUpdateOneRequiredWithoutFacturesNestedInput
    lignes?: LigneFactureUpdateManyWithoutFactureNestedInput
  }

  export type FactureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    lignes?: LigneFactureUncheckedUpdateManyWithoutFactureNestedInput
  }

  export type FactureCreateManyInput = {
    id?: number
    clientId: number
    date: Date | string
    montantTotal: number
  }

  export type FactureUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type FactureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type LigneFactureCreateInput = {
    quantite: number
    prixUnitaire: number
    sousTotal: number
    facture: FactureCreateNestedOneWithoutLignesInput
    produit: ProduitCreateNestedOneWithoutLignesInput
  }

  export type LigneFactureUncheckedCreateInput = {
    id?: number
    factureId: number
    produitId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
  }

  export type LigneFactureUpdateInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
    facture?: FactureUpdateOneRequiredWithoutLignesNestedInput
    produit?: ProduitUpdateOneRequiredWithoutLignesNestedInput
  }

  export type LigneFactureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    factureId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type LigneFactureCreateManyInput = {
    id?: number
    factureId: number
    produitId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
  }

  export type LigneFactureUpdateManyMutationInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type LigneFactureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    factureId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type CommandeFournisseurCreateInput = {
    date: Date | string
    statut: string
    fournisseur: FournisseurCreateNestedOneWithoutCommandesInput
  }

  export type CommandeFournisseurUncheckedCreateInput = {
    id?: number
    fournisseurId: number
    date: Date | string
    statut: string
  }

  export type CommandeFournisseurUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: StringFieldUpdateOperationsInput | string
    fournisseur?: FournisseurUpdateOneRequiredWithoutCommandesNestedInput
  }

  export type CommandeFournisseurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fournisseurId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: StringFieldUpdateOperationsInput | string
  }

  export type CommandeFournisseurCreateManyInput = {
    id?: number
    fournisseurId: number
    date: Date | string
    statut: string
  }

  export type CommandeFournisseurUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: StringFieldUpdateOperationsInput | string
  }

  export type CommandeFournisseurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fournisseurId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EntrepriseCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    siegeSocial?: SortOrder
    dateCreation?: SortOrder
    identifiantFiscal?: SortOrder
    capital?: SortOrder
    nombreEmployes?: SortOrder
    ville?: SortOrder
    responsable?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type EntrepriseAvgOrderByAggregateInput = {
    id?: SortOrder
    capital?: SortOrder
    nombreEmployes?: SortOrder
  }

  export type EntrepriseMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    siegeSocial?: SortOrder
    dateCreation?: SortOrder
    identifiantFiscal?: SortOrder
    capital?: SortOrder
    nombreEmployes?: SortOrder
    ville?: SortOrder
    responsable?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type EntrepriseMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    siegeSocial?: SortOrder
    dateCreation?: SortOrder
    identifiantFiscal?: SortOrder
    capital?: SortOrder
    nombreEmployes?: SortOrder
    ville?: SortOrder
    responsable?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type EntrepriseSumOrderByAggregateInput = {
    id?: SortOrder
    capital?: SortOrder
    nombreEmployes?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type LigneFactureListRelationFilter = {
    every?: LigneFactureWhereInput
    some?: LigneFactureWhereInput
    none?: LigneFactureWhereInput
  }

  export type LigneFactureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProduitCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prixAchat?: SortOrder
    prixVente?: SortOrder
    tauxMarge?: SortOrder
    dimension?: SortOrder
    taille?: SortOrder
  }

  export type ProduitAvgOrderByAggregateInput = {
    id?: SortOrder
    prixAchat?: SortOrder
    prixVente?: SortOrder
    tauxMarge?: SortOrder
  }

  export type ProduitMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prixAchat?: SortOrder
    prixVente?: SortOrder
    tauxMarge?: SortOrder
    dimension?: SortOrder
    taille?: SortOrder
  }

  export type ProduitMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prixAchat?: SortOrder
    prixVente?: SortOrder
    tauxMarge?: SortOrder
    dimension?: SortOrder
    taille?: SortOrder
  }

  export type ProduitSumOrderByAggregateInput = {
    id?: SortOrder
    prixAchat?: SortOrder
    prixVente?: SortOrder
    tauxMarge?: SortOrder
  }

  export type FactureListRelationFilter = {
    every?: FactureWhereInput
    some?: FactureWhereInput
    none?: FactureWhereInput
  }

  export type FactureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type ClientAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type ClientSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CommandeFournisseurListRelationFilter = {
    every?: CommandeFournisseurWhereInput
    some?: CommandeFournisseurWhereInput
    none?: CommandeFournisseurWhereInput
  }

  export type CommandeFournisseurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FournisseurCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type FournisseurAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FournisseurMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type FournisseurMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    numeroTelephone?: SortOrder
    email?: SortOrder
  }

  export type FournisseurSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClientRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type FactureCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    date?: SortOrder
    montantTotal?: SortOrder
  }

  export type FactureAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    montantTotal?: SortOrder
  }

  export type FactureMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    date?: SortOrder
    montantTotal?: SortOrder
  }

  export type FactureMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    date?: SortOrder
    montantTotal?: SortOrder
  }

  export type FactureSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    montantTotal?: SortOrder
  }

  export type FactureRelationFilter = {
    is?: FactureWhereInput
    isNot?: FactureWhereInput
  }

  export type ProduitRelationFilter = {
    is?: ProduitWhereInput
    isNot?: ProduitWhereInput
  }

  export type LigneFactureCountOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixUnitaire?: SortOrder
    sousTotal?: SortOrder
  }

  export type LigneFactureAvgOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixUnitaire?: SortOrder
    sousTotal?: SortOrder
  }

  export type LigneFactureMaxOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixUnitaire?: SortOrder
    sousTotal?: SortOrder
  }

  export type LigneFactureMinOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixUnitaire?: SortOrder
    sousTotal?: SortOrder
  }

  export type LigneFactureSumOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixUnitaire?: SortOrder
    sousTotal?: SortOrder
  }

  export type FournisseurRelationFilter = {
    is?: FournisseurWhereInput
    isNot?: FournisseurWhereInput
  }

  export type CommandeFournisseurCountOrderByAggregateInput = {
    id?: SortOrder
    fournisseurId?: SortOrder
    date?: SortOrder
    statut?: SortOrder
  }

  export type CommandeFournisseurAvgOrderByAggregateInput = {
    id?: SortOrder
    fournisseurId?: SortOrder
  }

  export type CommandeFournisseurMaxOrderByAggregateInput = {
    id?: SortOrder
    fournisseurId?: SortOrder
    date?: SortOrder
    statut?: SortOrder
  }

  export type CommandeFournisseurMinOrderByAggregateInput = {
    id?: SortOrder
    fournisseurId?: SortOrder
    date?: SortOrder
    statut?: SortOrder
  }

  export type CommandeFournisseurSumOrderByAggregateInput = {
    id?: SortOrder
    fournisseurId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LigneFactureCreateNestedManyWithoutProduitInput = {
    create?: XOR<LigneFactureCreateWithoutProduitInput, LigneFactureUncheckedCreateWithoutProduitInput> | LigneFactureCreateWithoutProduitInput[] | LigneFactureUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: LigneFactureCreateOrConnectWithoutProduitInput | LigneFactureCreateOrConnectWithoutProduitInput[]
    createMany?: LigneFactureCreateManyProduitInputEnvelope
    connect?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
  }

  export type LigneFactureUncheckedCreateNestedManyWithoutProduitInput = {
    create?: XOR<LigneFactureCreateWithoutProduitInput, LigneFactureUncheckedCreateWithoutProduitInput> | LigneFactureCreateWithoutProduitInput[] | LigneFactureUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: LigneFactureCreateOrConnectWithoutProduitInput | LigneFactureCreateOrConnectWithoutProduitInput[]
    createMany?: LigneFactureCreateManyProduitInputEnvelope
    connect?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
  }

  export type LigneFactureUpdateManyWithoutProduitNestedInput = {
    create?: XOR<LigneFactureCreateWithoutProduitInput, LigneFactureUncheckedCreateWithoutProduitInput> | LigneFactureCreateWithoutProduitInput[] | LigneFactureUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: LigneFactureCreateOrConnectWithoutProduitInput | LigneFactureCreateOrConnectWithoutProduitInput[]
    upsert?: LigneFactureUpsertWithWhereUniqueWithoutProduitInput | LigneFactureUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: LigneFactureCreateManyProduitInputEnvelope
    set?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    disconnect?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    delete?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    connect?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    update?: LigneFactureUpdateWithWhereUniqueWithoutProduitInput | LigneFactureUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: LigneFactureUpdateManyWithWhereWithoutProduitInput | LigneFactureUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: LigneFactureScalarWhereInput | LigneFactureScalarWhereInput[]
  }

  export type LigneFactureUncheckedUpdateManyWithoutProduitNestedInput = {
    create?: XOR<LigneFactureCreateWithoutProduitInput, LigneFactureUncheckedCreateWithoutProduitInput> | LigneFactureCreateWithoutProduitInput[] | LigneFactureUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: LigneFactureCreateOrConnectWithoutProduitInput | LigneFactureCreateOrConnectWithoutProduitInput[]
    upsert?: LigneFactureUpsertWithWhereUniqueWithoutProduitInput | LigneFactureUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: LigneFactureCreateManyProduitInputEnvelope
    set?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    disconnect?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    delete?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    connect?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    update?: LigneFactureUpdateWithWhereUniqueWithoutProduitInput | LigneFactureUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: LigneFactureUpdateManyWithWhereWithoutProduitInput | LigneFactureUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: LigneFactureScalarWhereInput | LigneFactureScalarWhereInput[]
  }

  export type FactureCreateNestedManyWithoutClientInput = {
    create?: XOR<FactureCreateWithoutClientInput, FactureUncheckedCreateWithoutClientInput> | FactureCreateWithoutClientInput[] | FactureUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FactureCreateOrConnectWithoutClientInput | FactureCreateOrConnectWithoutClientInput[]
    createMany?: FactureCreateManyClientInputEnvelope
    connect?: FactureWhereUniqueInput | FactureWhereUniqueInput[]
  }

  export type FactureUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<FactureCreateWithoutClientInput, FactureUncheckedCreateWithoutClientInput> | FactureCreateWithoutClientInput[] | FactureUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FactureCreateOrConnectWithoutClientInput | FactureCreateOrConnectWithoutClientInput[]
    createMany?: FactureCreateManyClientInputEnvelope
    connect?: FactureWhereUniqueInput | FactureWhereUniqueInput[]
  }

  export type FactureUpdateManyWithoutClientNestedInput = {
    create?: XOR<FactureCreateWithoutClientInput, FactureUncheckedCreateWithoutClientInput> | FactureCreateWithoutClientInput[] | FactureUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FactureCreateOrConnectWithoutClientInput | FactureCreateOrConnectWithoutClientInput[]
    upsert?: FactureUpsertWithWhereUniqueWithoutClientInput | FactureUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: FactureCreateManyClientInputEnvelope
    set?: FactureWhereUniqueInput | FactureWhereUniqueInput[]
    disconnect?: FactureWhereUniqueInput | FactureWhereUniqueInput[]
    delete?: FactureWhereUniqueInput | FactureWhereUniqueInput[]
    connect?: FactureWhereUniqueInput | FactureWhereUniqueInput[]
    update?: FactureUpdateWithWhereUniqueWithoutClientInput | FactureUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: FactureUpdateManyWithWhereWithoutClientInput | FactureUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: FactureScalarWhereInput | FactureScalarWhereInput[]
  }

  export type FactureUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<FactureCreateWithoutClientInput, FactureUncheckedCreateWithoutClientInput> | FactureCreateWithoutClientInput[] | FactureUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FactureCreateOrConnectWithoutClientInput | FactureCreateOrConnectWithoutClientInput[]
    upsert?: FactureUpsertWithWhereUniqueWithoutClientInput | FactureUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: FactureCreateManyClientInputEnvelope
    set?: FactureWhereUniqueInput | FactureWhereUniqueInput[]
    disconnect?: FactureWhereUniqueInput | FactureWhereUniqueInput[]
    delete?: FactureWhereUniqueInput | FactureWhereUniqueInput[]
    connect?: FactureWhereUniqueInput | FactureWhereUniqueInput[]
    update?: FactureUpdateWithWhereUniqueWithoutClientInput | FactureUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: FactureUpdateManyWithWhereWithoutClientInput | FactureUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: FactureScalarWhereInput | FactureScalarWhereInput[]
  }

  export type CommandeFournisseurCreateNestedManyWithoutFournisseurInput = {
    create?: XOR<CommandeFournisseurCreateWithoutFournisseurInput, CommandeFournisseurUncheckedCreateWithoutFournisseurInput> | CommandeFournisseurCreateWithoutFournisseurInput[] | CommandeFournisseurUncheckedCreateWithoutFournisseurInput[]
    connectOrCreate?: CommandeFournisseurCreateOrConnectWithoutFournisseurInput | CommandeFournisseurCreateOrConnectWithoutFournisseurInput[]
    createMany?: CommandeFournisseurCreateManyFournisseurInputEnvelope
    connect?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
  }

  export type CommandeFournisseurUncheckedCreateNestedManyWithoutFournisseurInput = {
    create?: XOR<CommandeFournisseurCreateWithoutFournisseurInput, CommandeFournisseurUncheckedCreateWithoutFournisseurInput> | CommandeFournisseurCreateWithoutFournisseurInput[] | CommandeFournisseurUncheckedCreateWithoutFournisseurInput[]
    connectOrCreate?: CommandeFournisseurCreateOrConnectWithoutFournisseurInput | CommandeFournisseurCreateOrConnectWithoutFournisseurInput[]
    createMany?: CommandeFournisseurCreateManyFournisseurInputEnvelope
    connect?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
  }

  export type CommandeFournisseurUpdateManyWithoutFournisseurNestedInput = {
    create?: XOR<CommandeFournisseurCreateWithoutFournisseurInput, CommandeFournisseurUncheckedCreateWithoutFournisseurInput> | CommandeFournisseurCreateWithoutFournisseurInput[] | CommandeFournisseurUncheckedCreateWithoutFournisseurInput[]
    connectOrCreate?: CommandeFournisseurCreateOrConnectWithoutFournisseurInput | CommandeFournisseurCreateOrConnectWithoutFournisseurInput[]
    upsert?: CommandeFournisseurUpsertWithWhereUniqueWithoutFournisseurInput | CommandeFournisseurUpsertWithWhereUniqueWithoutFournisseurInput[]
    createMany?: CommandeFournisseurCreateManyFournisseurInputEnvelope
    set?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    disconnect?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    delete?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    connect?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    update?: CommandeFournisseurUpdateWithWhereUniqueWithoutFournisseurInput | CommandeFournisseurUpdateWithWhereUniqueWithoutFournisseurInput[]
    updateMany?: CommandeFournisseurUpdateManyWithWhereWithoutFournisseurInput | CommandeFournisseurUpdateManyWithWhereWithoutFournisseurInput[]
    deleteMany?: CommandeFournisseurScalarWhereInput | CommandeFournisseurScalarWhereInput[]
  }

  export type CommandeFournisseurUncheckedUpdateManyWithoutFournisseurNestedInput = {
    create?: XOR<CommandeFournisseurCreateWithoutFournisseurInput, CommandeFournisseurUncheckedCreateWithoutFournisseurInput> | CommandeFournisseurCreateWithoutFournisseurInput[] | CommandeFournisseurUncheckedCreateWithoutFournisseurInput[]
    connectOrCreate?: CommandeFournisseurCreateOrConnectWithoutFournisseurInput | CommandeFournisseurCreateOrConnectWithoutFournisseurInput[]
    upsert?: CommandeFournisseurUpsertWithWhereUniqueWithoutFournisseurInput | CommandeFournisseurUpsertWithWhereUniqueWithoutFournisseurInput[]
    createMany?: CommandeFournisseurCreateManyFournisseurInputEnvelope
    set?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    disconnect?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    delete?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    connect?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    update?: CommandeFournisseurUpdateWithWhereUniqueWithoutFournisseurInput | CommandeFournisseurUpdateWithWhereUniqueWithoutFournisseurInput[]
    updateMany?: CommandeFournisseurUpdateManyWithWhereWithoutFournisseurInput | CommandeFournisseurUpdateManyWithWhereWithoutFournisseurInput[]
    deleteMany?: CommandeFournisseurScalarWhereInput | CommandeFournisseurScalarWhereInput[]
  }

  export type ClientCreateNestedOneWithoutFacturesInput = {
    create?: XOR<ClientCreateWithoutFacturesInput, ClientUncheckedCreateWithoutFacturesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutFacturesInput
    connect?: ClientWhereUniqueInput
  }

  export type LigneFactureCreateNestedManyWithoutFactureInput = {
    create?: XOR<LigneFactureCreateWithoutFactureInput, LigneFactureUncheckedCreateWithoutFactureInput> | LigneFactureCreateWithoutFactureInput[] | LigneFactureUncheckedCreateWithoutFactureInput[]
    connectOrCreate?: LigneFactureCreateOrConnectWithoutFactureInput | LigneFactureCreateOrConnectWithoutFactureInput[]
    createMany?: LigneFactureCreateManyFactureInputEnvelope
    connect?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
  }

  export type LigneFactureUncheckedCreateNestedManyWithoutFactureInput = {
    create?: XOR<LigneFactureCreateWithoutFactureInput, LigneFactureUncheckedCreateWithoutFactureInput> | LigneFactureCreateWithoutFactureInput[] | LigneFactureUncheckedCreateWithoutFactureInput[]
    connectOrCreate?: LigneFactureCreateOrConnectWithoutFactureInput | LigneFactureCreateOrConnectWithoutFactureInput[]
    createMany?: LigneFactureCreateManyFactureInputEnvelope
    connect?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
  }

  export type ClientUpdateOneRequiredWithoutFacturesNestedInput = {
    create?: XOR<ClientCreateWithoutFacturesInput, ClientUncheckedCreateWithoutFacturesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutFacturesInput
    upsert?: ClientUpsertWithoutFacturesInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutFacturesInput, ClientUpdateWithoutFacturesInput>, ClientUncheckedUpdateWithoutFacturesInput>
  }

  export type LigneFactureUpdateManyWithoutFactureNestedInput = {
    create?: XOR<LigneFactureCreateWithoutFactureInput, LigneFactureUncheckedCreateWithoutFactureInput> | LigneFactureCreateWithoutFactureInput[] | LigneFactureUncheckedCreateWithoutFactureInput[]
    connectOrCreate?: LigneFactureCreateOrConnectWithoutFactureInput | LigneFactureCreateOrConnectWithoutFactureInput[]
    upsert?: LigneFactureUpsertWithWhereUniqueWithoutFactureInput | LigneFactureUpsertWithWhereUniqueWithoutFactureInput[]
    createMany?: LigneFactureCreateManyFactureInputEnvelope
    set?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    disconnect?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    delete?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    connect?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    update?: LigneFactureUpdateWithWhereUniqueWithoutFactureInput | LigneFactureUpdateWithWhereUniqueWithoutFactureInput[]
    updateMany?: LigneFactureUpdateManyWithWhereWithoutFactureInput | LigneFactureUpdateManyWithWhereWithoutFactureInput[]
    deleteMany?: LigneFactureScalarWhereInput | LigneFactureScalarWhereInput[]
  }

  export type LigneFactureUncheckedUpdateManyWithoutFactureNestedInput = {
    create?: XOR<LigneFactureCreateWithoutFactureInput, LigneFactureUncheckedCreateWithoutFactureInput> | LigneFactureCreateWithoutFactureInput[] | LigneFactureUncheckedCreateWithoutFactureInput[]
    connectOrCreate?: LigneFactureCreateOrConnectWithoutFactureInput | LigneFactureCreateOrConnectWithoutFactureInput[]
    upsert?: LigneFactureUpsertWithWhereUniqueWithoutFactureInput | LigneFactureUpsertWithWhereUniqueWithoutFactureInput[]
    createMany?: LigneFactureCreateManyFactureInputEnvelope
    set?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    disconnect?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    delete?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    connect?: LigneFactureWhereUniqueInput | LigneFactureWhereUniqueInput[]
    update?: LigneFactureUpdateWithWhereUniqueWithoutFactureInput | LigneFactureUpdateWithWhereUniqueWithoutFactureInput[]
    updateMany?: LigneFactureUpdateManyWithWhereWithoutFactureInput | LigneFactureUpdateManyWithWhereWithoutFactureInput[]
    deleteMany?: LigneFactureScalarWhereInput | LigneFactureScalarWhereInput[]
  }

  export type FactureCreateNestedOneWithoutLignesInput = {
    create?: XOR<FactureCreateWithoutLignesInput, FactureUncheckedCreateWithoutLignesInput>
    connectOrCreate?: FactureCreateOrConnectWithoutLignesInput
    connect?: FactureWhereUniqueInput
  }

  export type ProduitCreateNestedOneWithoutLignesInput = {
    create?: XOR<ProduitCreateWithoutLignesInput, ProduitUncheckedCreateWithoutLignesInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutLignesInput
    connect?: ProduitWhereUniqueInput
  }

  export type FactureUpdateOneRequiredWithoutLignesNestedInput = {
    create?: XOR<FactureCreateWithoutLignesInput, FactureUncheckedCreateWithoutLignesInput>
    connectOrCreate?: FactureCreateOrConnectWithoutLignesInput
    upsert?: FactureUpsertWithoutLignesInput
    connect?: FactureWhereUniqueInput
    update?: XOR<XOR<FactureUpdateToOneWithWhereWithoutLignesInput, FactureUpdateWithoutLignesInput>, FactureUncheckedUpdateWithoutLignesInput>
  }

  export type ProduitUpdateOneRequiredWithoutLignesNestedInput = {
    create?: XOR<ProduitCreateWithoutLignesInput, ProduitUncheckedCreateWithoutLignesInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutLignesInput
    upsert?: ProduitUpsertWithoutLignesInput
    connect?: ProduitWhereUniqueInput
    update?: XOR<XOR<ProduitUpdateToOneWithWhereWithoutLignesInput, ProduitUpdateWithoutLignesInput>, ProduitUncheckedUpdateWithoutLignesInput>
  }

  export type FournisseurCreateNestedOneWithoutCommandesInput = {
    create?: XOR<FournisseurCreateWithoutCommandesInput, FournisseurUncheckedCreateWithoutCommandesInput>
    connectOrCreate?: FournisseurCreateOrConnectWithoutCommandesInput
    connect?: FournisseurWhereUniqueInput
  }

  export type FournisseurUpdateOneRequiredWithoutCommandesNestedInput = {
    create?: XOR<FournisseurCreateWithoutCommandesInput, FournisseurUncheckedCreateWithoutCommandesInput>
    connectOrCreate?: FournisseurCreateOrConnectWithoutCommandesInput
    upsert?: FournisseurUpsertWithoutCommandesInput
    connect?: FournisseurWhereUniqueInput
    update?: XOR<XOR<FournisseurUpdateToOneWithWhereWithoutCommandesInput, FournisseurUpdateWithoutCommandesInput>, FournisseurUncheckedUpdateWithoutCommandesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type LigneFactureCreateWithoutProduitInput = {
    quantite: number
    prixUnitaire: number
    sousTotal: number
    facture: FactureCreateNestedOneWithoutLignesInput
  }

  export type LigneFactureUncheckedCreateWithoutProduitInput = {
    id?: number
    factureId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
  }

  export type LigneFactureCreateOrConnectWithoutProduitInput = {
    where: LigneFactureWhereUniqueInput
    create: XOR<LigneFactureCreateWithoutProduitInput, LigneFactureUncheckedCreateWithoutProduitInput>
  }

  export type LigneFactureCreateManyProduitInputEnvelope = {
    data: LigneFactureCreateManyProduitInput | LigneFactureCreateManyProduitInput[]
    skipDuplicates?: boolean
  }

  export type LigneFactureUpsertWithWhereUniqueWithoutProduitInput = {
    where: LigneFactureWhereUniqueInput
    update: XOR<LigneFactureUpdateWithoutProduitInput, LigneFactureUncheckedUpdateWithoutProduitInput>
    create: XOR<LigneFactureCreateWithoutProduitInput, LigneFactureUncheckedCreateWithoutProduitInput>
  }

  export type LigneFactureUpdateWithWhereUniqueWithoutProduitInput = {
    where: LigneFactureWhereUniqueInput
    data: XOR<LigneFactureUpdateWithoutProduitInput, LigneFactureUncheckedUpdateWithoutProduitInput>
  }

  export type LigneFactureUpdateManyWithWhereWithoutProduitInput = {
    where: LigneFactureScalarWhereInput
    data: XOR<LigneFactureUpdateManyMutationInput, LigneFactureUncheckedUpdateManyWithoutProduitInput>
  }

  export type LigneFactureScalarWhereInput = {
    AND?: LigneFactureScalarWhereInput | LigneFactureScalarWhereInput[]
    OR?: LigneFactureScalarWhereInput[]
    NOT?: LigneFactureScalarWhereInput | LigneFactureScalarWhereInput[]
    id?: IntFilter<"LigneFacture"> | number
    factureId?: IntFilter<"LigneFacture"> | number
    produitId?: IntFilter<"LigneFacture"> | number
    quantite?: IntFilter<"LigneFacture"> | number
    prixUnitaire?: FloatFilter<"LigneFacture"> | number
    sousTotal?: FloatFilter<"LigneFacture"> | number
  }

  export type FactureCreateWithoutClientInput = {
    date: Date | string
    montantTotal: number
    lignes?: LigneFactureCreateNestedManyWithoutFactureInput
  }

  export type FactureUncheckedCreateWithoutClientInput = {
    id?: number
    date: Date | string
    montantTotal: number
    lignes?: LigneFactureUncheckedCreateNestedManyWithoutFactureInput
  }

  export type FactureCreateOrConnectWithoutClientInput = {
    where: FactureWhereUniqueInput
    create: XOR<FactureCreateWithoutClientInput, FactureUncheckedCreateWithoutClientInput>
  }

  export type FactureCreateManyClientInputEnvelope = {
    data: FactureCreateManyClientInput | FactureCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type FactureUpsertWithWhereUniqueWithoutClientInput = {
    where: FactureWhereUniqueInput
    update: XOR<FactureUpdateWithoutClientInput, FactureUncheckedUpdateWithoutClientInput>
    create: XOR<FactureCreateWithoutClientInput, FactureUncheckedCreateWithoutClientInput>
  }

  export type FactureUpdateWithWhereUniqueWithoutClientInput = {
    where: FactureWhereUniqueInput
    data: XOR<FactureUpdateWithoutClientInput, FactureUncheckedUpdateWithoutClientInput>
  }

  export type FactureUpdateManyWithWhereWithoutClientInput = {
    where: FactureScalarWhereInput
    data: XOR<FactureUpdateManyMutationInput, FactureUncheckedUpdateManyWithoutClientInput>
  }

  export type FactureScalarWhereInput = {
    AND?: FactureScalarWhereInput | FactureScalarWhereInput[]
    OR?: FactureScalarWhereInput[]
    NOT?: FactureScalarWhereInput | FactureScalarWhereInput[]
    id?: IntFilter<"Facture"> | number
    clientId?: IntFilter<"Facture"> | number
    date?: DateTimeFilter<"Facture"> | Date | string
    montantTotal?: FloatFilter<"Facture"> | number
  }

  export type CommandeFournisseurCreateWithoutFournisseurInput = {
    date: Date | string
    statut: string
  }

  export type CommandeFournisseurUncheckedCreateWithoutFournisseurInput = {
    id?: number
    date: Date | string
    statut: string
  }

  export type CommandeFournisseurCreateOrConnectWithoutFournisseurInput = {
    where: CommandeFournisseurWhereUniqueInput
    create: XOR<CommandeFournisseurCreateWithoutFournisseurInput, CommandeFournisseurUncheckedCreateWithoutFournisseurInput>
  }

  export type CommandeFournisseurCreateManyFournisseurInputEnvelope = {
    data: CommandeFournisseurCreateManyFournisseurInput | CommandeFournisseurCreateManyFournisseurInput[]
    skipDuplicates?: boolean
  }

  export type CommandeFournisseurUpsertWithWhereUniqueWithoutFournisseurInput = {
    where: CommandeFournisseurWhereUniqueInput
    update: XOR<CommandeFournisseurUpdateWithoutFournisseurInput, CommandeFournisseurUncheckedUpdateWithoutFournisseurInput>
    create: XOR<CommandeFournisseurCreateWithoutFournisseurInput, CommandeFournisseurUncheckedCreateWithoutFournisseurInput>
  }

  export type CommandeFournisseurUpdateWithWhereUniqueWithoutFournisseurInput = {
    where: CommandeFournisseurWhereUniqueInput
    data: XOR<CommandeFournisseurUpdateWithoutFournisseurInput, CommandeFournisseurUncheckedUpdateWithoutFournisseurInput>
  }

  export type CommandeFournisseurUpdateManyWithWhereWithoutFournisseurInput = {
    where: CommandeFournisseurScalarWhereInput
    data: XOR<CommandeFournisseurUpdateManyMutationInput, CommandeFournisseurUncheckedUpdateManyWithoutFournisseurInput>
  }

  export type CommandeFournisseurScalarWhereInput = {
    AND?: CommandeFournisseurScalarWhereInput | CommandeFournisseurScalarWhereInput[]
    OR?: CommandeFournisseurScalarWhereInput[]
    NOT?: CommandeFournisseurScalarWhereInput | CommandeFournisseurScalarWhereInput[]
    id?: IntFilter<"CommandeFournisseur"> | number
    fournisseurId?: IntFilter<"CommandeFournisseur"> | number
    date?: DateTimeFilter<"CommandeFournisseur"> | Date | string
    statut?: StringFilter<"CommandeFournisseur"> | string
  }

  export type ClientCreateWithoutFacturesInput = {
    nom: string
    prenom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
  }

  export type ClientUncheckedCreateWithoutFacturesInput = {
    id?: number
    nom: string
    prenom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
  }

  export type ClientCreateOrConnectWithoutFacturesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutFacturesInput, ClientUncheckedCreateWithoutFacturesInput>
  }

  export type LigneFactureCreateWithoutFactureInput = {
    quantite: number
    prixUnitaire: number
    sousTotal: number
    produit: ProduitCreateNestedOneWithoutLignesInput
  }

  export type LigneFactureUncheckedCreateWithoutFactureInput = {
    id?: number
    produitId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
  }

  export type LigneFactureCreateOrConnectWithoutFactureInput = {
    where: LigneFactureWhereUniqueInput
    create: XOR<LigneFactureCreateWithoutFactureInput, LigneFactureUncheckedCreateWithoutFactureInput>
  }

  export type LigneFactureCreateManyFactureInputEnvelope = {
    data: LigneFactureCreateManyFactureInput | LigneFactureCreateManyFactureInput[]
    skipDuplicates?: boolean
  }

  export type ClientUpsertWithoutFacturesInput = {
    update: XOR<ClientUpdateWithoutFacturesInput, ClientUncheckedUpdateWithoutFacturesInput>
    create: XOR<ClientCreateWithoutFacturesInput, ClientUncheckedCreateWithoutFacturesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutFacturesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutFacturesInput, ClientUncheckedUpdateWithoutFacturesInput>
  }

  export type ClientUpdateWithoutFacturesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ClientUncheckedUpdateWithoutFacturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type LigneFactureUpsertWithWhereUniqueWithoutFactureInput = {
    where: LigneFactureWhereUniqueInput
    update: XOR<LigneFactureUpdateWithoutFactureInput, LigneFactureUncheckedUpdateWithoutFactureInput>
    create: XOR<LigneFactureCreateWithoutFactureInput, LigneFactureUncheckedCreateWithoutFactureInput>
  }

  export type LigneFactureUpdateWithWhereUniqueWithoutFactureInput = {
    where: LigneFactureWhereUniqueInput
    data: XOR<LigneFactureUpdateWithoutFactureInput, LigneFactureUncheckedUpdateWithoutFactureInput>
  }

  export type LigneFactureUpdateManyWithWhereWithoutFactureInput = {
    where: LigneFactureScalarWhereInput
    data: XOR<LigneFactureUpdateManyMutationInput, LigneFactureUncheckedUpdateManyWithoutFactureInput>
  }

  export type FactureCreateWithoutLignesInput = {
    date: Date | string
    montantTotal: number
    client: ClientCreateNestedOneWithoutFacturesInput
  }

  export type FactureUncheckedCreateWithoutLignesInput = {
    id?: number
    clientId: number
    date: Date | string
    montantTotal: number
  }

  export type FactureCreateOrConnectWithoutLignesInput = {
    where: FactureWhereUniqueInput
    create: XOR<FactureCreateWithoutLignesInput, FactureUncheckedCreateWithoutLignesInput>
  }

  export type ProduitCreateWithoutLignesInput = {
    nom: string
    prixAchat: number
    prixVente: number
    tauxMarge: number
    dimension: string
    taille: string
  }

  export type ProduitUncheckedCreateWithoutLignesInput = {
    id?: number
    nom: string
    prixAchat: number
    prixVente: number
    tauxMarge: number
    dimension: string
    taille: string
  }

  export type ProduitCreateOrConnectWithoutLignesInput = {
    where: ProduitWhereUniqueInput
    create: XOR<ProduitCreateWithoutLignesInput, ProduitUncheckedCreateWithoutLignesInput>
  }

  export type FactureUpsertWithoutLignesInput = {
    update: XOR<FactureUpdateWithoutLignesInput, FactureUncheckedUpdateWithoutLignesInput>
    create: XOR<FactureCreateWithoutLignesInput, FactureUncheckedCreateWithoutLignesInput>
    where?: FactureWhereInput
  }

  export type FactureUpdateToOneWithWhereWithoutLignesInput = {
    where?: FactureWhereInput
    data: XOR<FactureUpdateWithoutLignesInput, FactureUncheckedUpdateWithoutLignesInput>
  }

  export type FactureUpdateWithoutLignesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    client?: ClientUpdateOneRequiredWithoutFacturesNestedInput
  }

  export type FactureUncheckedUpdateWithoutLignesInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type ProduitUpsertWithoutLignesInput = {
    update: XOR<ProduitUpdateWithoutLignesInput, ProduitUncheckedUpdateWithoutLignesInput>
    create: XOR<ProduitCreateWithoutLignesInput, ProduitUncheckedCreateWithoutLignesInput>
    where?: ProduitWhereInput
  }

  export type ProduitUpdateToOneWithWhereWithoutLignesInput = {
    where?: ProduitWhereInput
    data: XOR<ProduitUpdateWithoutLignesInput, ProduitUncheckedUpdateWithoutLignesInput>
  }

  export type ProduitUpdateWithoutLignesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prixAchat?: FloatFieldUpdateOperationsInput | number
    prixVente?: FloatFieldUpdateOperationsInput | number
    tauxMarge?: FloatFieldUpdateOperationsInput | number
    dimension?: StringFieldUpdateOperationsInput | string
    taille?: StringFieldUpdateOperationsInput | string
  }

  export type ProduitUncheckedUpdateWithoutLignesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prixAchat?: FloatFieldUpdateOperationsInput | number
    prixVente?: FloatFieldUpdateOperationsInput | number
    tauxMarge?: FloatFieldUpdateOperationsInput | number
    dimension?: StringFieldUpdateOperationsInput | string
    taille?: StringFieldUpdateOperationsInput | string
  }

  export type FournisseurCreateWithoutCommandesInput = {
    nom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
  }

  export type FournisseurUncheckedCreateWithoutCommandesInput = {
    id?: number
    nom: string
    adresse: string
    ville: string
    numeroTelephone: string
    email: string
  }

  export type FournisseurCreateOrConnectWithoutCommandesInput = {
    where: FournisseurWhereUniqueInput
    create: XOR<FournisseurCreateWithoutCommandesInput, FournisseurUncheckedCreateWithoutCommandesInput>
  }

  export type FournisseurUpsertWithoutCommandesInput = {
    update: XOR<FournisseurUpdateWithoutCommandesInput, FournisseurUncheckedUpdateWithoutCommandesInput>
    create: XOR<FournisseurCreateWithoutCommandesInput, FournisseurUncheckedCreateWithoutCommandesInput>
    where?: FournisseurWhereInput
  }

  export type FournisseurUpdateToOneWithWhereWithoutCommandesInput = {
    where?: FournisseurWhereInput
    data: XOR<FournisseurUpdateWithoutCommandesInput, FournisseurUncheckedUpdateWithoutCommandesInput>
  }

  export type FournisseurUpdateWithoutCommandesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type FournisseurUncheckedUpdateWithoutCommandesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    numeroTelephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type LigneFactureCreateManyProduitInput = {
    id?: number
    factureId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
  }

  export type LigneFactureUpdateWithoutProduitInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
    facture?: FactureUpdateOneRequiredWithoutLignesNestedInput
  }

  export type LigneFactureUncheckedUpdateWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    factureId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type LigneFactureUncheckedUpdateManyWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    factureId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type FactureCreateManyClientInput = {
    id?: number
    date: Date | string
    montantTotal: number
  }

  export type FactureUpdateWithoutClientInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    lignes?: LigneFactureUpdateManyWithoutFactureNestedInput
  }

  export type FactureUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    lignes?: LigneFactureUncheckedUpdateManyWithoutFactureNestedInput
  }

  export type FactureUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type CommandeFournisseurCreateManyFournisseurInput = {
    id?: number
    date: Date | string
    statut: string
  }

  export type CommandeFournisseurUpdateWithoutFournisseurInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: StringFieldUpdateOperationsInput | string
  }

  export type CommandeFournisseurUncheckedUpdateWithoutFournisseurInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: StringFieldUpdateOperationsInput | string
  }

  export type CommandeFournisseurUncheckedUpdateManyWithoutFournisseurInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: StringFieldUpdateOperationsInput | string
  }

  export type LigneFactureCreateManyFactureInput = {
    id?: number
    produitId: number
    quantite: number
    prixUnitaire: number
    sousTotal: number
  }

  export type LigneFactureUpdateWithoutFactureInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
    produit?: ProduitUpdateOneRequiredWithoutLignesNestedInput
  }

  export type LigneFactureUncheckedUpdateWithoutFactureInput = {
    id?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type LigneFactureUncheckedUpdateManyWithoutFactureInput = {
    id?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    sousTotal?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProduitCountOutputTypeDefaultArgs instead
     */
    export type ProduitCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProduitCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientCountOutputTypeDefaultArgs instead
     */
    export type ClientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FournisseurCountOutputTypeDefaultArgs instead
     */
    export type FournisseurCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FournisseurCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FactureCountOutputTypeDefaultArgs instead
     */
    export type FactureCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FactureCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EntrepriseDefaultArgs instead
     */
    export type EntrepriseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EntrepriseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProduitDefaultArgs instead
     */
    export type ProduitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProduitDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientDefaultArgs instead
     */
    export type ClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FournisseurDefaultArgs instead
     */
    export type FournisseurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FournisseurDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FactureDefaultArgs instead
     */
    export type FactureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FactureDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LigneFactureDefaultArgs instead
     */
    export type LigneFactureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LigneFactureDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommandeFournisseurDefaultArgs instead
     */
    export type CommandeFournisseurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommandeFournisseurDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}